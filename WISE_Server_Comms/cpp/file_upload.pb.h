// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_upload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fupload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fupload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fupload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fupload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fupload_2eproto;
namespace WISE {
namespace Comms {
namespace ServerProto {
class FileUpload;
class FileUploadDefaultTypeInternal;
extern FileUploadDefaultTypeInternal _FileUpload_default_instance_;
class FileUpload_UploadType;
class FileUpload_UploadTypeDefaultTypeInternal;
extern FileUpload_UploadTypeDefaultTypeInternal _FileUpload_UploadType_default_instance_;
class GeoserverUpload;
class GeoserverUploadDefaultTypeInternal;
extern GeoserverUploadDefaultTypeInternal _GeoserverUpload_default_instance_;
class MQTTUpload;
class MQTTUploadDefaultTypeInternal;
extern MQTTUploadDefaultTypeInternal _MQTTUpload_default_instance_;
}  // namespace ServerProto
}  // namespace Comms
}  // namespace WISE
PROTOBUF_NAMESPACE_OPEN
template<> ::WISE::Comms::ServerProto::FileUpload* Arena::CreateMaybeMessage<::WISE::Comms::ServerProto::FileUpload>(Arena*);
template<> ::WISE::Comms::ServerProto::FileUpload_UploadType* Arena::CreateMaybeMessage<::WISE::Comms::ServerProto::FileUpload_UploadType>(Arena*);
template<> ::WISE::Comms::ServerProto::GeoserverUpload* Arena::CreateMaybeMessage<::WISE::Comms::ServerProto::GeoserverUpload>(Arena*);
template<> ::WISE::Comms::ServerProto::MQTTUpload* Arena::CreateMaybeMessage<::WISE::Comms::ServerProto::MQTTUpload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WISE {
namespace Comms {
namespace ServerProto {

enum FileUpload_FileType : int {
  FileUpload_FileType_Unknown = 0,
  FileUpload_FileType_Summary = 1,
  FileUpload_FileType_Vector = 2,
  FileUpload_FileType_Grid = 3,
  FileUpload_FileType_FileUpload_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileUpload_FileType_FileUpload_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileUpload_FileType_IsValid(int value);
constexpr FileUpload_FileType FileUpload_FileType_FileType_MIN = FileUpload_FileType_Unknown;
constexpr FileUpload_FileType FileUpload_FileType_FileType_MAX = FileUpload_FileType_Grid;
constexpr int FileUpload_FileType_FileType_ARRAYSIZE = FileUpload_FileType_FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileUpload_FileType_descriptor();
template<typename T>
inline const std::string& FileUpload_FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileUpload_FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileUpload_FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileUpload_FileType_descriptor(), enum_t_value);
}
inline bool FileUpload_FileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileUpload_FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileUpload_FileType>(
    FileUpload_FileType_descriptor(), name, value);
}
// ===================================================================

class FileUpload_UploadType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WISE.Comms.ServerProto.FileUpload.UploadType) */ {
 public:
  inline FileUpload_UploadType() : FileUpload_UploadType(nullptr) {}
  virtual ~FileUpload_UploadType();

  FileUpload_UploadType(const FileUpload_UploadType& from);
  FileUpload_UploadType(FileUpload_UploadType&& from) noexcept
    : FileUpload_UploadType() {
    *this = ::std::move(from);
  }

  inline FileUpload_UploadType& operator=(const FileUpload_UploadType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpload_UploadType& operator=(FileUpload_UploadType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUpload_UploadType& default_instance();

  enum TypeCase {
    kMqtt = 1,
    kGeoserver = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUpload_UploadType* internal_default_instance() {
    return reinterpret_cast<const FileUpload_UploadType*>(
               &_FileUpload_UploadType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileUpload_UploadType& a, FileUpload_UploadType& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpload_UploadType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpload_UploadType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUpload_UploadType* New() const final {
    return CreateMaybeMessage<FileUpload_UploadType>(nullptr);
  }

  FileUpload_UploadType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUpload_UploadType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUpload_UploadType& from);
  void MergeFrom(const FileUpload_UploadType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpload_UploadType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WISE.Comms.ServerProto.FileUpload.UploadType";
  }
  protected:
  explicit FileUpload_UploadType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fupload_2eproto);
    return ::descriptor_table_file_5fupload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMqttFieldNumber = 1,
    kGeoserverFieldNumber = 2,
  };
  // .WISE.Comms.ServerProto.MQTTUpload mqtt = 1;
  bool has_mqtt() const;
  private:
  bool _internal_has_mqtt() const;
  public:
  void clear_mqtt();
  const ::WISE::Comms::ServerProto::MQTTUpload& mqtt() const;
  ::WISE::Comms::ServerProto::MQTTUpload* release_mqtt();
  ::WISE::Comms::ServerProto::MQTTUpload* mutable_mqtt();
  void set_allocated_mqtt(::WISE::Comms::ServerProto::MQTTUpload* mqtt);
  private:
  const ::WISE::Comms::ServerProto::MQTTUpload& _internal_mqtt() const;
  ::WISE::Comms::ServerProto::MQTTUpload* _internal_mutable_mqtt();
  public:
  void unsafe_arena_set_allocated_mqtt(
      ::WISE::Comms::ServerProto::MQTTUpload* mqtt);
  ::WISE::Comms::ServerProto::MQTTUpload* unsafe_arena_release_mqtt();

  // .WISE.Comms.ServerProto.GeoserverUpload geoserver = 2;
  bool has_geoserver() const;
  private:
  bool _internal_has_geoserver() const;
  public:
  void clear_geoserver();
  const ::WISE::Comms::ServerProto::GeoserverUpload& geoserver() const;
  ::WISE::Comms::ServerProto::GeoserverUpload* release_geoserver();
  ::WISE::Comms::ServerProto::GeoserverUpload* mutable_geoserver();
  void set_allocated_geoserver(::WISE::Comms::ServerProto::GeoserverUpload* geoserver);
  private:
  const ::WISE::Comms::ServerProto::GeoserverUpload& _internal_geoserver() const;
  ::WISE::Comms::ServerProto::GeoserverUpload* _internal_mutable_geoserver();
  public:
  void unsafe_arena_set_allocated_geoserver(
      ::WISE::Comms::ServerProto::GeoserverUpload* geoserver);
  ::WISE::Comms::ServerProto::GeoserverUpload* unsafe_arena_release_geoserver();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:WISE.Comms.ServerProto.FileUpload.UploadType)
 private:
  class _Internal;
  void set_has_mqtt();
  void set_has_geoserver();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::WISE::Comms::ServerProto::MQTTUpload* mqtt_;
    ::WISE::Comms::ServerProto::GeoserverUpload* geoserver_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_file_5fupload_2eproto;
};
// -------------------------------------------------------------------

class FileUpload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WISE.Comms.ServerProto.FileUpload) */ {
 public:
  inline FileUpload() : FileUpload(nullptr) {}
  virtual ~FileUpload();

  FileUpload(const FileUpload& from);
  FileUpload(FileUpload&& from) noexcept
    : FileUpload() {
    *this = ::std::move(from);
  }

  inline FileUpload& operator=(const FileUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUpload& operator=(FileUpload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileUpload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileUpload* internal_default_instance() {
    return reinterpret_cast<const FileUpload*>(
               &_FileUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileUpload& a, FileUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUpload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUpload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileUpload* New() const final {
    return CreateMaybeMessage<FileUpload>(nullptr);
  }

  FileUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileUpload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileUpload& from);
  void MergeFrom(const FileUpload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUpload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WISE.Comms.ServerProto.FileUpload";
  }
  protected:
  explicit FileUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fupload_2eproto);
    return ::descriptor_table_file_5fupload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileUpload_UploadType UploadType;

  typedef FileUpload_FileType FileType;
  static constexpr FileType Unknown =
    FileUpload_FileType_Unknown;
  static constexpr FileType Summary =
    FileUpload_FileType_Summary;
  static constexpr FileType Vector =
    FileUpload_FileType_Vector;
  static constexpr FileType Grid =
    FileUpload_FileType_Grid;
  static inline bool FileType_IsValid(int value) {
    return FileUpload_FileType_IsValid(value);
  }
  static constexpr FileType FileType_MIN =
    FileUpload_FileType_FileType_MIN;
  static constexpr FileType FileType_MAX =
    FileUpload_FileType_FileType_MAX;
  static constexpr int FileType_ARRAYSIZE =
    FileUpload_FileType_FileType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileType_descriptor() {
    return FileUpload_FileType_descriptor();
  }
  template<typename T>
  static inline const std::string& FileType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileType_Name.");
    return FileUpload_FileType_Name(enum_t_value);
  }
  static inline bool FileType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FileType* value) {
    return FileUpload_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUploadTypeFieldNumber = 3,
    kJobFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kFiletypeFieldNumber = 4,
    kExistsFieldNumber = 5,
  };
  // repeated .WISE.Comms.ServerProto.FileUpload.UploadType upload_type = 3;
  int upload_type_size() const;
  private:
  int _internal_upload_type_size() const;
  public:
  void clear_upload_type();
  ::WISE::Comms::ServerProto::FileUpload_UploadType* mutable_upload_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WISE::Comms::ServerProto::FileUpload_UploadType >*
      mutable_upload_type();
  private:
  const ::WISE::Comms::ServerProto::FileUpload_UploadType& _internal_upload_type(int index) const;
  ::WISE::Comms::ServerProto::FileUpload_UploadType* _internal_add_upload_type();
  public:
  const ::WISE::Comms::ServerProto::FileUpload_UploadType& upload_type(int index) const;
  ::WISE::Comms::ServerProto::FileUpload_UploadType* add_upload_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WISE::Comms::ServerProto::FileUpload_UploadType >&
      upload_type() const;

  // string job = 1;
  void clear_job();
  const std::string& job() const;
  void set_job(const std::string& value);
  void set_job(std::string&& value);
  void set_job(const char* value);
  void set_job(const char* value, size_t size);
  std::string* mutable_job();
  std::string* release_job();
  void set_allocated_job(std::string* job);
  private:
  const std::string& _internal_job() const;
  void _internal_set_job(const std::string& value);
  std::string* _internal_mutable_job();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .WISE.Comms.ServerProto.FileUpload.FileType filetype = 4;
  void clear_filetype();
  ::WISE::Comms::ServerProto::FileUpload_FileType filetype() const;
  void set_filetype(::WISE::Comms::ServerProto::FileUpload_FileType value);
  private:
  ::WISE::Comms::ServerProto::FileUpload_FileType _internal_filetype() const;
  void _internal_set_filetype(::WISE::Comms::ServerProto::FileUpload_FileType value);
  public:

  // bool exists = 5;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WISE.Comms.ServerProto.FileUpload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WISE::Comms::ServerProto::FileUpload_UploadType > upload_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int filetype_;
  bool exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fupload_2eproto;
};
// -------------------------------------------------------------------

class MQTTUpload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WISE.Comms.ServerProto.MQTTUpload) */ {
 public:
  inline MQTTUpload() : MQTTUpload(nullptr) {}
  virtual ~MQTTUpload();

  MQTTUpload(const MQTTUpload& from);
  MQTTUpload(MQTTUpload&& from) noexcept
    : MQTTUpload() {
    *this = ::std::move(from);
  }

  inline MQTTUpload& operator=(const MQTTUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline MQTTUpload& operator=(MQTTUpload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MQTTUpload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MQTTUpload* internal_default_instance() {
    return reinterpret_cast<const MQTTUpload*>(
               &_MQTTUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MQTTUpload& a, MQTTUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(MQTTUpload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MQTTUpload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MQTTUpload* New() const final {
    return CreateMaybeMessage<MQTTUpload>(nullptr);
  }

  MQTTUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MQTTUpload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MQTTUpload& from);
  void MergeFrom(const MQTTUpload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MQTTUpload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WISE.Comms.ServerProto.MQTTUpload";
  }
  protected:
  explicit MQTTUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fupload_2eproto);
    return ::descriptor_table_file_5fupload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:WISE.Comms.ServerProto.MQTTUpload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fupload_2eproto;
};
// -------------------------------------------------------------------

class GeoserverUpload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WISE.Comms.ServerProto.GeoserverUpload) */ {
 public:
  inline GeoserverUpload() : GeoserverUpload(nullptr) {}
  virtual ~GeoserverUpload();

  GeoserverUpload(const GeoserverUpload& from);
  GeoserverUpload(GeoserverUpload&& from) noexcept
    : GeoserverUpload() {
    *this = ::std::move(from);
  }

  inline GeoserverUpload& operator=(const GeoserverUpload& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoserverUpload& operator=(GeoserverUpload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoserverUpload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoserverUpload* internal_default_instance() {
    return reinterpret_cast<const GeoserverUpload*>(
               &_GeoserverUpload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GeoserverUpload& a, GeoserverUpload& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoserverUpload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoserverUpload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoserverUpload* New() const final {
    return CreateMaybeMessage<GeoserverUpload>(nullptr);
  }

  GeoserverUpload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoserverUpload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoserverUpload& from);
  void MergeFrom(const GeoserverUpload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoserverUpload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WISE.Comms.ServerProto.GeoserverUpload";
  }
  protected:
  explicit GeoserverUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_file_5fupload_2eproto);
    return ::descriptor_table_file_5fupload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kUrlFieldNumber = 3,
    kWorkspaceFieldNumber = 4,
    kCoverageFieldNumber = 5,
    kSrsFieldNumber = 6,
    kVectorCoverageFieldNumber = 7,
    kRasterCoverageFieldNumber = 8,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string workspace = 4;
  void clear_workspace();
  const std::string& workspace() const;
  void set_workspace(const std::string& value);
  void set_workspace(std::string&& value);
  void set_workspace(const char* value);
  void set_workspace(const char* value, size_t size);
  std::string* mutable_workspace();
  std::string* release_workspace();
  void set_allocated_workspace(std::string* workspace);
  private:
  const std::string& _internal_workspace() const;
  void _internal_set_workspace(const std::string& value);
  std::string* _internal_mutable_workspace();
  public:

  // string coverage = 5;
  void clear_coverage();
  const std::string& coverage() const;
  void set_coverage(const std::string& value);
  void set_coverage(std::string&& value);
  void set_coverage(const char* value);
  void set_coverage(const char* value, size_t size);
  std::string* mutable_coverage();
  std::string* release_coverage();
  void set_allocated_coverage(std::string* coverage);
  private:
  const std::string& _internal_coverage() const;
  void _internal_set_coverage(const std::string& value);
  std::string* _internal_mutable_coverage();
  public:

  // string srs = 6;
  void clear_srs();
  const std::string& srs() const;
  void set_srs(const std::string& value);
  void set_srs(std::string&& value);
  void set_srs(const char* value);
  void set_srs(const char* value, size_t size);
  std::string* mutable_srs();
  std::string* release_srs();
  void set_allocated_srs(std::string* srs);
  private:
  const std::string& _internal_srs() const;
  void _internal_set_srs(const std::string& value);
  std::string* _internal_mutable_srs();
  public:

  // .google.protobuf.StringValue vector_coverage = 7;
  bool has_vector_coverage() const;
  private:
  bool _internal_has_vector_coverage() const;
  public:
  void clear_vector_coverage();
  const PROTOBUF_NAMESPACE_ID::StringValue& vector_coverage() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_vector_coverage();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_vector_coverage();
  void set_allocated_vector_coverage(PROTOBUF_NAMESPACE_ID::StringValue* vector_coverage);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_vector_coverage() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_vector_coverage();
  public:
  void unsafe_arena_set_allocated_vector_coverage(
      PROTOBUF_NAMESPACE_ID::StringValue* vector_coverage);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_vector_coverage();

  // .google.protobuf.StringValue raster_coverage = 8;
  bool has_raster_coverage() const;
  private:
  bool _internal_has_raster_coverage() const;
  public:
  void clear_raster_coverage();
  const PROTOBUF_NAMESPACE_ID::StringValue& raster_coverage() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_raster_coverage();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_raster_coverage();
  void set_allocated_raster_coverage(PROTOBUF_NAMESPACE_ID::StringValue* raster_coverage);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_raster_coverage() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_raster_coverage();
  public:
  void unsafe_arena_set_allocated_raster_coverage(
      PROTOBUF_NAMESPACE_ID::StringValue* raster_coverage);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_raster_coverage();

  // @@protoc_insertion_point(class_scope:WISE.Comms.ServerProto.GeoserverUpload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coverage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srs_;
  PROTOBUF_NAMESPACE_ID::StringValue* vector_coverage_;
  PROTOBUF_NAMESPACE_ID::StringValue* raster_coverage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_5fupload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUpload_UploadType

// .WISE.Comms.ServerProto.MQTTUpload mqtt = 1;
inline bool FileUpload_UploadType::_internal_has_mqtt() const {
  return type_case() == kMqtt;
}
inline bool FileUpload_UploadType::has_mqtt() const {
  return _internal_has_mqtt();
}
inline void FileUpload_UploadType::set_has_mqtt() {
  _oneof_case_[0] = kMqtt;
}
inline void FileUpload_UploadType::clear_mqtt() {
  if (_internal_has_mqtt()) {
    if (GetArena() == nullptr) {
      delete type_.mqtt_;
    }
    clear_has_type();
  }
}
inline ::WISE::Comms::ServerProto::MQTTUpload* FileUpload_UploadType::release_mqtt() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
  if (_internal_has_mqtt()) {
    clear_has_type();
      ::WISE::Comms::ServerProto::MQTTUpload* temp = type_.mqtt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.mqtt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::WISE::Comms::ServerProto::MQTTUpload& FileUpload_UploadType::_internal_mqtt() const {
  return _internal_has_mqtt()
      ? *type_.mqtt_
      : *reinterpret_cast< ::WISE::Comms::ServerProto::MQTTUpload*>(&::WISE::Comms::ServerProto::_MQTTUpload_default_instance_);
}
inline const ::WISE::Comms::ServerProto::MQTTUpload& FileUpload_UploadType::mqtt() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
  return _internal_mqtt();
}
inline ::WISE::Comms::ServerProto::MQTTUpload* FileUpload_UploadType::unsafe_arena_release_mqtt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
  if (_internal_has_mqtt()) {
    clear_has_type();
    ::WISE::Comms::ServerProto::MQTTUpload* temp = type_.mqtt_;
    type_.mqtt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileUpload_UploadType::unsafe_arena_set_allocated_mqtt(::WISE::Comms::ServerProto::MQTTUpload* mqtt) {
  clear_type();
  if (mqtt) {
    set_has_mqtt();
    type_.mqtt_ = mqtt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
}
inline ::WISE::Comms::ServerProto::MQTTUpload* FileUpload_UploadType::_internal_mutable_mqtt() {
  if (!_internal_has_mqtt()) {
    clear_type();
    set_has_mqtt();
    type_.mqtt_ = CreateMaybeMessage< ::WISE::Comms::ServerProto::MQTTUpload >(GetArena());
  }
  return type_.mqtt_;
}
inline ::WISE::Comms::ServerProto::MQTTUpload* FileUpload_UploadType::mutable_mqtt() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
  return _internal_mutable_mqtt();
}

// .WISE.Comms.ServerProto.GeoserverUpload geoserver = 2;
inline bool FileUpload_UploadType::_internal_has_geoserver() const {
  return type_case() == kGeoserver;
}
inline bool FileUpload_UploadType::has_geoserver() const {
  return _internal_has_geoserver();
}
inline void FileUpload_UploadType::set_has_geoserver() {
  _oneof_case_[0] = kGeoserver;
}
inline void FileUpload_UploadType::clear_geoserver() {
  if (_internal_has_geoserver()) {
    if (GetArena() == nullptr) {
      delete type_.geoserver_;
    }
    clear_has_type();
  }
}
inline ::WISE::Comms::ServerProto::GeoserverUpload* FileUpload_UploadType::release_geoserver() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
  if (_internal_has_geoserver()) {
    clear_has_type();
      ::WISE::Comms::ServerProto::GeoserverUpload* temp = type_.geoserver_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.geoserver_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::WISE::Comms::ServerProto::GeoserverUpload& FileUpload_UploadType::_internal_geoserver() const {
  return _internal_has_geoserver()
      ? *type_.geoserver_
      : *reinterpret_cast< ::WISE::Comms::ServerProto::GeoserverUpload*>(&::WISE::Comms::ServerProto::_GeoserverUpload_default_instance_);
}
inline const ::WISE::Comms::ServerProto::GeoserverUpload& FileUpload_UploadType::geoserver() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
  return _internal_geoserver();
}
inline ::WISE::Comms::ServerProto::GeoserverUpload* FileUpload_UploadType::unsafe_arena_release_geoserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
  if (_internal_has_geoserver()) {
    clear_has_type();
    ::WISE::Comms::ServerProto::GeoserverUpload* temp = type_.geoserver_;
    type_.geoserver_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileUpload_UploadType::unsafe_arena_set_allocated_geoserver(::WISE::Comms::ServerProto::GeoserverUpload* geoserver) {
  clear_type();
  if (geoserver) {
    set_has_geoserver();
    type_.geoserver_ = geoserver;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
}
inline ::WISE::Comms::ServerProto::GeoserverUpload* FileUpload_UploadType::_internal_mutable_geoserver() {
  if (!_internal_has_geoserver()) {
    clear_type();
    set_has_geoserver();
    type_.geoserver_ = CreateMaybeMessage< ::WISE::Comms::ServerProto::GeoserverUpload >(GetArena());
  }
  return type_.geoserver_;
}
inline ::WISE::Comms::ServerProto::GeoserverUpload* FileUpload_UploadType::mutable_geoserver() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
  return _internal_mutable_geoserver();
}

inline bool FileUpload_UploadType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FileUpload_UploadType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline FileUpload_UploadType::TypeCase FileUpload_UploadType::type_case() const {
  return FileUpload_UploadType::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileUpload

// string job = 1;
inline void FileUpload::clear_job() {
  job_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload::job() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.job)
  return _internal_job();
}
inline void FileUpload::set_job(const std::string& value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.FileUpload.job)
}
inline std::string* FileUpload::mutable_job() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.FileUpload.job)
  return _internal_mutable_job();
}
inline const std::string& FileUpload::_internal_job() const {
  return job_.Get();
}
inline void FileUpload::_internal_set_job(const std::string& value) {
  
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload::set_job(std::string&& value) {
  
  job_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.FileUpload.job)
}
inline void FileUpload::set_job(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.FileUpload.job)
}
inline void FileUpload::set_job(const char* value,
    size_t size) {
  
  job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.FileUpload.job)
}
inline std::string* FileUpload::_internal_mutable_job() {
  
  return job_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload::release_job() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.FileUpload.job)
  return job_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload::set_allocated_job(std::string* job) {
  if (job != nullptr) {
    
  } else {
    
  }
  job_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.FileUpload.job)
}

// string filename = 2;
inline void FileUpload::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileUpload::filename() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.filename)
  return _internal_filename();
}
inline void FileUpload::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.FileUpload.filename)
}
inline std::string* FileUpload::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.FileUpload.filename)
  return _internal_mutable_filename();
}
inline const std::string& FileUpload::_internal_filename() const {
  return filename_.Get();
}
inline void FileUpload::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileUpload::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.FileUpload.filename)
}
inline void FileUpload::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.FileUpload.filename)
}
inline void FileUpload::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.FileUpload.filename)
}
inline std::string* FileUpload::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileUpload::release_filename() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.FileUpload.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileUpload::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.FileUpload.filename)
}

// repeated .WISE.Comms.ServerProto.FileUpload.UploadType upload_type = 3;
inline int FileUpload::_internal_upload_type_size() const {
  return upload_type_.size();
}
inline int FileUpload::upload_type_size() const {
  return _internal_upload_type_size();
}
inline void FileUpload::clear_upload_type() {
  upload_type_.Clear();
}
inline ::WISE::Comms::ServerProto::FileUpload_UploadType* FileUpload::mutable_upload_type(int index) {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.FileUpload.upload_type)
  return upload_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WISE::Comms::ServerProto::FileUpload_UploadType >*
FileUpload::mutable_upload_type() {
  // @@protoc_insertion_point(field_mutable_list:WISE.Comms.ServerProto.FileUpload.upload_type)
  return &upload_type_;
}
inline const ::WISE::Comms::ServerProto::FileUpload_UploadType& FileUpload::_internal_upload_type(int index) const {
  return upload_type_.Get(index);
}
inline const ::WISE::Comms::ServerProto::FileUpload_UploadType& FileUpload::upload_type(int index) const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.upload_type)
  return _internal_upload_type(index);
}
inline ::WISE::Comms::ServerProto::FileUpload_UploadType* FileUpload::_internal_add_upload_type() {
  return upload_type_.Add();
}
inline ::WISE::Comms::ServerProto::FileUpload_UploadType* FileUpload::add_upload_type() {
  // @@protoc_insertion_point(field_add:WISE.Comms.ServerProto.FileUpload.upload_type)
  return _internal_add_upload_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WISE::Comms::ServerProto::FileUpload_UploadType >&
FileUpload::upload_type() const {
  // @@protoc_insertion_point(field_list:WISE.Comms.ServerProto.FileUpload.upload_type)
  return upload_type_;
}

// .WISE.Comms.ServerProto.FileUpload.FileType filetype = 4;
inline void FileUpload::clear_filetype() {
  filetype_ = 0;
}
inline ::WISE::Comms::ServerProto::FileUpload_FileType FileUpload::_internal_filetype() const {
  return static_cast< ::WISE::Comms::ServerProto::FileUpload_FileType >(filetype_);
}
inline ::WISE::Comms::ServerProto::FileUpload_FileType FileUpload::filetype() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.filetype)
  return _internal_filetype();
}
inline void FileUpload::_internal_set_filetype(::WISE::Comms::ServerProto::FileUpload_FileType value) {
  
  filetype_ = value;
}
inline void FileUpload::set_filetype(::WISE::Comms::ServerProto::FileUpload_FileType value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.FileUpload.filetype)
}

// bool exists = 5;
inline void FileUpload::clear_exists() {
  exists_ = false;
}
inline bool FileUpload::_internal_exists() const {
  return exists_;
}
inline bool FileUpload::exists() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.FileUpload.exists)
  return _internal_exists();
}
inline void FileUpload::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void FileUpload::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.FileUpload.exists)
}

// -------------------------------------------------------------------

// MQTTUpload

// string username = 1;
inline void MQTTUpload::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MQTTUpload::username() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.MQTTUpload.username)
  return _internal_username();
}
inline void MQTTUpload::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.MQTTUpload.username)
}
inline std::string* MQTTUpload::mutable_username() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.MQTTUpload.username)
  return _internal_mutable_username();
}
inline const std::string& MQTTUpload::_internal_username() const {
  return username_.Get();
}
inline void MQTTUpload::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MQTTUpload::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.MQTTUpload.username)
}
inline void MQTTUpload::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.MQTTUpload.username)
}
inline void MQTTUpload::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.MQTTUpload.username)
}
inline std::string* MQTTUpload::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MQTTUpload::release_username() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.MQTTUpload.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MQTTUpload::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.MQTTUpload.username)
}

// string password = 2;
inline void MQTTUpload::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MQTTUpload::password() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.MQTTUpload.password)
  return _internal_password();
}
inline void MQTTUpload::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.MQTTUpload.password)
}
inline std::string* MQTTUpload::mutable_password() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.MQTTUpload.password)
  return _internal_mutable_password();
}
inline const std::string& MQTTUpload::_internal_password() const {
  return password_.Get();
}
inline void MQTTUpload::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MQTTUpload::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.MQTTUpload.password)
}
inline void MQTTUpload::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.MQTTUpload.password)
}
inline void MQTTUpload::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.MQTTUpload.password)
}
inline std::string* MQTTUpload::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MQTTUpload::release_password() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.MQTTUpload.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MQTTUpload::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.MQTTUpload.password)
}

// -------------------------------------------------------------------

// GeoserverUpload

// string username = 1;
inline void GeoserverUpload::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::username() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.username)
  return _internal_username();
}
inline void GeoserverUpload::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.username)
}
inline std::string* GeoserverUpload::mutable_username() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.username)
  return _internal_mutable_username();
}
inline const std::string& GeoserverUpload::_internal_username() const {
  return username_.Get();
}
inline void GeoserverUpload::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.username)
}
inline void GeoserverUpload::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.username)
}
inline void GeoserverUpload::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.username)
}
inline std::string* GeoserverUpload::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_username() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.username)
}

// string password = 2;
inline void GeoserverUpload::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::password() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.password)
  return _internal_password();
}
inline void GeoserverUpload::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.password)
}
inline std::string* GeoserverUpload::mutable_password() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.password)
  return _internal_mutable_password();
}
inline const std::string& GeoserverUpload::_internal_password() const {
  return password_.Get();
}
inline void GeoserverUpload::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.password)
}
inline void GeoserverUpload::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.password)
}
inline void GeoserverUpload::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.password)
}
inline std::string* GeoserverUpload::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_password() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.password)
}

// string url = 3;
inline void GeoserverUpload::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::url() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.url)
  return _internal_url();
}
inline void GeoserverUpload::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.url)
}
inline std::string* GeoserverUpload::mutable_url() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.url)
  return _internal_mutable_url();
}
inline const std::string& GeoserverUpload::_internal_url() const {
  return url_.Get();
}
inline void GeoserverUpload::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.url)
}
inline void GeoserverUpload::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.url)
}
inline void GeoserverUpload::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.url)
}
inline std::string* GeoserverUpload::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_url() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.url)
}

// string workspace = 4;
inline void GeoserverUpload::clear_workspace() {
  workspace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::workspace() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.workspace)
  return _internal_workspace();
}
inline void GeoserverUpload::set_workspace(const std::string& value) {
  _internal_set_workspace(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.workspace)
}
inline std::string* GeoserverUpload::mutable_workspace() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.workspace)
  return _internal_mutable_workspace();
}
inline const std::string& GeoserverUpload::_internal_workspace() const {
  return workspace_.Get();
}
inline void GeoserverUpload::_internal_set_workspace(const std::string& value) {
  
  workspace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_workspace(std::string&& value) {
  
  workspace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.workspace)
}
inline void GeoserverUpload::set_workspace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.workspace)
}
inline void GeoserverUpload::set_workspace(const char* value,
    size_t size) {
  
  workspace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.workspace)
}
inline std::string* GeoserverUpload::_internal_mutable_workspace() {
  
  return workspace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_workspace() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.workspace)
  return workspace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_workspace(std::string* workspace) {
  if (workspace != nullptr) {
    
  } else {
    
  }
  workspace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.workspace)
}

// string coverage = 5;
inline void GeoserverUpload::clear_coverage() {
  coverage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::coverage() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.coverage)
  return _internal_coverage();
}
inline void GeoserverUpload::set_coverage(const std::string& value) {
  _internal_set_coverage(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.coverage)
}
inline std::string* GeoserverUpload::mutable_coverage() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.coverage)
  return _internal_mutable_coverage();
}
inline const std::string& GeoserverUpload::_internal_coverage() const {
  return coverage_.Get();
}
inline void GeoserverUpload::_internal_set_coverage(const std::string& value) {
  
  coverage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_coverage(std::string&& value) {
  
  coverage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.coverage)
}
inline void GeoserverUpload::set_coverage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coverage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.coverage)
}
inline void GeoserverUpload::set_coverage(const char* value,
    size_t size) {
  
  coverage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.coverage)
}
inline std::string* GeoserverUpload::_internal_mutable_coverage() {
  
  return coverage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_coverage() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.coverage)
  return coverage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_coverage(std::string* coverage) {
  if (coverage != nullptr) {
    
  } else {
    
  }
  coverage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coverage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.coverage)
}

// string srs = 6;
inline void GeoserverUpload::clear_srs() {
  srs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoserverUpload::srs() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.srs)
  return _internal_srs();
}
inline void GeoserverUpload::set_srs(const std::string& value) {
  _internal_set_srs(value);
  // @@protoc_insertion_point(field_set:WISE.Comms.ServerProto.GeoserverUpload.srs)
}
inline std::string* GeoserverUpload::mutable_srs() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.srs)
  return _internal_mutable_srs();
}
inline const std::string& GeoserverUpload::_internal_srs() const {
  return srs_.Get();
}
inline void GeoserverUpload::_internal_set_srs(const std::string& value) {
  
  srs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoserverUpload::set_srs(std::string&& value) {
  
  srs_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WISE.Comms.ServerProto.GeoserverUpload.srs)
}
inline void GeoserverUpload::set_srs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WISE.Comms.ServerProto.GeoserverUpload.srs)
}
inline void GeoserverUpload::set_srs(const char* value,
    size_t size) {
  
  srs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WISE.Comms.ServerProto.GeoserverUpload.srs)
}
inline std::string* GeoserverUpload::_internal_mutable_srs() {
  
  return srs_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoserverUpload::release_srs() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.srs)
  return srs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoserverUpload::set_allocated_srs(std::string* srs) {
  if (srs != nullptr) {
    
  } else {
    
  }
  srs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.srs)
}

// .google.protobuf.StringValue vector_coverage = 7;
inline bool GeoserverUpload::_internal_has_vector_coverage() const {
  return this != internal_default_instance() && vector_coverage_ != nullptr;
}
inline bool GeoserverUpload::has_vector_coverage() const {
  return _internal_has_vector_coverage();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeoserverUpload::_internal_vector_coverage() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = vector_coverage_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeoserverUpload::vector_coverage() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.vector_coverage)
  return _internal_vector_coverage();
}
inline void GeoserverUpload::unsafe_arena_set_allocated_vector_coverage(
    PROTOBUF_NAMESPACE_ID::StringValue* vector_coverage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_coverage_);
  }
  vector_coverage_ = vector_coverage;
  if (vector_coverage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.vector_coverage)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::release_vector_coverage() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = vector_coverage_;
  vector_coverage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::unsafe_arena_release_vector_coverage() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.vector_coverage)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = vector_coverage_;
  vector_coverage_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::_internal_mutable_vector_coverage() {
  
  if (vector_coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    vector_coverage_ = p;
  }
  return vector_coverage_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::mutable_vector_coverage() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.vector_coverage)
  return _internal_mutable_vector_coverage();
}
inline void GeoserverUpload::set_allocated_vector_coverage(PROTOBUF_NAMESPACE_ID::StringValue* vector_coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_coverage_);
  }
  if (vector_coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_coverage)->GetArena();
    if (message_arena != submessage_arena) {
      vector_coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_coverage, submessage_arena);
    }
    
  } else {
    
  }
  vector_coverage_ = vector_coverage;
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.vector_coverage)
}

// .google.protobuf.StringValue raster_coverage = 8;
inline bool GeoserverUpload::_internal_has_raster_coverage() const {
  return this != internal_default_instance() && raster_coverage_ != nullptr;
}
inline bool GeoserverUpload::has_raster_coverage() const {
  return _internal_has_raster_coverage();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeoserverUpload::_internal_raster_coverage() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = raster_coverage_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeoserverUpload::raster_coverage() const {
  // @@protoc_insertion_point(field_get:WISE.Comms.ServerProto.GeoserverUpload.raster_coverage)
  return _internal_raster_coverage();
}
inline void GeoserverUpload::unsafe_arena_set_allocated_raster_coverage(
    PROTOBUF_NAMESPACE_ID::StringValue* raster_coverage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster_coverage_);
  }
  raster_coverage_ = raster_coverage;
  if (raster_coverage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.raster_coverage)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::release_raster_coverage() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = raster_coverage_;
  raster_coverage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::unsafe_arena_release_raster_coverage() {
  // @@protoc_insertion_point(field_release:WISE.Comms.ServerProto.GeoserverUpload.raster_coverage)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = raster_coverage_;
  raster_coverage_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::_internal_mutable_raster_coverage() {
  
  if (raster_coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    raster_coverage_ = p;
  }
  return raster_coverage_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeoserverUpload::mutable_raster_coverage() {
  // @@protoc_insertion_point(field_mutable:WISE.Comms.ServerProto.GeoserverUpload.raster_coverage)
  return _internal_mutable_raster_coverage();
}
inline void GeoserverUpload::set_allocated_raster_coverage(PROTOBUF_NAMESPACE_ID::StringValue* raster_coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster_coverage_);
  }
  if (raster_coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster_coverage)->GetArena();
    if (message_arena != submessage_arena) {
      raster_coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raster_coverage, submessage_arena);
    }
    
  } else {
    
  }
  raster_coverage_ = raster_coverage;
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.GeoserverUpload.raster_coverage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerProto
}  // namespace Comms
}  // namespace WISE

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WISE::Comms::ServerProto::FileUpload_FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WISE::Comms::ServerProto::FileUpload_FileType>() {
  return ::WISE::Comms::ServerProto::FileUpload_FileType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fupload_2eproto
