// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_upload.proto

#include "file_upload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_file_5fupload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileUpload_UploadType_file_5fupload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_file_5fupload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoserverUpload_file_5fupload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_file_5fupload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MQTTUpload_file_5fupload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
namespace WISE {
namespace Comms {
namespace ServerProto {
class FileUpload_UploadTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileUpload_UploadType> _instance;
  const ::WISE::Comms::ServerProto::MQTTUpload* mqtt_;
  const ::WISE::Comms::ServerProto::GeoserverUpload* geoserver_;
} _FileUpload_UploadType_default_instance_;
class FileUploadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileUpload> _instance;
} _FileUpload_default_instance_;
class MQTTUploadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MQTTUpload> _instance;
} _MQTTUpload_default_instance_;
class GeoserverUploadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoserverUpload> _instance;
} _GeoserverUpload_default_instance_;
}  // namespace ServerProto
}  // namespace Comms
}  // namespace WISE
static void InitDefaultsscc_info_FileUpload_file_5fupload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WISE::Comms::ServerProto::_FileUpload_default_instance_;
    new (ptr) ::WISE::Comms::ServerProto::FileUpload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WISE::Comms::ServerProto::FileUpload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileUpload_file_5fupload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileUpload_file_5fupload_2eproto}, {
      &scc_info_FileUpload_UploadType_file_5fupload_2eproto.base,}};

static void InitDefaultsscc_info_FileUpload_UploadType_file_5fupload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WISE::Comms::ServerProto::_FileUpload_UploadType_default_instance_;
    new (ptr) ::WISE::Comms::ServerProto::FileUpload_UploadType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WISE::Comms::ServerProto::FileUpload_UploadType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileUpload_UploadType_file_5fupload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FileUpload_UploadType_file_5fupload_2eproto}, {
      &scc_info_MQTTUpload_file_5fupload_2eproto.base,
      &scc_info_GeoserverUpload_file_5fupload_2eproto.base,}};

static void InitDefaultsscc_info_GeoserverUpload_file_5fupload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WISE::Comms::ServerProto::_GeoserverUpload_default_instance_;
    new (ptr) ::WISE::Comms::ServerProto::GeoserverUpload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WISE::Comms::ServerProto::GeoserverUpload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoserverUpload_file_5fupload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoserverUpload_file_5fupload_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MQTTUpload_file_5fupload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::WISE::Comms::ServerProto::_MQTTUpload_default_instance_;
    new (ptr) ::WISE::Comms::ServerProto::MQTTUpload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WISE::Comms::ServerProto::MQTTUpload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MQTTUpload_file_5fupload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MQTTUpload_file_5fupload_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_file_5fupload_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_file_5fupload_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_file_5fupload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_file_5fupload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload_UploadType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload_UploadType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::WISE::Comms::ServerProto::FileUpload_UploadTypeDefaultTypeInternal, mqtt_),
  offsetof(::WISE::Comms::ServerProto::FileUpload_UploadTypeDefaultTypeInternal, geoserver_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload_UploadType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, job_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, filename_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, upload_type_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, filetype_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::FileUpload, exists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::MQTTUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::MQTTUpload, username_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::MQTTUpload, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, username_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, password_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, url_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, workspace_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, coverage_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, srs_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, vector_coverage_),
  PROTOBUF_FIELD_OFFSET(::WISE::Comms::ServerProto::GeoserverUpload, raster_coverage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WISE::Comms::ServerProto::FileUpload_UploadType)},
  { 8, -1, sizeof(::WISE::Comms::ServerProto::FileUpload)},
  { 18, -1, sizeof(::WISE::Comms::ServerProto::MQTTUpload)},
  { 25, -1, sizeof(::WISE::Comms::ServerProto::GeoserverUpload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WISE::Comms::ServerProto::_FileUpload_UploadType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WISE::Comms::ServerProto::_FileUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WISE::Comms::ServerProto::_MQTTUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WISE::Comms::ServerProto::_GeoserverUpload_default_instance_),
};

const char descriptor_table_protodef_file_5fupload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021file_upload.proto\022\026WISE.Comms.ServerPr"
  "oto\032\036google/protobuf/wrappers.proto\"\203\003\n\n"
  "FileUpload\022\013\n\003job\030\001 \001(\t\022\020\n\010filename\030\002 \001("
  "\t\022B\n\013upload_type\030\003 \003(\0132-.WISE.Comms.Serv"
  "erProto.FileUpload.UploadType\022=\n\010filetyp"
  "e\030\004 \001(\0162+.WISE.Comms.ServerProto.FileUpl"
  "oad.FileType\022\016\n\006exists\030\005 \001(\010\032\206\001\n\nUploadT"
  "ype\0222\n\004mqtt\030\001 \001(\0132\".WISE.Comms.ServerPro"
  "to.MQTTUploadH\000\022<\n\tgeoserver\030\002 \001(\0132\'.WIS"
  "E.Comms.ServerProto.GeoserverUploadH\000B\006\n"
  "\004type\":\n\010FileType\022\013\n\007Unknown\020\000\022\013\n\007Summar"
  "y\020\001\022\n\n\006Vector\020\002\022\010\n\004Grid\020\003\"0\n\nMQTTUpload\022"
  "\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\342\001\n\017"
  "GeoserverUpload\022\020\n\010username\030\001 \001(\t\022\020\n\010pas"
  "sword\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\021\n\tworkspace\030\004 "
  "\001(\t\022\020\n\010coverage\030\005 \001(\t\022\013\n\003srs\030\006 \001(\t\0225\n\017ve"
  "ctor_coverage\030\007 \001(\0132\034.google.protobuf.St"
  "ringValue\0225\n\017raster_coverage\030\010 \001(\0132\034.goo"
  "gle.protobuf.StringValueB7\n\032ca.wise.comm"
  "s.server.protoP\001\252\002\026WISE.Comms.ServerProt"
  "ob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_file_5fupload_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_file_5fupload_2eproto_sccs[4] = {
  &scc_info_FileUpload_file_5fupload_2eproto.base,
  &scc_info_FileUpload_UploadType_file_5fupload_2eproto.base,
  &scc_info_GeoserverUpload_file_5fupload_2eproto.base,
  &scc_info_MQTTUpload_file_5fupload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_file_5fupload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_5fupload_2eproto = {
  false, false, descriptor_table_protodef_file_5fupload_2eproto, "file_upload.proto", 809,
  &descriptor_table_file_5fupload_2eproto_once, descriptor_table_file_5fupload_2eproto_sccs, descriptor_table_file_5fupload_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_file_5fupload_2eproto::offsets,
  file_level_metadata_file_5fupload_2eproto, 4, file_level_enum_descriptors_file_5fupload_2eproto, file_level_service_descriptors_file_5fupload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_file_5fupload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_file_5fupload_2eproto)), true);
namespace WISE {
namespace Comms {
namespace ServerProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileUpload_FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_file_5fupload_2eproto);
  return file_level_enum_descriptors_file_5fupload_2eproto[0];
}
bool FileUpload_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FileUpload_FileType FileUpload::Unknown;
constexpr FileUpload_FileType FileUpload::Summary;
constexpr FileUpload_FileType FileUpload::Vector;
constexpr FileUpload_FileType FileUpload::Grid;
constexpr FileUpload_FileType FileUpload::FileType_MIN;
constexpr FileUpload_FileType FileUpload::FileType_MAX;
constexpr int FileUpload::FileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FileUpload_UploadType::InitAsDefaultInstance() {
  ::WISE::Comms::ServerProto::_FileUpload_UploadType_default_instance_.mqtt_ = const_cast< ::WISE::Comms::ServerProto::MQTTUpload*>(
      ::WISE::Comms::ServerProto::MQTTUpload::internal_default_instance());
  ::WISE::Comms::ServerProto::_FileUpload_UploadType_default_instance_.geoserver_ = const_cast< ::WISE::Comms::ServerProto::GeoserverUpload*>(
      ::WISE::Comms::ServerProto::GeoserverUpload::internal_default_instance());
}
class FileUpload_UploadType::_Internal {
 public:
  static const ::WISE::Comms::ServerProto::MQTTUpload& mqtt(const FileUpload_UploadType* msg);
  static const ::WISE::Comms::ServerProto::GeoserverUpload& geoserver(const FileUpload_UploadType* msg);
};

const ::WISE::Comms::ServerProto::MQTTUpload&
FileUpload_UploadType::_Internal::mqtt(const FileUpload_UploadType* msg) {
  return *msg->type_.mqtt_;
}
const ::WISE::Comms::ServerProto::GeoserverUpload&
FileUpload_UploadType::_Internal::geoserver(const FileUpload_UploadType* msg) {
  return *msg->type_.geoserver_;
}
void FileUpload_UploadType::set_allocated_mqtt(::WISE::Comms::ServerProto::MQTTUpload* mqtt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (mqtt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mqtt);
    if (message_arena != submessage_arena) {
      mqtt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mqtt, submessage_arena);
    }
    set_has_mqtt();
    type_.mqtt_ = mqtt;
  }
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.FileUpload.UploadType.mqtt)
}
void FileUpload_UploadType::set_allocated_geoserver(::WISE::Comms::ServerProto::GeoserverUpload* geoserver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (geoserver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geoserver);
    if (message_arena != submessage_arena) {
      geoserver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geoserver, submessage_arena);
    }
    set_has_geoserver();
    type_.geoserver_ = geoserver;
  }
  // @@protoc_insertion_point(field_set_allocated:WISE.Comms.ServerProto.FileUpload.UploadType.geoserver)
}
FileUpload_UploadType::FileUpload_UploadType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WISE.Comms.ServerProto.FileUpload.UploadType)
}
FileUpload_UploadType::FileUpload_UploadType(const FileUpload_UploadType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kMqtt: {
      _internal_mutable_mqtt()->::WISE::Comms::ServerProto::MQTTUpload::MergeFrom(from._internal_mqtt());
      break;
    }
    case kGeoserver: {
      _internal_mutable_geoserver()->::WISE::Comms::ServerProto::GeoserverUpload::MergeFrom(from._internal_geoserver());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WISE.Comms.ServerProto.FileUpload.UploadType)
}

void FileUpload_UploadType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileUpload_UploadType_file_5fupload_2eproto.base);
  clear_has_type();
}

FileUpload_UploadType::~FileUpload_UploadType() {
  // @@protoc_insertion_point(destructor:WISE.Comms.ServerProto.FileUpload.UploadType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileUpload_UploadType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void FileUpload_UploadType::ArenaDtor(void* object) {
  FileUpload_UploadType* _this = reinterpret_cast< FileUpload_UploadType* >(object);
  (void)_this;
}
void FileUpload_UploadType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileUpload_UploadType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileUpload_UploadType& FileUpload_UploadType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileUpload_UploadType_file_5fupload_2eproto.base);
  return *internal_default_instance();
}


void FileUpload_UploadType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  switch (type_case()) {
    case kMqtt: {
      if (GetArena() == nullptr) {
        delete type_.mqtt_;
      }
      break;
    }
    case kGeoserver: {
      if (GetArena() == nullptr) {
        delete type_.geoserver_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void FileUpload_UploadType::Clear() {
// @@protoc_insertion_point(message_clear_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileUpload_UploadType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .WISE.Comms.ServerProto.MQTTUpload mqtt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mqtt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WISE.Comms.ServerProto.GeoserverUpload geoserver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geoserver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileUpload_UploadType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WISE.Comms.ServerProto.MQTTUpload mqtt = 1;
  if (_internal_has_mqtt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mqtt(this), target, stream);
  }

  // .WISE.Comms.ServerProto.GeoserverUpload geoserver = 2;
  if (_internal_has_geoserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geoserver(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WISE.Comms.ServerProto.FileUpload.UploadType)
  return target;
}

size_t FileUpload_UploadType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .WISE.Comms.ServerProto.MQTTUpload mqtt = 1;
    case kMqtt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.mqtt_);
      break;
    }
    // .WISE.Comms.ServerProto.GeoserverUpload geoserver = 2;
    case kGeoserver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.geoserver_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileUpload_UploadType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  GOOGLE_DCHECK_NE(&from, this);
  const FileUpload_UploadType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileUpload_UploadType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WISE.Comms.ServerProto.FileUpload.UploadType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WISE.Comms.ServerProto.FileUpload.UploadType)
    MergeFrom(*source);
  }
}

void FileUpload_UploadType::MergeFrom(const FileUpload_UploadType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kMqtt: {
      _internal_mutable_mqtt()->::WISE::Comms::ServerProto::MQTTUpload::MergeFrom(from._internal_mqtt());
      break;
    }
    case kGeoserver: {
      _internal_mutable_geoserver()->::WISE::Comms::ServerProto::GeoserverUpload::MergeFrom(from._internal_geoserver());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void FileUpload_UploadType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUpload_UploadType::CopyFrom(const FileUpload_UploadType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WISE.Comms.ServerProto.FileUpload.UploadType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUpload_UploadType::IsInitialized() const {
  return true;
}

void FileUpload_UploadType::InternalSwap(FileUpload_UploadType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileUpload_UploadType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileUpload::InitAsDefaultInstance() {
}
class FileUpload::_Internal {
 public:
};

FileUpload::FileUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  upload_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WISE.Comms.ServerProto.FileUpload)
}
FileUpload::FileUpload(const FileUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      upload_type_(from.upload_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job().empty()) {
    job_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_job(),
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  ::memcpy(&filetype_, &from.filetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&exists_) -
    reinterpret_cast<char*>(&filetype_)) + sizeof(exists_));
  // @@protoc_insertion_point(copy_constructor:WISE.Comms.ServerProto.FileUpload)
}

void FileUpload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileUpload_file_5fupload_2eproto.base);
  job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&filetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&filetype_)) + sizeof(exists_));
}

FileUpload::~FileUpload() {
  // @@protoc_insertion_point(destructor:WISE.Comms.ServerProto.FileUpload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileUpload::ArenaDtor(void* object) {
  FileUpload* _this = reinterpret_cast< FileUpload* >(object);
  (void)_this;
}
void FileUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileUpload& FileUpload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileUpload_file_5fupload_2eproto.base);
  return *internal_default_instance();
}


void FileUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:WISE.Comms.ServerProto.FileUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upload_type_.Clear();
  job_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&filetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&filetype_)) + sizeof(exists_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.FileUpload.job"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.FileUpload.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .WISE.Comms.ServerProto.FileUpload.UploadType upload_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upload_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .WISE.Comms.ServerProto.FileUpload.FileType filetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filetype(static_cast<::WISE::Comms::ServerProto::FileUpload_FileType>(val));
        } else goto handle_unusual;
        continue;
      // bool exists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileUpload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WISE.Comms.ServerProto.FileUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job = 1;
  if (this->job().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job().data(), static_cast<int>(this->_internal_job().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.FileUpload.job");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.FileUpload.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // repeated .WISE.Comms.ServerProto.FileUpload.UploadType upload_type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upload_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_upload_type(i), target, stream);
  }

  // .WISE.Comms.ServerProto.FileUpload.FileType filetype = 4;
  if (this->filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_filetype(), target);
  }

  // bool exists = 5;
  if (this->exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WISE.Comms.ServerProto.FileUpload)
  return target;
}

size_t FileUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WISE.Comms.ServerProto.FileUpload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .WISE.Comms.ServerProto.FileUpload.UploadType upload_type = 3;
  total_size += 1UL * this->_internal_upload_type_size();
  for (const auto& msg : this->upload_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job = 1;
  if (this->job().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job());
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .WISE.Comms.ServerProto.FileUpload.FileType filetype = 4;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filetype());
  }

  // bool exists = 5;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileUpload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WISE.Comms.ServerProto.FileUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const FileUpload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WISE.Comms.ServerProto.FileUpload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WISE.Comms.ServerProto.FileUpload)
    MergeFrom(*source);
  }
}

void FileUpload::MergeFrom(const FileUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WISE.Comms.ServerProto.FileUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  upload_type_.MergeFrom(from.upload_type_);
  if (from.job().size() > 0) {
    _internal_set_job(from._internal_job());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.filetype() != 0) {
    _internal_set_filetype(from._internal_filetype());
  }
  if (from.exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
}

void FileUpload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WISE.Comms.ServerProto.FileUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileUpload::CopyFrom(const FileUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WISE.Comms.ServerProto.FileUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileUpload::IsInitialized() const {
  return true;
}

void FileUpload::InternalSwap(FileUpload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  upload_type_.InternalSwap(&other->upload_type_);
  job_.Swap(&other->job_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileUpload, exists_)
      + sizeof(FileUpload::exists_)
      - PROTOBUF_FIELD_OFFSET(FileUpload, filetype_)>(
          reinterpret_cast<char*>(&filetype_),
          reinterpret_cast<char*>(&other->filetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileUpload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MQTTUpload::InitAsDefaultInstance() {
}
class MQTTUpload::_Internal {
 public:
};

MQTTUpload::MQTTUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WISE.Comms.ServerProto.MQTTUpload)
}
MQTTUpload::MQTTUpload(const MQTTUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:WISE.Comms.ServerProto.MQTTUpload)
}

void MQTTUpload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MQTTUpload_file_5fupload_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MQTTUpload::~MQTTUpload() {
  // @@protoc_insertion_point(destructor:WISE.Comms.ServerProto.MQTTUpload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MQTTUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MQTTUpload::ArenaDtor(void* object) {
  MQTTUpload* _this = reinterpret_cast< MQTTUpload* >(object);
  (void)_this;
}
void MQTTUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MQTTUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MQTTUpload& MQTTUpload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MQTTUpload_file_5fupload_2eproto.base);
  return *internal_default_instance();
}


void MQTTUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:WISE.Comms.ServerProto.MQTTUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MQTTUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.MQTTUpload.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.MQTTUpload.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MQTTUpload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WISE.Comms.ServerProto.MQTTUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.MQTTUpload.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.MQTTUpload.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WISE.Comms.ServerProto.MQTTUpload)
  return target;
}

size_t MQTTUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WISE.Comms.ServerProto.MQTTUpload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MQTTUpload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WISE.Comms.ServerProto.MQTTUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const MQTTUpload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MQTTUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WISE.Comms.ServerProto.MQTTUpload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WISE.Comms.ServerProto.MQTTUpload)
    MergeFrom(*source);
  }
}

void MQTTUpload::MergeFrom(const MQTTUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WISE.Comms.ServerProto.MQTTUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
}

void MQTTUpload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WISE.Comms.ServerProto.MQTTUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQTTUpload::CopyFrom(const MQTTUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WISE.Comms.ServerProto.MQTTUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQTTUpload::IsInitialized() const {
  return true;
}

void MQTTUpload::InternalSwap(MQTTUpload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MQTTUpload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoserverUpload::InitAsDefaultInstance() {
  ::WISE::Comms::ServerProto::_GeoserverUpload_default_instance_._instance.get_mutable()->vector_coverage_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::WISE::Comms::ServerProto::_GeoserverUpload_default_instance_._instance.get_mutable()->raster_coverage_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
}
class GeoserverUpload::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& vector_coverage(const GeoserverUpload* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& raster_coverage(const GeoserverUpload* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
GeoserverUpload::_Internal::vector_coverage(const GeoserverUpload* msg) {
  return *msg->vector_coverage_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
GeoserverUpload::_Internal::raster_coverage(const GeoserverUpload* msg) {
  return *msg->raster_coverage_;
}
void GeoserverUpload::clear_vector_coverage() {
  if (GetArena() == nullptr && vector_coverage_ != nullptr) {
    delete vector_coverage_;
  }
  vector_coverage_ = nullptr;
}
void GeoserverUpload::clear_raster_coverage() {
  if (GetArena() == nullptr && raster_coverage_ != nullptr) {
    delete raster_coverage_;
  }
  raster_coverage_ = nullptr;
}
GeoserverUpload::GeoserverUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:WISE.Comms.ServerProto.GeoserverUpload)
}
GeoserverUpload::GeoserverUpload(const GeoserverUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workspace().empty()) {
    workspace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_workspace(),
      GetArena());
  }
  coverage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coverage().empty()) {
    coverage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coverage(),
      GetArena());
  }
  srs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srs().empty()) {
    srs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srs(),
      GetArena());
  }
  if (from._internal_has_vector_coverage()) {
    vector_coverage_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.vector_coverage_);
  } else {
    vector_coverage_ = nullptr;
  }
  if (from._internal_has_raster_coverage()) {
    raster_coverage_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.raster_coverage_);
  } else {
    raster_coverage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:WISE.Comms.ServerProto.GeoserverUpload)
}

void GeoserverUpload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoserverUpload_file_5fupload_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coverage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vector_coverage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raster_coverage_) -
      reinterpret_cast<char*>(&vector_coverage_)) + sizeof(raster_coverage_));
}

GeoserverUpload::~GeoserverUpload() {
  // @@protoc_insertion_point(destructor:WISE.Comms.ServerProto.GeoserverUpload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoserverUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workspace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coverage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vector_coverage_;
  if (this != internal_default_instance()) delete raster_coverage_;
}

void GeoserverUpload::ArenaDtor(void* object) {
  GeoserverUpload* _this = reinterpret_cast< GeoserverUpload* >(object);
  (void)_this;
}
void GeoserverUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoserverUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoserverUpload& GeoserverUpload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoserverUpload_file_5fupload_2eproto.base);
  return *internal_default_instance();
}


void GeoserverUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:WISE.Comms.ServerProto.GeoserverUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workspace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coverage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && vector_coverage_ != nullptr) {
    delete vector_coverage_;
  }
  vector_coverage_ = nullptr;
  if (GetArena() == nullptr && raster_coverage_ != nullptr) {
    delete raster_coverage_;
  }
  raster_coverage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoserverUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workspace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_workspace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.workspace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coverage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_coverage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.coverage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string srs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_srs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WISE.Comms.ServerProto.GeoserverUpload.srs"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue vector_coverage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue raster_coverage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raster_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoserverUpload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WISE.Comms.ServerProto.GeoserverUpload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string workspace = 4;
  if (this->workspace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace().data(), static_cast<int>(this->_internal_workspace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.workspace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_workspace(), target);
  }

  // string coverage = 5;
  if (this->coverage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coverage().data(), static_cast<int>(this->_internal_coverage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.coverage");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_coverage(), target);
  }

  // string srs = 6;
  if (this->srs().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srs().data(), static_cast<int>(this->_internal_srs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WISE.Comms.ServerProto.GeoserverUpload.srs");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_srs(), target);
  }

  // .google.protobuf.StringValue vector_coverage = 7;
  if (this->has_vector_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vector_coverage(this), target, stream);
  }

  // .google.protobuf.StringValue raster_coverage = 8;
  if (this->has_raster_coverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::raster_coverage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WISE.Comms.ServerProto.GeoserverUpload)
  return target;
}

size_t GeoserverUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WISE.Comms.ServerProto.GeoserverUpload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string workspace = 4;
  if (this->workspace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace());
  }

  // string coverage = 5;
  if (this->coverage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coverage());
  }

  // string srs = 6;
  if (this->srs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srs());
  }

  // .google.protobuf.StringValue vector_coverage = 7;
  if (this->has_vector_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_coverage_);
  }

  // .google.protobuf.StringValue raster_coverage = 8;
  if (this->has_raster_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raster_coverage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoserverUpload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WISE.Comms.ServerProto.GeoserverUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoserverUpload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoserverUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WISE.Comms.ServerProto.GeoserverUpload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WISE.Comms.ServerProto.GeoserverUpload)
    MergeFrom(*source);
  }
}

void GeoserverUpload::MergeFrom(const GeoserverUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WISE.Comms.ServerProto.GeoserverUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.workspace().size() > 0) {
    _internal_set_workspace(from._internal_workspace());
  }
  if (from.coverage().size() > 0) {
    _internal_set_coverage(from._internal_coverage());
  }
  if (from.srs().size() > 0) {
    _internal_set_srs(from._internal_srs());
  }
  if (from.has_vector_coverage()) {
    _internal_mutable_vector_coverage()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_vector_coverage());
  }
  if (from.has_raster_coverage()) {
    _internal_mutable_raster_coverage()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_raster_coverage());
  }
}

void GeoserverUpload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WISE.Comms.ServerProto.GeoserverUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoserverUpload::CopyFrom(const GeoserverUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WISE.Comms.ServerProto.GeoserverUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoserverUpload::IsInitialized() const {
  return true;
}

void GeoserverUpload::InternalSwap(GeoserverUpload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  workspace_.Swap(&other->workspace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coverage_.Swap(&other->coverage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srs_.Swap(&other->srs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoserverUpload, raster_coverage_)
      + sizeof(GeoserverUpload::raster_coverage_)
      - PROTOBUF_FIELD_OFFSET(GeoserverUpload, vector_coverage_)>(
          reinterpret_cast<char*>(&vector_coverage_),
          reinterpret_cast<char*>(&other->vector_coverage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoserverUpload::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerProto
}  // namespace Comms
}  // namespace WISE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WISE::Comms::ServerProto::FileUpload_UploadType* Arena::CreateMaybeMessage< ::WISE::Comms::ServerProto::FileUpload_UploadType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WISE::Comms::ServerProto::FileUpload_UploadType >(arena);
}
template<> PROTOBUF_NOINLINE ::WISE::Comms::ServerProto::FileUpload* Arena::CreateMaybeMessage< ::WISE::Comms::ServerProto::FileUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WISE::Comms::ServerProto::FileUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::WISE::Comms::ServerProto::MQTTUpload* Arena::CreateMaybeMessage< ::WISE::Comms::ServerProto::MQTTUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WISE::Comms::ServerProto::MQTTUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::WISE::Comms::ServerProto::GeoserverUpload* Arena::CreateMaybeMessage< ::WISE::Comms::ServerProto::GeoserverUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WISE::Comms::ServerProto::GeoserverUpload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
