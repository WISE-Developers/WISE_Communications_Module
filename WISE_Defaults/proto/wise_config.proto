syntax = "proto3";

option java_package = "ca.wise.config.proto";
option java_multiple_files = true;
option csharp_namespace = "WISE_API.NET.Proto";

import "google/protobuf/wrappers.proto";

package wise.confic;

/**
 * General server configuration details.
 */
message ServerConfiguration {
    //Log output from W.I.S.E. to a file
    LogFile log = 1;

    //Files to signal job start and finish
    Signals signals = 2;

    //Hardware execution limits
    Hardware hardware = 3;

    oneof commsType {
        //Communication between Builder and Manager will take place over a dedicated socket
        SocketConnection socket = 4;
        //Communication between all applications will take place over MQTT
        MqttConnection mqtt = 5;
    }

    //Settings the API will use to connect to Builder
    BuilderConnection builder = 6;

    //The directory where sample data is stored for testing purposes
    string exampleDirectory = 7;

    //Settings that are only used by W.I.S.E. Manager
    ManagerSettings manager_settings = 8;

    //Are the W.I.S.E. Manager settings already setup for v2
    google.protobuf.BoolValue already_v2 = 9;

    /**
     * Settings detailing log output from W.I.S.E..
     */
    message LogFile {
        //The name of the file to log to
        string filename = 1;

        //The level of information to write to the log
        Verbosity verbosity = 2;
    }

    /**
     * Signal files that indicate that a job has started
     * or finished. Can be used by processes that implement
     * file system watchers to determine when a job has
     * started and finished.
     */
    message Signals {
        //The name of a file to write when the job starts
        string start = 1;

        //The name of a file to write when the job finishes
        string complete = 2;
    }

    /**
     * Default job execution limits so that it may
     * share hardware with other jobs or other services.
     */
    message Hardware {
        //The maximum number of processes that W.I.S.E. can start to run a job
        int32 processes = 1;

        //The maximum number of cores that W.I.S.E. should run on if processor affinity is enabled
        int32 cores = 2;
    }

    /**
     * Details for connecting W.I.S.E. Builder to W.I.S.E. Manager using a direct
     * socket connection.
     */
    message SocketConnection {
        //The IP address or domain name used by the machine running W.I.S.E. Manager
        string address = 1;

        //The port number used to connect to W.I.S.E. Manager
        int32 port = 2;
    }

    /**
     * Details for connecting to an MQTT broker. Can be used by W.I.S.E. for communicating
     * status messages, Builder and Manager for sharing files and starting jobs, and the
     * API for listening for job updates.
     */
    message MqttConnection {
        //The IP address or hostname of the MQTT broker
        string hostname = 1;

        //The port that MQTT is running on
        int32 port = 2;

        //The base text to be used as a topic for communicating over MQTT.
        //Allows other services or multiple, independent W.I.S.E. instances to be
        //run on the same broker without collisions. Must not include '/'.
        string topic = 3;

        //The verbosity of log messages to output
        Verbosity verbosity = 4;

        //The quality of service to send message at. Should be 0-2
        int32 qos = 5;

        //An optional username required to authenticate with the MQTT broker
        string username = 6;

        //An optional password required to authenticate with the MQTT broker
        string password = 7;
    }

    /**
     * Details for how the API will connect to their related instance
     * of Builder.
     */
    message BuilderConnection {
        //The hostname of the machine the Builder is running on
        string hostname = 1;

        //The port that Builder is listening on
        int32 port = 2;

        //The outoutp file format that will be generated by Builder
        OutputType format = 3;
    }

    /**
     * W.I.S.E. Manager specific settings.
     */
    message ManagerSettings {
        //The maximum number of concurrent jobs
        int32 max_concurrent = 1;

        //Restart old processes when Manager starts
        bool restart_old = 2;

        //The path to the W.I.S.E. executable
        string wise_location = 3;
    
        //Lock manager to core 0 and W.I.S.E. to other cores
        bool lock_cpu = 4;
    
        //Pause the job queue when Manager starts
        bool start_paused = 5;

        //W.I.S.E. Builder specific settings
        BuilderConfiguration internal_builder = 6;

        //MQTT settings that are specific to W.I.S.E. Manager
        MqttSettings mqtt_settings = 7;

        //Should W.I.S.E. instances be locked to single NUMA nodes
        google.protobuf.BoolValue numa_lock = 8;
    
        //A number of cores to leave idle when running W.I.S.E. instances. Defaults to 0.
        google.protobuf.Int32Value skip_cores = 9;

        //Settings for RPC connections, used to instantiate the connection
        RpcConfiguration rpc_settings = 10;

        //Should W.I.S.E. Manager respect the global Prometheus CPU configuration
        google.protobuf.BoolValue respect_shmem = 11;

        //Should W.I.S.E. Manager show status messages from W.I.S.E.
        google.protobuf.BoolValue display_status = 12;

        //Should W.I.S.E. Manager listen for load balance requests from other machines
        google.protobuf.BoolValue listen_balance = 13;

        //The denominator of the faction of the threads available to a group that should be used for export. Defaults to 1.
        google.protobuf.Int32Value export_thread_fraction = 14;

        /**
         * Settings that dictate how W.I.S.E. Builder is
         * started if using Manager to run Builder.
         */
        message BuilderConfiguration {
            //The path to the Builder jar file
            string builder_location = 1;
    
            //The log level for Builder to output at
            string log_level = 2;
    
            //Start Builder when Manager starts
            bool start_with_manager = 3;
    
            //Should Builder write all input files to a single job file
            bool output_single_file = 4;
        }

        message MqttSettings {
            //The maximum buffer size to use for a single MQTT payload
            int32 max_buffer_size = 1;

            //An optional MQTT ID if you don't want one to be automatically generated
            google.protobuf.StringValue mqtt_id = 2;

            //Use the internal MQTT broker instead of connecting to an external one
            google.protobuf.BoolValue use_internal_broker = 3;

            //When using the internal broker require username/password authentication
            google.protobuf.BoolValue use_internal_authentication = 4;

            //Web host information that can be used to download FGMs from a website
            repeated MqttWebHost web_hosts = 5;

            //settings for downloading FGMs from a web host
            message MqttWebHost {

                //The hostname of the web host that these settings will apply to
                string hostname = 1;

                //The type of authentication to use
                AuthType auth_type = 2;

                //An optional username to authenticate on the web host with
                google.protobuf.StringValue username = 3;

                //An optional password to authenticate on the web host with
                google.protobuf.StringValue password = 4;

                //An optional auth token to use on the web host
                google.protobuf.StringValue access_token = 5;

                //The URL that will be called to authenticate using the provided username and password
                google.protobuf.StringValue auth_endpoint = 6;

                enum AuthType {
                    NONE = 0;
                    TOKEN = 1;
                }
            }
        }
    }

    /**
     * RPC server/client configuration options.
     */
    message RpcConfiguration {
        //Is the RPC server enabled
        bool enabled = 1;

        //The address that Builder will use to connect to the RPC server that Manager is running
        string externalAddress = 2;

        //The port that the RPC server will be running on
        int32 port = 3;

        //An optional internal address to use to connect to the RPC server that Manager is running
        google.protobuf.StringValue internal_address = 4;

        //A different port for the external connection to advertise, so the external connection can be port
        //forwarded to a different port
        google.protobuf.Int32Value external_port = 5;

        //A different port for the internal connection to advertise, so the internal connection can be port
        //forwarded to a different port
        google.protobuf.Int32Value internal_port = 6;
    }

    /**
     * The output verbosity. Each level includes the outputs
     * from the level before it.
     */
    enum Verbosity {
        //No output
        NONE = 0;
        //only output complete application failures
        SEVERE = 1;
        //output load warnings
        WARN = 2;
        //output job status messages
        INFO = 3;
        //output all information
        MAX = 4;
    }

    /**
     * The type of output file that will be generated by Builder.
     */
    enum OutputType {
        //Pretty printed JSON
        JSON = 0;
        //Minimized JSON
        JSON_MINIMAL = 1;
        //Binary
        BINARY = 2;
        //XML. Only supported on Windows
        XML = 3;
        //Pretty printed JSON with the v2 schema
        JSON_V2 = 4;
        //Minimized JSON with the v2 schema
        JSON_MINIMAL_V2 = 5;
        //Binary with the v2 schema
        BINARY_V2 = 6;
    }
}
