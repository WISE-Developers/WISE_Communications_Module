// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wise_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wise_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wise_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wise_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wise_5fconfig_2eproto;
namespace wise {
namespace confic {
class ServerConfiguration;
class ServerConfigurationDefaultTypeInternal;
extern ServerConfigurationDefaultTypeInternal _ServerConfiguration_default_instance_;
class ServerConfiguration_BuilderConnection;
class ServerConfiguration_BuilderConnectionDefaultTypeInternal;
extern ServerConfiguration_BuilderConnectionDefaultTypeInternal _ServerConfiguration_BuilderConnection_default_instance_;
class ServerConfiguration_Hardware;
class ServerConfiguration_HardwareDefaultTypeInternal;
extern ServerConfiguration_HardwareDefaultTypeInternal _ServerConfiguration_Hardware_default_instance_;
class ServerConfiguration_LogFile;
class ServerConfiguration_LogFileDefaultTypeInternal;
extern ServerConfiguration_LogFileDefaultTypeInternal _ServerConfiguration_LogFile_default_instance_;
class ServerConfiguration_ManagerSettings;
class ServerConfiguration_ManagerSettingsDefaultTypeInternal;
extern ServerConfiguration_ManagerSettingsDefaultTypeInternal _ServerConfiguration_ManagerSettings_default_instance_;
class ServerConfiguration_ManagerSettings_BuilderConfiguration;
class ServerConfiguration_ManagerSettings_BuilderConfigurationDefaultTypeInternal;
extern ServerConfiguration_ManagerSettings_BuilderConfigurationDefaultTypeInternal _ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_;
class ServerConfiguration_ManagerSettings_MqttSettings;
class ServerConfiguration_ManagerSettings_MqttSettingsDefaultTypeInternal;
extern ServerConfiguration_ManagerSettings_MqttSettingsDefaultTypeInternal _ServerConfiguration_ManagerSettings_MqttSettings_default_instance_;
class ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost;
class ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHostDefaultTypeInternal;
extern ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHostDefaultTypeInternal _ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_;
class ServerConfiguration_MqttConnection;
class ServerConfiguration_MqttConnectionDefaultTypeInternal;
extern ServerConfiguration_MqttConnectionDefaultTypeInternal _ServerConfiguration_MqttConnection_default_instance_;
class ServerConfiguration_RpcConfiguration;
class ServerConfiguration_RpcConfigurationDefaultTypeInternal;
extern ServerConfiguration_RpcConfigurationDefaultTypeInternal _ServerConfiguration_RpcConfiguration_default_instance_;
class ServerConfiguration_Signals;
class ServerConfiguration_SignalsDefaultTypeInternal;
extern ServerConfiguration_SignalsDefaultTypeInternal _ServerConfiguration_Signals_default_instance_;
class ServerConfiguration_SocketConnection;
class ServerConfiguration_SocketConnectionDefaultTypeInternal;
extern ServerConfiguration_SocketConnectionDefaultTypeInternal _ServerConfiguration_SocketConnection_default_instance_;
}  // namespace confic
}  // namespace wise
PROTOBUF_NAMESPACE_OPEN
template<> ::wise::confic::ServerConfiguration* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration>(Arena*);
template<> ::wise::confic::ServerConfiguration_BuilderConnection* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_BuilderConnection>(Arena*);
template<> ::wise::confic::ServerConfiguration_Hardware* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_Hardware>(Arena*);
template<> ::wise::confic::ServerConfiguration_LogFile* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_LogFile>(Arena*);
template<> ::wise::confic::ServerConfiguration_ManagerSettings* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings>(Arena*);
template<> ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration>(Arena*);
template<> ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings>(Arena*);
template<> ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost>(Arena*);
template<> ::wise::confic::ServerConfiguration_MqttConnection* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_MqttConnection>(Arena*);
template<> ::wise::confic::ServerConfiguration_RpcConfiguration* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_RpcConfiguration>(Arena*);
template<> ::wise::confic::ServerConfiguration_Signals* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_Signals>(Arena*);
template<> ::wise::confic::ServerConfiguration_SocketConnection* Arena::CreateMaybeMessage<::wise::confic::ServerConfiguration_SocketConnection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wise {
namespace confic {

enum ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType : int {
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_NONE = 0,
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_TOKEN = 1,
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_IsValid(int value);
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_MIN = ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_NONE;
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_MAX = ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_TOKEN;
constexpr int ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_ARRAYSIZE = ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor();
template<typename T>
inline const std::string& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor(), enum_t_value);
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType>(
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor(), name, value);
}
enum ServerConfiguration_Verbosity : int {
  ServerConfiguration_Verbosity_NONE = 0,
  ServerConfiguration_Verbosity_SEVERE = 1,
  ServerConfiguration_Verbosity_WARN = 2,
  ServerConfiguration_Verbosity_INFO = 3,
  ServerConfiguration_Verbosity_MAX = 4,
  ServerConfiguration_Verbosity_ServerConfiguration_Verbosity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerConfiguration_Verbosity_ServerConfiguration_Verbosity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerConfiguration_Verbosity_IsValid(int value);
constexpr ServerConfiguration_Verbosity ServerConfiguration_Verbosity_Verbosity_MIN = ServerConfiguration_Verbosity_NONE;
constexpr ServerConfiguration_Verbosity ServerConfiguration_Verbosity_Verbosity_MAX = ServerConfiguration_Verbosity_MAX;
constexpr int ServerConfiguration_Verbosity_Verbosity_ARRAYSIZE = ServerConfiguration_Verbosity_Verbosity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_Verbosity_descriptor();
template<typename T>
inline const std::string& ServerConfiguration_Verbosity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerConfiguration_Verbosity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerConfiguration_Verbosity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerConfiguration_Verbosity_descriptor(), enum_t_value);
}
inline bool ServerConfiguration_Verbosity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerConfiguration_Verbosity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerConfiguration_Verbosity>(
    ServerConfiguration_Verbosity_descriptor(), name, value);
}
enum ServerConfiguration_OutputType : int {
  ServerConfiguration_OutputType_JSON = 0,
  ServerConfiguration_OutputType_JSON_MINIMAL = 1,
  ServerConfiguration_OutputType_BINARY = 2,
  ServerConfiguration_OutputType_XML = 3,
  ServerConfiguration_OutputType_JSON_V2 = 4,
  ServerConfiguration_OutputType_JSON_MINIMAL_V2 = 5,
  ServerConfiguration_OutputType_BINARY_V2 = 6,
  ServerConfiguration_OutputType_ServerConfiguration_OutputType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerConfiguration_OutputType_ServerConfiguration_OutputType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerConfiguration_OutputType_IsValid(int value);
constexpr ServerConfiguration_OutputType ServerConfiguration_OutputType_OutputType_MIN = ServerConfiguration_OutputType_JSON;
constexpr ServerConfiguration_OutputType ServerConfiguration_OutputType_OutputType_MAX = ServerConfiguration_OutputType_BINARY_V2;
constexpr int ServerConfiguration_OutputType_OutputType_ARRAYSIZE = ServerConfiguration_OutputType_OutputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_OutputType_descriptor();
template<typename T>
inline const std::string& ServerConfiguration_OutputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerConfiguration_OutputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerConfiguration_OutputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerConfiguration_OutputType_descriptor(), enum_t_value);
}
inline bool ServerConfiguration_OutputType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerConfiguration_OutputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerConfiguration_OutputType>(
    ServerConfiguration_OutputType_descriptor(), name, value);
}
// ===================================================================

class ServerConfiguration_LogFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.LogFile) */ {
 public:
  inline ServerConfiguration_LogFile() : ServerConfiguration_LogFile(nullptr) {}
  virtual ~ServerConfiguration_LogFile();

  ServerConfiguration_LogFile(const ServerConfiguration_LogFile& from);
  ServerConfiguration_LogFile(ServerConfiguration_LogFile&& from) noexcept
    : ServerConfiguration_LogFile() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_LogFile& operator=(const ServerConfiguration_LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_LogFile& operator=(ServerConfiguration_LogFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_LogFile* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_LogFile*>(
               &_ServerConfiguration_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerConfiguration_LogFile& a, ServerConfiguration_LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_LogFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_LogFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_LogFile* New() const final {
    return CreateMaybeMessage<ServerConfiguration_LogFile>(nullptr);
  }

  ServerConfiguration_LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_LogFile& from);
  void MergeFrom(const ServerConfiguration_LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.LogFile";
  }
  protected:
  explicit ServerConfiguration_LogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kVerbosityFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 2;
  void clear_verbosity();
  ::wise::confic::ServerConfiguration_Verbosity verbosity() const;
  void set_verbosity(::wise::confic::ServerConfiguration_Verbosity value);
  private:
  ::wise::confic::ServerConfiguration_Verbosity _internal_verbosity() const;
  void _internal_set_verbosity(::wise::confic::ServerConfiguration_Verbosity value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.LogFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int verbosity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_Signals PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.Signals) */ {
 public:
  inline ServerConfiguration_Signals() : ServerConfiguration_Signals(nullptr) {}
  virtual ~ServerConfiguration_Signals();

  ServerConfiguration_Signals(const ServerConfiguration_Signals& from);
  ServerConfiguration_Signals(ServerConfiguration_Signals&& from) noexcept
    : ServerConfiguration_Signals() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_Signals& operator=(const ServerConfiguration_Signals& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_Signals& operator=(ServerConfiguration_Signals&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_Signals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_Signals* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_Signals*>(
               &_ServerConfiguration_Signals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerConfiguration_Signals& a, ServerConfiguration_Signals& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_Signals* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_Signals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_Signals* New() const final {
    return CreateMaybeMessage<ServerConfiguration_Signals>(nullptr);
  }

  ServerConfiguration_Signals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_Signals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_Signals& from);
  void MergeFrom(const ServerConfiguration_Signals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_Signals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.Signals";
  }
  protected:
  explicit ServerConfiguration_Signals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kCompleteFieldNumber = 2,
  };
  // string start = 1;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string complete = 2;
  void clear_complete();
  const std::string& complete() const;
  void set_complete(const std::string& value);
  void set_complete(std::string&& value);
  void set_complete(const char* value);
  void set_complete(const char* value, size_t size);
  std::string* mutable_complete();
  std::string* release_complete();
  void set_allocated_complete(std::string* complete);
  private:
  const std::string& _internal_complete() const;
  void _internal_set_complete(const std::string& value);
  std::string* _internal_mutable_complete();
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.Signals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_Hardware PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.Hardware) */ {
 public:
  inline ServerConfiguration_Hardware() : ServerConfiguration_Hardware(nullptr) {}
  virtual ~ServerConfiguration_Hardware();

  ServerConfiguration_Hardware(const ServerConfiguration_Hardware& from);
  ServerConfiguration_Hardware(ServerConfiguration_Hardware&& from) noexcept
    : ServerConfiguration_Hardware() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_Hardware& operator=(const ServerConfiguration_Hardware& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_Hardware& operator=(ServerConfiguration_Hardware&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_Hardware& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_Hardware* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_Hardware*>(
               &_ServerConfiguration_Hardware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerConfiguration_Hardware& a, ServerConfiguration_Hardware& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_Hardware* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_Hardware* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_Hardware* New() const final {
    return CreateMaybeMessage<ServerConfiguration_Hardware>(nullptr);
  }

  ServerConfiguration_Hardware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_Hardware>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_Hardware& from);
  void MergeFrom(const ServerConfiguration_Hardware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_Hardware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.Hardware";
  }
  protected:
  explicit ServerConfiguration_Hardware(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
    kCoresFieldNumber = 2,
  };
  // int32 processes = 1;
  void clear_processes();
  ::PROTOBUF_NAMESPACE_ID::int32 processes() const;
  void set_processes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processes() const;
  void _internal_set_processes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cores = 2;
  void clear_cores();
  ::PROTOBUF_NAMESPACE_ID::int32 cores() const;
  void set_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cores() const;
  void _internal_set_cores(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.Hardware)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 processes_;
  ::PROTOBUF_NAMESPACE_ID::int32 cores_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_SocketConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.SocketConnection) */ {
 public:
  inline ServerConfiguration_SocketConnection() : ServerConfiguration_SocketConnection(nullptr) {}
  virtual ~ServerConfiguration_SocketConnection();

  ServerConfiguration_SocketConnection(const ServerConfiguration_SocketConnection& from);
  ServerConfiguration_SocketConnection(ServerConfiguration_SocketConnection&& from) noexcept
    : ServerConfiguration_SocketConnection() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_SocketConnection& operator=(const ServerConfiguration_SocketConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_SocketConnection& operator=(ServerConfiguration_SocketConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_SocketConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_SocketConnection* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_SocketConnection*>(
               &_ServerConfiguration_SocketConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerConfiguration_SocketConnection& a, ServerConfiguration_SocketConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_SocketConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_SocketConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_SocketConnection* New() const final {
    return CreateMaybeMessage<ServerConfiguration_SocketConnection>(nullptr);
  }

  ServerConfiguration_SocketConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_SocketConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_SocketConnection& from);
  void MergeFrom(const ServerConfiguration_SocketConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_SocketConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.SocketConnection";
  }
  protected:
  explicit ServerConfiguration_SocketConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.SocketConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_MqttConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.MqttConnection) */ {
 public:
  inline ServerConfiguration_MqttConnection() : ServerConfiguration_MqttConnection(nullptr) {}
  virtual ~ServerConfiguration_MqttConnection();

  ServerConfiguration_MqttConnection(const ServerConfiguration_MqttConnection& from);
  ServerConfiguration_MqttConnection(ServerConfiguration_MqttConnection&& from) noexcept
    : ServerConfiguration_MqttConnection() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_MqttConnection& operator=(const ServerConfiguration_MqttConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_MqttConnection& operator=(ServerConfiguration_MqttConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_MqttConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_MqttConnection* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_MqttConnection*>(
               &_ServerConfiguration_MqttConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerConfiguration_MqttConnection& a, ServerConfiguration_MqttConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_MqttConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_MqttConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_MqttConnection* New() const final {
    return CreateMaybeMessage<ServerConfiguration_MqttConnection>(nullptr);
  }

  ServerConfiguration_MqttConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_MqttConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_MqttConnection& from);
  void MergeFrom(const ServerConfiguration_MqttConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_MqttConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.MqttConnection";
  }
  protected:
  explicit ServerConfiguration_MqttConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kTopicFieldNumber = 3,
    kUsernameFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kPortFieldNumber = 2,
    kVerbosityFieldNumber = 4,
    kQosFieldNumber = 5,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string topic = 3;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string username = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 4;
  void clear_verbosity();
  ::wise::confic::ServerConfiguration_Verbosity verbosity() const;
  void set_verbosity(::wise::confic::ServerConfiguration_Verbosity value);
  private:
  ::wise::confic::ServerConfiguration_Verbosity _internal_verbosity() const;
  void _internal_set_verbosity(::wise::confic::ServerConfiguration_Verbosity value);
  public:

  // int32 qos = 5;
  void clear_qos();
  ::PROTOBUF_NAMESPACE_ID::int32 qos() const;
  void set_qos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_qos() const;
  void _internal_set_qos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.MqttConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int verbosity_;
  ::PROTOBUF_NAMESPACE_ID::int32 qos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_BuilderConnection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.BuilderConnection) */ {
 public:
  inline ServerConfiguration_BuilderConnection() : ServerConfiguration_BuilderConnection(nullptr) {}
  virtual ~ServerConfiguration_BuilderConnection();

  ServerConfiguration_BuilderConnection(const ServerConfiguration_BuilderConnection& from);
  ServerConfiguration_BuilderConnection(ServerConfiguration_BuilderConnection&& from) noexcept
    : ServerConfiguration_BuilderConnection() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_BuilderConnection& operator=(const ServerConfiguration_BuilderConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_BuilderConnection& operator=(ServerConfiguration_BuilderConnection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_BuilderConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_BuilderConnection* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_BuilderConnection*>(
               &_ServerConfiguration_BuilderConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerConfiguration_BuilderConnection& a, ServerConfiguration_BuilderConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_BuilderConnection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_BuilderConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_BuilderConnection* New() const final {
    return CreateMaybeMessage<ServerConfiguration_BuilderConnection>(nullptr);
  }

  ServerConfiguration_BuilderConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_BuilderConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_BuilderConnection& from);
  void MergeFrom(const ServerConfiguration_BuilderConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_BuilderConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.BuilderConnection";
  }
  protected:
  explicit ServerConfiguration_BuilderConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kPortFieldNumber = 2,
    kFormatFieldNumber = 3,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .wise.confic.ServerConfiguration.OutputType format = 3;
  void clear_format();
  ::wise::confic::ServerConfiguration_OutputType format() const;
  void set_format(::wise::confic::ServerConfiguration_OutputType value);
  private:
  ::wise::confic::ServerConfiguration_OutputType _internal_format() const;
  void _internal_set_format(::wise::confic::ServerConfiguration_OutputType value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.BuilderConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_ManagerSettings_BuilderConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration) */ {
 public:
  inline ServerConfiguration_ManagerSettings_BuilderConfiguration() : ServerConfiguration_ManagerSettings_BuilderConfiguration(nullptr) {}
  virtual ~ServerConfiguration_ManagerSettings_BuilderConfiguration();

  ServerConfiguration_ManagerSettings_BuilderConfiguration(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from);
  ServerConfiguration_ManagerSettings_BuilderConfiguration(ServerConfiguration_ManagerSettings_BuilderConfiguration&& from) noexcept
    : ServerConfiguration_ManagerSettings_BuilderConfiguration() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_ManagerSettings_BuilderConfiguration& operator=(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_ManagerSettings_BuilderConfiguration& operator=(ServerConfiguration_ManagerSettings_BuilderConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_ManagerSettings_BuilderConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_ManagerSettings_BuilderConfiguration*>(
               &_ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerConfiguration_ManagerSettings_BuilderConfiguration& a, ServerConfiguration_ManagerSettings_BuilderConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_ManagerSettings_BuilderConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_ManagerSettings_BuilderConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_ManagerSettings_BuilderConfiguration* New() const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_BuilderConfiguration>(nullptr);
  }

  ServerConfiguration_ManagerSettings_BuilderConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_BuilderConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from);
  void MergeFrom(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_ManagerSettings_BuilderConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration";
  }
  protected:
  explicit ServerConfiguration_ManagerSettings_BuilderConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuilderLocationFieldNumber = 1,
    kLogLevelFieldNumber = 2,
    kStartWithManagerFieldNumber = 3,
    kOutputSingleFileFieldNumber = 4,
  };
  // string builder_location = 1;
  void clear_builder_location();
  const std::string& builder_location() const;
  void set_builder_location(const std::string& value);
  void set_builder_location(std::string&& value);
  void set_builder_location(const char* value);
  void set_builder_location(const char* value, size_t size);
  std::string* mutable_builder_location();
  std::string* release_builder_location();
  void set_allocated_builder_location(std::string* builder_location);
  private:
  const std::string& _internal_builder_location() const;
  void _internal_set_builder_location(const std::string& value);
  std::string* _internal_mutable_builder_location();
  public:

  // string log_level = 2;
  void clear_log_level();
  const std::string& log_level() const;
  void set_log_level(const std::string& value);
  void set_log_level(std::string&& value);
  void set_log_level(const char* value);
  void set_log_level(const char* value, size_t size);
  std::string* mutable_log_level();
  std::string* release_log_level();
  void set_allocated_log_level(std::string* log_level);
  private:
  const std::string& _internal_log_level() const;
  void _internal_set_log_level(const std::string& value);
  std::string* _internal_mutable_log_level();
  public:

  // bool start_with_manager = 3;
  void clear_start_with_manager();
  bool start_with_manager() const;
  void set_start_with_manager(bool value);
  private:
  bool _internal_start_with_manager() const;
  void _internal_set_start_with_manager(bool value);
  public:

  // bool output_single_file = 4;
  void clear_output_single_file();
  bool output_single_file() const;
  void set_output_single_file(bool value);
  private:
  bool _internal_output_single_file() const;
  void _internal_set_output_single_file(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr builder_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_level_;
  bool start_with_manager_;
  bool output_single_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost) */ {
 public:
  inline ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost() : ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(nullptr) {}
  virtual ~ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost();

  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from);
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost&& from) noexcept
    : ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& operator=(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& operator=(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost*>(
               &_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& a, ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* New() const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost>(nullptr);
  }

  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from);
  void MergeFrom(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost";
  }
  protected:
  explicit ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType AuthType;
  static constexpr AuthType NONE =
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_NONE;
  static constexpr AuthType TOKEN =
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_TOKEN;
  static inline bool AuthType_IsValid(int value) {
    return ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_IsValid(value);
  }
  static constexpr AuthType AuthType_MIN =
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_MIN;
  static constexpr AuthType AuthType_MAX =
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_MAX;
  static constexpr int AuthType_ARRAYSIZE =
    ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_AuthType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthType_descriptor() {
    return ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthType_Name.");
    return ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_Name(enum_t_value);
  }
  static inline bool AuthType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthType* value) {
    return ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kUsernameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kAccessTokenFieldNumber = 5,
    kAuthEndpointFieldNumber = 6,
    kAuthTypeFieldNumber = 2,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // .google.protobuf.StringValue username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const PROTOBUF_NAMESPACE_ID::StringValue& username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_username();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_username();
  void set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_username() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_username();
  public:
  void unsafe_arena_set_allocated_username(
      PROTOBUF_NAMESPACE_ID::StringValue* username);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_username();

  // .google.protobuf.StringValue password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const PROTOBUF_NAMESPACE_ID::StringValue& password() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_password();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_password();
  void set_allocated_password(PROTOBUF_NAMESPACE_ID::StringValue* password);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_password() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_password();
  public:
  void unsafe_arena_set_allocated_password(
      PROTOBUF_NAMESPACE_ID::StringValue* password);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_password();

  // .google.protobuf.StringValue access_token = 5;
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const PROTOBUF_NAMESPACE_ID::StringValue& access_token() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_access_token();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_access_token();
  void set_allocated_access_token(PROTOBUF_NAMESPACE_ID::StringValue* access_token);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_access_token() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_access_token();
  public:
  void unsafe_arena_set_allocated_access_token(
      PROTOBUF_NAMESPACE_ID::StringValue* access_token);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_access_token();

  // .google.protobuf.StringValue auth_endpoint = 6;
  bool has_auth_endpoint() const;
  private:
  bool _internal_has_auth_endpoint() const;
  public:
  void clear_auth_endpoint();
  const PROTOBUF_NAMESPACE_ID::StringValue& auth_endpoint() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_auth_endpoint();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_auth_endpoint();
  void set_allocated_auth_endpoint(PROTOBUF_NAMESPACE_ID::StringValue* auth_endpoint);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_auth_endpoint() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_auth_endpoint();
  public:
  void unsafe_arena_set_allocated_auth_endpoint(
      PROTOBUF_NAMESPACE_ID::StringValue* auth_endpoint);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_auth_endpoint();

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.AuthType auth_type = 2;
  void clear_auth_type();
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType auth_type() const;
  void set_auth_type(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType value);
  private:
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType _internal_auth_type() const;
  void _internal_set_auth_type(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  PROTOBUF_NAMESPACE_ID::StringValue* username_;
  PROTOBUF_NAMESPACE_ID::StringValue* password_;
  PROTOBUF_NAMESPACE_ID::StringValue* access_token_;
  PROTOBUF_NAMESPACE_ID::StringValue* auth_endpoint_;
  int auth_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_ManagerSettings_MqttSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings) */ {
 public:
  inline ServerConfiguration_ManagerSettings_MqttSettings() : ServerConfiguration_ManagerSettings_MqttSettings(nullptr) {}
  virtual ~ServerConfiguration_ManagerSettings_MqttSettings();

  ServerConfiguration_ManagerSettings_MqttSettings(const ServerConfiguration_ManagerSettings_MqttSettings& from);
  ServerConfiguration_ManagerSettings_MqttSettings(ServerConfiguration_ManagerSettings_MqttSettings&& from) noexcept
    : ServerConfiguration_ManagerSettings_MqttSettings() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_ManagerSettings_MqttSettings& operator=(const ServerConfiguration_ManagerSettings_MqttSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_ManagerSettings_MqttSettings& operator=(ServerConfiguration_ManagerSettings_MqttSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_ManagerSettings_MqttSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_ManagerSettings_MqttSettings* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_ManagerSettings_MqttSettings*>(
               &_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerConfiguration_ManagerSettings_MqttSettings& a, ServerConfiguration_ManagerSettings_MqttSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_ManagerSettings_MqttSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_ManagerSettings_MqttSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_ManagerSettings_MqttSettings* New() const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_MqttSettings>(nullptr);
  }

  ServerConfiguration_ManagerSettings_MqttSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings_MqttSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_ManagerSettings_MqttSettings& from);
  void MergeFrom(const ServerConfiguration_ManagerSettings_MqttSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_ManagerSettings_MqttSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.ManagerSettings.MqttSettings";
  }
  protected:
  explicit ServerConfiguration_ManagerSettings_MqttSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost MqttWebHost;

  // accessors -------------------------------------------------------

  enum : int {
    kWebHostsFieldNumber = 5,
    kMqttIdFieldNumber = 2,
    kUseInternalBrokerFieldNumber = 3,
    kUseInternalAuthenticationFieldNumber = 4,
    kMaxBufferSizeFieldNumber = 1,
  };
  // repeated .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost web_hosts = 5;
  int web_hosts_size() const;
  private:
  int _internal_web_hosts_size() const;
  public:
  void clear_web_hosts();
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* mutable_web_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >*
      mutable_web_hosts();
  private:
  const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& _internal_web_hosts(int index) const;
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* _internal_add_web_hosts();
  public:
  const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& web_hosts(int index) const;
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* add_web_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >&
      web_hosts() const;

  // .google.protobuf.StringValue mqtt_id = 2;
  bool has_mqtt_id() const;
  private:
  bool _internal_has_mqtt_id() const;
  public:
  void clear_mqtt_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& mqtt_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_mqtt_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_mqtt_id();
  void set_allocated_mqtt_id(PROTOBUF_NAMESPACE_ID::StringValue* mqtt_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_mqtt_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_mqtt_id();
  public:
  void unsafe_arena_set_allocated_mqtt_id(
      PROTOBUF_NAMESPACE_ID::StringValue* mqtt_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_mqtt_id();

  // .google.protobuf.BoolValue use_internal_broker = 3;
  bool has_use_internal_broker() const;
  private:
  bool _internal_has_use_internal_broker() const;
  public:
  void clear_use_internal_broker();
  const PROTOBUF_NAMESPACE_ID::BoolValue& use_internal_broker() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_use_internal_broker();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_internal_broker();
  void set_allocated_use_internal_broker(PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_broker);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_internal_broker() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_internal_broker();
  public:
  void unsafe_arena_set_allocated_use_internal_broker(
      PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_broker);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_internal_broker();

  // .google.protobuf.BoolValue use_internal_authentication = 4;
  bool has_use_internal_authentication() const;
  private:
  bool _internal_has_use_internal_authentication() const;
  public:
  void clear_use_internal_authentication();
  const PROTOBUF_NAMESPACE_ID::BoolValue& use_internal_authentication() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_use_internal_authentication();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_use_internal_authentication();
  void set_allocated_use_internal_authentication(PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_authentication);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_use_internal_authentication() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_use_internal_authentication();
  public:
  void unsafe_arena_set_allocated_use_internal_authentication(
      PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_authentication);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_use_internal_authentication();

  // int32 max_buffer_size = 1;
  void clear_max_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_buffer_size() const;
  void set_max_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_buffer_size() const;
  void _internal_set_max_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost > web_hosts_;
  PROTOBUF_NAMESPACE_ID::StringValue* mqtt_id_;
  PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_broker_;
  PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_authentication_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_buffer_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_ManagerSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.ManagerSettings) */ {
 public:
  inline ServerConfiguration_ManagerSettings() : ServerConfiguration_ManagerSettings(nullptr) {}
  virtual ~ServerConfiguration_ManagerSettings();

  ServerConfiguration_ManagerSettings(const ServerConfiguration_ManagerSettings& from);
  ServerConfiguration_ManagerSettings(ServerConfiguration_ManagerSettings&& from) noexcept
    : ServerConfiguration_ManagerSettings() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_ManagerSettings& operator=(const ServerConfiguration_ManagerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_ManagerSettings& operator=(ServerConfiguration_ManagerSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_ManagerSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_ManagerSettings* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_ManagerSettings*>(
               &_ServerConfiguration_ManagerSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServerConfiguration_ManagerSettings& a, ServerConfiguration_ManagerSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_ManagerSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_ManagerSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_ManagerSettings* New() const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings>(nullptr);
  }

  ServerConfiguration_ManagerSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_ManagerSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_ManagerSettings& from);
  void MergeFrom(const ServerConfiguration_ManagerSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_ManagerSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.ManagerSettings";
  }
  protected:
  explicit ServerConfiguration_ManagerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerConfiguration_ManagerSettings_BuilderConfiguration BuilderConfiguration;
  typedef ServerConfiguration_ManagerSettings_MqttSettings MqttSettings;

  // accessors -------------------------------------------------------

  enum : int {
    kWiseLocationFieldNumber = 3,
    kInternalBuilderFieldNumber = 6,
    kMqttSettingsFieldNumber = 7,
    kNumaLockFieldNumber = 8,
    kSkipCoresFieldNumber = 9,
    kRpcSettingsFieldNumber = 10,
    kRespectShmemFieldNumber = 11,
    kDisplayStatusFieldNumber = 12,
    kListenBalanceFieldNumber = 13,
    kExportThreadFractionFieldNumber = 14,
    kMaxConcurrentFieldNumber = 1,
    kRestartOldFieldNumber = 2,
    kLockCpuFieldNumber = 4,
    kStartPausedFieldNumber = 5,
  };
  // string wise_location = 3;
  void clear_wise_location();
  const std::string& wise_location() const;
  void set_wise_location(const std::string& value);
  void set_wise_location(std::string&& value);
  void set_wise_location(const char* value);
  void set_wise_location(const char* value, size_t size);
  std::string* mutable_wise_location();
  std::string* release_wise_location();
  void set_allocated_wise_location(std::string* wise_location);
  private:
  const std::string& _internal_wise_location() const;
  void _internal_set_wise_location(const std::string& value);
  std::string* _internal_mutable_wise_location();
  public:

  // .wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration internal_builder = 6;
  bool has_internal_builder() const;
  private:
  bool _internal_has_internal_builder() const;
  public:
  void clear_internal_builder();
  const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration& internal_builder() const;
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* release_internal_builder();
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* mutable_internal_builder();
  void set_allocated_internal_builder(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_builder);
  private:
  const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration& _internal_internal_builder() const;
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* _internal_mutable_internal_builder();
  public:
  void unsafe_arena_set_allocated_internal_builder(
      ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_builder);
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* unsafe_arena_release_internal_builder();

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings mqtt_settings = 7;
  bool has_mqtt_settings() const;
  private:
  bool _internal_has_mqtt_settings() const;
  public:
  void clear_mqtt_settings();
  const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings& mqtt_settings() const;
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* release_mqtt_settings();
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mutable_mqtt_settings();
  void set_allocated_mqtt_settings(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mqtt_settings);
  private:
  const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings& _internal_mqtt_settings() const;
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* _internal_mutable_mqtt_settings();
  public:
  void unsafe_arena_set_allocated_mqtt_settings(
      ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mqtt_settings);
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* unsafe_arena_release_mqtt_settings();

  // .google.protobuf.BoolValue numa_lock = 8;
  bool has_numa_lock() const;
  private:
  bool _internal_has_numa_lock() const;
  public:
  void clear_numa_lock();
  const PROTOBUF_NAMESPACE_ID::BoolValue& numa_lock() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_numa_lock();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_numa_lock();
  void set_allocated_numa_lock(PROTOBUF_NAMESPACE_ID::BoolValue* numa_lock);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_numa_lock() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_numa_lock();
  public:
  void unsafe_arena_set_allocated_numa_lock(
      PROTOBUF_NAMESPACE_ID::BoolValue* numa_lock);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_numa_lock();

  // .google.protobuf.Int32Value skip_cores = 9;
  bool has_skip_cores() const;
  private:
  bool _internal_has_skip_cores() const;
  public:
  void clear_skip_cores();
  const PROTOBUF_NAMESPACE_ID::Int32Value& skip_cores() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_skip_cores();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_skip_cores();
  void set_allocated_skip_cores(PROTOBUF_NAMESPACE_ID::Int32Value* skip_cores);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_skip_cores() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_skip_cores();
  public:
  void unsafe_arena_set_allocated_skip_cores(
      PROTOBUF_NAMESPACE_ID::Int32Value* skip_cores);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_skip_cores();

  // .wise.confic.ServerConfiguration.RpcConfiguration rpc_settings = 10;
  bool has_rpc_settings() const;
  private:
  bool _internal_has_rpc_settings() const;
  public:
  void clear_rpc_settings();
  const ::wise::confic::ServerConfiguration_RpcConfiguration& rpc_settings() const;
  ::wise::confic::ServerConfiguration_RpcConfiguration* release_rpc_settings();
  ::wise::confic::ServerConfiguration_RpcConfiguration* mutable_rpc_settings();
  void set_allocated_rpc_settings(::wise::confic::ServerConfiguration_RpcConfiguration* rpc_settings);
  private:
  const ::wise::confic::ServerConfiguration_RpcConfiguration& _internal_rpc_settings() const;
  ::wise::confic::ServerConfiguration_RpcConfiguration* _internal_mutable_rpc_settings();
  public:
  void unsafe_arena_set_allocated_rpc_settings(
      ::wise::confic::ServerConfiguration_RpcConfiguration* rpc_settings);
  ::wise::confic::ServerConfiguration_RpcConfiguration* unsafe_arena_release_rpc_settings();

  // .google.protobuf.BoolValue respect_shmem = 11;
  bool has_respect_shmem() const;
  private:
  bool _internal_has_respect_shmem() const;
  public:
  void clear_respect_shmem();
  const PROTOBUF_NAMESPACE_ID::BoolValue& respect_shmem() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_respect_shmem();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_respect_shmem();
  void set_allocated_respect_shmem(PROTOBUF_NAMESPACE_ID::BoolValue* respect_shmem);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_respect_shmem() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_respect_shmem();
  public:
  void unsafe_arena_set_allocated_respect_shmem(
      PROTOBUF_NAMESPACE_ID::BoolValue* respect_shmem);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_respect_shmem();

  // .google.protobuf.BoolValue display_status = 12;
  bool has_display_status() const;
  private:
  bool _internal_has_display_status() const;
  public:
  void clear_display_status();
  const PROTOBUF_NAMESPACE_ID::BoolValue& display_status() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_display_status();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_display_status();
  void set_allocated_display_status(PROTOBUF_NAMESPACE_ID::BoolValue* display_status);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_display_status() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_display_status();
  public:
  void unsafe_arena_set_allocated_display_status(
      PROTOBUF_NAMESPACE_ID::BoolValue* display_status);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_display_status();

  // .google.protobuf.BoolValue listen_balance = 13;
  bool has_listen_balance() const;
  private:
  bool _internal_has_listen_balance() const;
  public:
  void clear_listen_balance();
  const PROTOBUF_NAMESPACE_ID::BoolValue& listen_balance() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_listen_balance();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_listen_balance();
  void set_allocated_listen_balance(PROTOBUF_NAMESPACE_ID::BoolValue* listen_balance);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_listen_balance() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_listen_balance();
  public:
  void unsafe_arena_set_allocated_listen_balance(
      PROTOBUF_NAMESPACE_ID::BoolValue* listen_balance);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_listen_balance();

  // .google.protobuf.Int32Value export_thread_fraction = 14;
  bool has_export_thread_fraction() const;
  private:
  bool _internal_has_export_thread_fraction() const;
  public:
  void clear_export_thread_fraction();
  const PROTOBUF_NAMESPACE_ID::Int32Value& export_thread_fraction() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_export_thread_fraction();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_export_thread_fraction();
  void set_allocated_export_thread_fraction(PROTOBUF_NAMESPACE_ID::Int32Value* export_thread_fraction);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_export_thread_fraction() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_export_thread_fraction();
  public:
  void unsafe_arena_set_allocated_export_thread_fraction(
      PROTOBUF_NAMESPACE_ID::Int32Value* export_thread_fraction);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_export_thread_fraction();

  // int32 max_concurrent = 1;
  void clear_max_concurrent();
  ::PROTOBUF_NAMESPACE_ID::int32 max_concurrent() const;
  void set_max_concurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_concurrent() const;
  void _internal_set_max_concurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool restart_old = 2;
  void clear_restart_old();
  bool restart_old() const;
  void set_restart_old(bool value);
  private:
  bool _internal_restart_old() const;
  void _internal_set_restart_old(bool value);
  public:

  // bool lock_cpu = 4;
  void clear_lock_cpu();
  bool lock_cpu() const;
  void set_lock_cpu(bool value);
  private:
  bool _internal_lock_cpu() const;
  void _internal_set_lock_cpu(bool value);
  public:

  // bool start_paused = 5;
  void clear_start_paused();
  bool start_paused() const;
  void set_start_paused(bool value);
  private:
  bool _internal_start_paused() const;
  void _internal_set_start_paused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.ManagerSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wise_location_;
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_builder_;
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mqtt_settings_;
  PROTOBUF_NAMESPACE_ID::BoolValue* numa_lock_;
  PROTOBUF_NAMESPACE_ID::Int32Value* skip_cores_;
  ::wise::confic::ServerConfiguration_RpcConfiguration* rpc_settings_;
  PROTOBUF_NAMESPACE_ID::BoolValue* respect_shmem_;
  PROTOBUF_NAMESPACE_ID::BoolValue* display_status_;
  PROTOBUF_NAMESPACE_ID::BoolValue* listen_balance_;
  PROTOBUF_NAMESPACE_ID::Int32Value* export_thread_fraction_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_concurrent_;
  bool restart_old_;
  bool lock_cpu_;
  bool start_paused_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration_RpcConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration.RpcConfiguration) */ {
 public:
  inline ServerConfiguration_RpcConfiguration() : ServerConfiguration_RpcConfiguration(nullptr) {}
  virtual ~ServerConfiguration_RpcConfiguration();

  ServerConfiguration_RpcConfiguration(const ServerConfiguration_RpcConfiguration& from);
  ServerConfiguration_RpcConfiguration(ServerConfiguration_RpcConfiguration&& from) noexcept
    : ServerConfiguration_RpcConfiguration() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration_RpcConfiguration& operator=(const ServerConfiguration_RpcConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration_RpcConfiguration& operator=(ServerConfiguration_RpcConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration_RpcConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration_RpcConfiguration* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration_RpcConfiguration*>(
               &_ServerConfiguration_RpcConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServerConfiguration_RpcConfiguration& a, ServerConfiguration_RpcConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration_RpcConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration_RpcConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration_RpcConfiguration* New() const final {
    return CreateMaybeMessage<ServerConfiguration_RpcConfiguration>(nullptr);
  }

  ServerConfiguration_RpcConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration_RpcConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration_RpcConfiguration& from);
  void MergeFrom(const ServerConfiguration_RpcConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration_RpcConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration.RpcConfiguration";
  }
  protected:
  explicit ServerConfiguration_RpcConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalAddressFieldNumber = 2,
    kInternalAddressFieldNumber = 4,
    kExternalPortFieldNumber = 5,
    kInternalPortFieldNumber = 6,
    kEnabledFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string externalAddress = 2;
  void clear_externaladdress();
  const std::string& externaladdress() const;
  void set_externaladdress(const std::string& value);
  void set_externaladdress(std::string&& value);
  void set_externaladdress(const char* value);
  void set_externaladdress(const char* value, size_t size);
  std::string* mutable_externaladdress();
  std::string* release_externaladdress();
  void set_allocated_externaladdress(std::string* externaladdress);
  private:
  const std::string& _internal_externaladdress() const;
  void _internal_set_externaladdress(const std::string& value);
  std::string* _internal_mutable_externaladdress();
  public:

  // .google.protobuf.StringValue internal_address = 4;
  bool has_internal_address() const;
  private:
  bool _internal_has_internal_address() const;
  public:
  void clear_internal_address();
  const PROTOBUF_NAMESPACE_ID::StringValue& internal_address() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_internal_address();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_internal_address();
  void set_allocated_internal_address(PROTOBUF_NAMESPACE_ID::StringValue* internal_address);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_internal_address() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_internal_address();
  public:
  void unsafe_arena_set_allocated_internal_address(
      PROTOBUF_NAMESPACE_ID::StringValue* internal_address);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_internal_address();

  // .google.protobuf.Int32Value external_port = 5;
  bool has_external_port() const;
  private:
  bool _internal_has_external_port() const;
  public:
  void clear_external_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& external_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_external_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_external_port();
  void set_allocated_external_port(PROTOBUF_NAMESPACE_ID::Int32Value* external_port);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_external_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_external_port();
  public:
  void unsafe_arena_set_allocated_external_port(
      PROTOBUF_NAMESPACE_ID::Int32Value* external_port);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_external_port();

  // .google.protobuf.Int32Value internal_port = 6;
  bool has_internal_port() const;
  private:
  bool _internal_has_internal_port() const;
  public:
  void clear_internal_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& internal_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_internal_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_internal_port();
  void set_allocated_internal_port(PROTOBUF_NAMESPACE_ID::Int32Value* internal_port);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_internal_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_internal_port();
  public:
  void unsafe_arena_set_allocated_internal_port(
      PROTOBUF_NAMESPACE_ID::Int32Value* internal_port);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_internal_port();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration.RpcConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr externaladdress_;
  PROTOBUF_NAMESPACE_ID::StringValue* internal_address_;
  PROTOBUF_NAMESPACE_ID::Int32Value* external_port_;
  PROTOBUF_NAMESPACE_ID::Int32Value* internal_port_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wise.confic.ServerConfiguration) */ {
 public:
  inline ServerConfiguration() : ServerConfiguration(nullptr) {}
  virtual ~ServerConfiguration();

  ServerConfiguration(const ServerConfiguration& from);
  ServerConfiguration(ServerConfiguration&& from) noexcept
    : ServerConfiguration() {
    *this = ::std::move(from);
  }

  inline ServerConfiguration& operator=(const ServerConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfiguration& operator=(ServerConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerConfiguration& default_instance();

  enum CommsTypeCase {
    kSocket = 4,
    kMqtt = 5,
    COMMSTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfiguration* internal_default_instance() {
    return reinterpret_cast<const ServerConfiguration*>(
               &_ServerConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServerConfiguration& a, ServerConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfiguration* New() const final {
    return CreateMaybeMessage<ServerConfiguration>(nullptr);
  }

  ServerConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerConfiguration& from);
  void MergeFrom(const ServerConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wise.confic.ServerConfiguration";
  }
  protected:
  explicit ServerConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wise_5fconfig_2eproto);
    return ::descriptor_table_wise_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerConfiguration_LogFile LogFile;
  typedef ServerConfiguration_Signals Signals;
  typedef ServerConfiguration_Hardware Hardware;
  typedef ServerConfiguration_SocketConnection SocketConnection;
  typedef ServerConfiguration_MqttConnection MqttConnection;
  typedef ServerConfiguration_BuilderConnection BuilderConnection;
  typedef ServerConfiguration_ManagerSettings ManagerSettings;
  typedef ServerConfiguration_RpcConfiguration RpcConfiguration;

  typedef ServerConfiguration_Verbosity Verbosity;
  static constexpr Verbosity NONE =
    ServerConfiguration_Verbosity_NONE;
  static constexpr Verbosity SEVERE =
    ServerConfiguration_Verbosity_SEVERE;
  static constexpr Verbosity WARN =
    ServerConfiguration_Verbosity_WARN;
  static constexpr Verbosity INFO =
    ServerConfiguration_Verbosity_INFO;
  static constexpr Verbosity MAX =
    ServerConfiguration_Verbosity_MAX;
  static inline bool Verbosity_IsValid(int value) {
    return ServerConfiguration_Verbosity_IsValid(value);
  }
  static constexpr Verbosity Verbosity_MIN =
    ServerConfiguration_Verbosity_Verbosity_MIN;
  static constexpr Verbosity Verbosity_MAX =
    ServerConfiguration_Verbosity_Verbosity_MAX;
  static constexpr int Verbosity_ARRAYSIZE =
    ServerConfiguration_Verbosity_Verbosity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Verbosity_descriptor() {
    return ServerConfiguration_Verbosity_descriptor();
  }
  template<typename T>
  static inline const std::string& Verbosity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verbosity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verbosity_Name.");
    return ServerConfiguration_Verbosity_Name(enum_t_value);
  }
  static inline bool Verbosity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verbosity* value) {
    return ServerConfiguration_Verbosity_Parse(name, value);
  }

  typedef ServerConfiguration_OutputType OutputType;
  static constexpr OutputType JSON =
    ServerConfiguration_OutputType_JSON;
  static constexpr OutputType JSON_MINIMAL =
    ServerConfiguration_OutputType_JSON_MINIMAL;
  static constexpr OutputType BINARY =
    ServerConfiguration_OutputType_BINARY;
  static constexpr OutputType XML =
    ServerConfiguration_OutputType_XML;
  static constexpr OutputType JSON_V2 =
    ServerConfiguration_OutputType_JSON_V2;
  static constexpr OutputType JSON_MINIMAL_V2 =
    ServerConfiguration_OutputType_JSON_MINIMAL_V2;
  static constexpr OutputType BINARY_V2 =
    ServerConfiguration_OutputType_BINARY_V2;
  static inline bool OutputType_IsValid(int value) {
    return ServerConfiguration_OutputType_IsValid(value);
  }
  static constexpr OutputType OutputType_MIN =
    ServerConfiguration_OutputType_OutputType_MIN;
  static constexpr OutputType OutputType_MAX =
    ServerConfiguration_OutputType_OutputType_MAX;
  static constexpr int OutputType_ARRAYSIZE =
    ServerConfiguration_OutputType_OutputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutputType_descriptor() {
    return ServerConfiguration_OutputType_descriptor();
  }
  template<typename T>
  static inline const std::string& OutputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputType_Name.");
    return ServerConfiguration_OutputType_Name(enum_t_value);
  }
  static inline bool OutputType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OutputType* value) {
    return ServerConfiguration_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExampleDirectoryFieldNumber = 7,
    kLogFieldNumber = 1,
    kSignalsFieldNumber = 2,
    kHardwareFieldNumber = 3,
    kBuilderFieldNumber = 6,
    kManagerSettingsFieldNumber = 8,
    kAlreadyV2FieldNumber = 9,
    kSocketFieldNumber = 4,
    kMqttFieldNumber = 5,
  };
  // string exampleDirectory = 7;
  void clear_exampledirectory();
  const std::string& exampledirectory() const;
  void set_exampledirectory(const std::string& value);
  void set_exampledirectory(std::string&& value);
  void set_exampledirectory(const char* value);
  void set_exampledirectory(const char* value, size_t size);
  std::string* mutable_exampledirectory();
  std::string* release_exampledirectory();
  void set_allocated_exampledirectory(std::string* exampledirectory);
  private:
  const std::string& _internal_exampledirectory() const;
  void _internal_set_exampledirectory(const std::string& value);
  std::string* _internal_mutable_exampledirectory();
  public:

  // .wise.confic.ServerConfiguration.LogFile log = 1;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::wise::confic::ServerConfiguration_LogFile& log() const;
  ::wise::confic::ServerConfiguration_LogFile* release_log();
  ::wise::confic::ServerConfiguration_LogFile* mutable_log();
  void set_allocated_log(::wise::confic::ServerConfiguration_LogFile* log);
  private:
  const ::wise::confic::ServerConfiguration_LogFile& _internal_log() const;
  ::wise::confic::ServerConfiguration_LogFile* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::wise::confic::ServerConfiguration_LogFile* log);
  ::wise::confic::ServerConfiguration_LogFile* unsafe_arena_release_log();

  // .wise.confic.ServerConfiguration.Signals signals = 2;
  bool has_signals() const;
  private:
  bool _internal_has_signals() const;
  public:
  void clear_signals();
  const ::wise::confic::ServerConfiguration_Signals& signals() const;
  ::wise::confic::ServerConfiguration_Signals* release_signals();
  ::wise::confic::ServerConfiguration_Signals* mutable_signals();
  void set_allocated_signals(::wise::confic::ServerConfiguration_Signals* signals);
  private:
  const ::wise::confic::ServerConfiguration_Signals& _internal_signals() const;
  ::wise::confic::ServerConfiguration_Signals* _internal_mutable_signals();
  public:
  void unsafe_arena_set_allocated_signals(
      ::wise::confic::ServerConfiguration_Signals* signals);
  ::wise::confic::ServerConfiguration_Signals* unsafe_arena_release_signals();

  // .wise.confic.ServerConfiguration.Hardware hardware = 3;
  bool has_hardware() const;
  private:
  bool _internal_has_hardware() const;
  public:
  void clear_hardware();
  const ::wise::confic::ServerConfiguration_Hardware& hardware() const;
  ::wise::confic::ServerConfiguration_Hardware* release_hardware();
  ::wise::confic::ServerConfiguration_Hardware* mutable_hardware();
  void set_allocated_hardware(::wise::confic::ServerConfiguration_Hardware* hardware);
  private:
  const ::wise::confic::ServerConfiguration_Hardware& _internal_hardware() const;
  ::wise::confic::ServerConfiguration_Hardware* _internal_mutable_hardware();
  public:
  void unsafe_arena_set_allocated_hardware(
      ::wise::confic::ServerConfiguration_Hardware* hardware);
  ::wise::confic::ServerConfiguration_Hardware* unsafe_arena_release_hardware();

  // .wise.confic.ServerConfiguration.BuilderConnection builder = 6;
  bool has_builder() const;
  private:
  bool _internal_has_builder() const;
  public:
  void clear_builder();
  const ::wise::confic::ServerConfiguration_BuilderConnection& builder() const;
  ::wise::confic::ServerConfiguration_BuilderConnection* release_builder();
  ::wise::confic::ServerConfiguration_BuilderConnection* mutable_builder();
  void set_allocated_builder(::wise::confic::ServerConfiguration_BuilderConnection* builder);
  private:
  const ::wise::confic::ServerConfiguration_BuilderConnection& _internal_builder() const;
  ::wise::confic::ServerConfiguration_BuilderConnection* _internal_mutable_builder();
  public:
  void unsafe_arena_set_allocated_builder(
      ::wise::confic::ServerConfiguration_BuilderConnection* builder);
  ::wise::confic::ServerConfiguration_BuilderConnection* unsafe_arena_release_builder();

  // .wise.confic.ServerConfiguration.ManagerSettings manager_settings = 8;
  bool has_manager_settings() const;
  private:
  bool _internal_has_manager_settings() const;
  public:
  void clear_manager_settings();
  const ::wise::confic::ServerConfiguration_ManagerSettings& manager_settings() const;
  ::wise::confic::ServerConfiguration_ManagerSettings* release_manager_settings();
  ::wise::confic::ServerConfiguration_ManagerSettings* mutable_manager_settings();
  void set_allocated_manager_settings(::wise::confic::ServerConfiguration_ManagerSettings* manager_settings);
  private:
  const ::wise::confic::ServerConfiguration_ManagerSettings& _internal_manager_settings() const;
  ::wise::confic::ServerConfiguration_ManagerSettings* _internal_mutable_manager_settings();
  public:
  void unsafe_arena_set_allocated_manager_settings(
      ::wise::confic::ServerConfiguration_ManagerSettings* manager_settings);
  ::wise::confic::ServerConfiguration_ManagerSettings* unsafe_arena_release_manager_settings();

  // .google.protobuf.BoolValue already_v2 = 9;
  bool has_already_v2() const;
  private:
  bool _internal_has_already_v2() const;
  public:
  void clear_already_v2();
  const PROTOBUF_NAMESPACE_ID::BoolValue& already_v2() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_already_v2();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_already_v2();
  void set_allocated_already_v2(PROTOBUF_NAMESPACE_ID::BoolValue* already_v2);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_already_v2() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_already_v2();
  public:
  void unsafe_arena_set_allocated_already_v2(
      PROTOBUF_NAMESPACE_ID::BoolValue* already_v2);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_already_v2();

  // .wise.confic.ServerConfiguration.SocketConnection socket = 4;
  bool has_socket() const;
  private:
  bool _internal_has_socket() const;
  public:
  void clear_socket();
  const ::wise::confic::ServerConfiguration_SocketConnection& socket() const;
  ::wise::confic::ServerConfiguration_SocketConnection* release_socket();
  ::wise::confic::ServerConfiguration_SocketConnection* mutable_socket();
  void set_allocated_socket(::wise::confic::ServerConfiguration_SocketConnection* socket);
  private:
  const ::wise::confic::ServerConfiguration_SocketConnection& _internal_socket() const;
  ::wise::confic::ServerConfiguration_SocketConnection* _internal_mutable_socket();
  public:
  void unsafe_arena_set_allocated_socket(
      ::wise::confic::ServerConfiguration_SocketConnection* socket);
  ::wise::confic::ServerConfiguration_SocketConnection* unsafe_arena_release_socket();

  // .wise.confic.ServerConfiguration.MqttConnection mqtt = 5;
  bool has_mqtt() const;
  private:
  bool _internal_has_mqtt() const;
  public:
  void clear_mqtt();
  const ::wise::confic::ServerConfiguration_MqttConnection& mqtt() const;
  ::wise::confic::ServerConfiguration_MqttConnection* release_mqtt();
  ::wise::confic::ServerConfiguration_MqttConnection* mutable_mqtt();
  void set_allocated_mqtt(::wise::confic::ServerConfiguration_MqttConnection* mqtt);
  private:
  const ::wise::confic::ServerConfiguration_MqttConnection& _internal_mqtt() const;
  ::wise::confic::ServerConfiguration_MqttConnection* _internal_mutable_mqtt();
  public:
  void unsafe_arena_set_allocated_mqtt(
      ::wise::confic::ServerConfiguration_MqttConnection* mqtt);
  ::wise::confic::ServerConfiguration_MqttConnection* unsafe_arena_release_mqtt();

  void clear_commsType();
  CommsTypeCase commsType_case() const;
  // @@protoc_insertion_point(class_scope:wise.confic.ServerConfiguration)
 private:
  class _Internal;
  void set_has_socket();
  void set_has_mqtt();

  inline bool has_commsType() const;
  inline void clear_has_commsType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exampledirectory_;
  ::wise::confic::ServerConfiguration_LogFile* log_;
  ::wise::confic::ServerConfiguration_Signals* signals_;
  ::wise::confic::ServerConfiguration_Hardware* hardware_;
  ::wise::confic::ServerConfiguration_BuilderConnection* builder_;
  ::wise::confic::ServerConfiguration_ManagerSettings* manager_settings_;
  PROTOBUF_NAMESPACE_ID::BoolValue* already_v2_;
  union CommsTypeUnion {
    CommsTypeUnion() {}
    ::wise::confic::ServerConfiguration_SocketConnection* socket_;
    ::wise::confic::ServerConfiguration_MqttConnection* mqtt_;
  } commsType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_wise_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerConfiguration_LogFile

// string filename = 1;
inline void ServerConfiguration_LogFile::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_LogFile::filename() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.LogFile.filename)
  return _internal_filename();
}
inline void ServerConfiguration_LogFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.LogFile.filename)
}
inline std::string* ServerConfiguration_LogFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.LogFile.filename)
  return _internal_mutable_filename();
}
inline const std::string& ServerConfiguration_LogFile::_internal_filename() const {
  return filename_.Get();
}
inline void ServerConfiguration_LogFile::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_LogFile::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.LogFile.filename)
}
inline void ServerConfiguration_LogFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.LogFile.filename)
}
inline void ServerConfiguration_LogFile::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.LogFile.filename)
}
inline std::string* ServerConfiguration_LogFile::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_LogFile::release_filename() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.LogFile.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_LogFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.LogFile.filename)
}

// .wise.confic.ServerConfiguration.Verbosity verbosity = 2;
inline void ServerConfiguration_LogFile::clear_verbosity() {
  verbosity_ = 0;
}
inline ::wise::confic::ServerConfiguration_Verbosity ServerConfiguration_LogFile::_internal_verbosity() const {
  return static_cast< ::wise::confic::ServerConfiguration_Verbosity >(verbosity_);
}
inline ::wise::confic::ServerConfiguration_Verbosity ServerConfiguration_LogFile::verbosity() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.LogFile.verbosity)
  return _internal_verbosity();
}
inline void ServerConfiguration_LogFile::_internal_set_verbosity(::wise::confic::ServerConfiguration_Verbosity value) {
  
  verbosity_ = value;
}
inline void ServerConfiguration_LogFile::set_verbosity(::wise::confic::ServerConfiguration_Verbosity value) {
  _internal_set_verbosity(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.LogFile.verbosity)
}

// -------------------------------------------------------------------

// ServerConfiguration_Signals

// string start = 1;
inline void ServerConfiguration_Signals::clear_start() {
  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_Signals::start() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.Signals.start)
  return _internal_start();
}
inline void ServerConfiguration_Signals::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.Signals.start)
}
inline std::string* ServerConfiguration_Signals::mutable_start() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.Signals.start)
  return _internal_mutable_start();
}
inline const std::string& ServerConfiguration_Signals::_internal_start() const {
  return start_.Get();
}
inline void ServerConfiguration_Signals::_internal_set_start(const std::string& value) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_Signals::set_start(std::string&& value) {
  
  start_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.Signals.start)
}
inline void ServerConfiguration_Signals::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.Signals.start)
}
inline void ServerConfiguration_Signals::set_start(const char* value,
    size_t size) {
  
  start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.Signals.start)
}
inline std::string* ServerConfiguration_Signals::_internal_mutable_start() {
  
  return start_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_Signals::release_start() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.Signals.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_Signals::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.Signals.start)
}

// string complete = 2;
inline void ServerConfiguration_Signals::clear_complete() {
  complete_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_Signals::complete() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.Signals.complete)
  return _internal_complete();
}
inline void ServerConfiguration_Signals::set_complete(const std::string& value) {
  _internal_set_complete(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.Signals.complete)
}
inline std::string* ServerConfiguration_Signals::mutable_complete() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.Signals.complete)
  return _internal_mutable_complete();
}
inline const std::string& ServerConfiguration_Signals::_internal_complete() const {
  return complete_.Get();
}
inline void ServerConfiguration_Signals::_internal_set_complete(const std::string& value) {
  
  complete_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_Signals::set_complete(std::string&& value) {
  
  complete_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.Signals.complete)
}
inline void ServerConfiguration_Signals::set_complete(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  complete_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.Signals.complete)
}
inline void ServerConfiguration_Signals::set_complete(const char* value,
    size_t size) {
  
  complete_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.Signals.complete)
}
inline std::string* ServerConfiguration_Signals::_internal_mutable_complete() {
  
  return complete_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_Signals::release_complete() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.Signals.complete)
  return complete_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_Signals::set_allocated_complete(std::string* complete) {
  if (complete != nullptr) {
    
  } else {
    
  }
  complete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), complete,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.Signals.complete)
}

// -------------------------------------------------------------------

// ServerConfiguration_Hardware

// int32 processes = 1;
inline void ServerConfiguration_Hardware::clear_processes() {
  processes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_Hardware::_internal_processes() const {
  return processes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_Hardware::processes() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.Hardware.processes)
  return _internal_processes();
}
inline void ServerConfiguration_Hardware::_internal_set_processes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  processes_ = value;
}
inline void ServerConfiguration_Hardware::set_processes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processes(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.Hardware.processes)
}

// int32 cores = 2;
inline void ServerConfiguration_Hardware::clear_cores() {
  cores_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_Hardware::_internal_cores() const {
  return cores_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_Hardware::cores() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.Hardware.cores)
  return _internal_cores();
}
inline void ServerConfiguration_Hardware::_internal_set_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cores_ = value;
}
inline void ServerConfiguration_Hardware::set_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cores(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.Hardware.cores)
}

// -------------------------------------------------------------------

// ServerConfiguration_SocketConnection

// string address = 1;
inline void ServerConfiguration_SocketConnection::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_SocketConnection::address() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.SocketConnection.address)
  return _internal_address();
}
inline void ServerConfiguration_SocketConnection::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.SocketConnection.address)
}
inline std::string* ServerConfiguration_SocketConnection::mutable_address() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.SocketConnection.address)
  return _internal_mutable_address();
}
inline const std::string& ServerConfiguration_SocketConnection::_internal_address() const {
  return address_.Get();
}
inline void ServerConfiguration_SocketConnection::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_SocketConnection::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.SocketConnection.address)
}
inline void ServerConfiguration_SocketConnection::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.SocketConnection.address)
}
inline void ServerConfiguration_SocketConnection::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.SocketConnection.address)
}
inline std::string* ServerConfiguration_SocketConnection::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_SocketConnection::release_address() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.SocketConnection.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_SocketConnection::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.SocketConnection.address)
}

// int32 port = 2;
inline void ServerConfiguration_SocketConnection::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_SocketConnection::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_SocketConnection::port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.SocketConnection.port)
  return _internal_port();
}
inline void ServerConfiguration_SocketConnection::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerConfiguration_SocketConnection::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.SocketConnection.port)
}

// -------------------------------------------------------------------

// ServerConfiguration_MqttConnection

// string hostname = 1;
inline void ServerConfiguration_MqttConnection::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_MqttConnection::hostname() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.hostname)
  return _internal_hostname();
}
inline void ServerConfiguration_MqttConnection::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.hostname)
}
inline std::string* ServerConfiguration_MqttConnection::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.MqttConnection.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ServerConfiguration_MqttConnection::_internal_hostname() const {
  return hostname_.Get();
}
inline void ServerConfiguration_MqttConnection::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_MqttConnection::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.MqttConnection.hostname)
}
inline void ServerConfiguration_MqttConnection::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.MqttConnection.hostname)
}
inline void ServerConfiguration_MqttConnection::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.MqttConnection.hostname)
}
inline std::string* ServerConfiguration_MqttConnection::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_MqttConnection::release_hostname() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.MqttConnection.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_MqttConnection::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.MqttConnection.hostname)
}

// int32 port = 2;
inline void ServerConfiguration_MqttConnection::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_MqttConnection::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_MqttConnection::port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.port)
  return _internal_port();
}
inline void ServerConfiguration_MqttConnection::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerConfiguration_MqttConnection::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.port)
}

// string topic = 3;
inline void ServerConfiguration_MqttConnection::clear_topic() {
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_MqttConnection::topic() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.topic)
  return _internal_topic();
}
inline void ServerConfiguration_MqttConnection::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.topic)
}
inline std::string* ServerConfiguration_MqttConnection::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.MqttConnection.topic)
  return _internal_mutable_topic();
}
inline const std::string& ServerConfiguration_MqttConnection::_internal_topic() const {
  return topic_.Get();
}
inline void ServerConfiguration_MqttConnection::_internal_set_topic(const std::string& value) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_MqttConnection::set_topic(std::string&& value) {
  
  topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.MqttConnection.topic)
}
inline void ServerConfiguration_MqttConnection::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.MqttConnection.topic)
}
inline void ServerConfiguration_MqttConnection::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.MqttConnection.topic)
}
inline std::string* ServerConfiguration_MqttConnection::_internal_mutable_topic() {
  
  return topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_MqttConnection::release_topic() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.MqttConnection.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_MqttConnection::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.MqttConnection.topic)
}

// .wise.confic.ServerConfiguration.Verbosity verbosity = 4;
inline void ServerConfiguration_MqttConnection::clear_verbosity() {
  verbosity_ = 0;
}
inline ::wise::confic::ServerConfiguration_Verbosity ServerConfiguration_MqttConnection::_internal_verbosity() const {
  return static_cast< ::wise::confic::ServerConfiguration_Verbosity >(verbosity_);
}
inline ::wise::confic::ServerConfiguration_Verbosity ServerConfiguration_MqttConnection::verbosity() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.verbosity)
  return _internal_verbosity();
}
inline void ServerConfiguration_MqttConnection::_internal_set_verbosity(::wise::confic::ServerConfiguration_Verbosity value) {
  
  verbosity_ = value;
}
inline void ServerConfiguration_MqttConnection::set_verbosity(::wise::confic::ServerConfiguration_Verbosity value) {
  _internal_set_verbosity(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.verbosity)
}

// int32 qos = 5;
inline void ServerConfiguration_MqttConnection::clear_qos() {
  qos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_MqttConnection::_internal_qos() const {
  return qos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_MqttConnection::qos() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.qos)
  return _internal_qos();
}
inline void ServerConfiguration_MqttConnection::_internal_set_qos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  qos_ = value;
}
inline void ServerConfiguration_MqttConnection::set_qos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_qos(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.qos)
}

// string username = 6;
inline void ServerConfiguration_MqttConnection::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_MqttConnection::username() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.username)
  return _internal_username();
}
inline void ServerConfiguration_MqttConnection::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.username)
}
inline std::string* ServerConfiguration_MqttConnection::mutable_username() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.MqttConnection.username)
  return _internal_mutable_username();
}
inline const std::string& ServerConfiguration_MqttConnection::_internal_username() const {
  return username_.Get();
}
inline void ServerConfiguration_MqttConnection::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_MqttConnection::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.MqttConnection.username)
}
inline void ServerConfiguration_MqttConnection::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.MqttConnection.username)
}
inline void ServerConfiguration_MqttConnection::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.MqttConnection.username)
}
inline std::string* ServerConfiguration_MqttConnection::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_MqttConnection::release_username() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.MqttConnection.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_MqttConnection::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.MqttConnection.username)
}

// string password = 7;
inline void ServerConfiguration_MqttConnection::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_MqttConnection::password() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.MqttConnection.password)
  return _internal_password();
}
inline void ServerConfiguration_MqttConnection::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.MqttConnection.password)
}
inline std::string* ServerConfiguration_MqttConnection::mutable_password() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.MqttConnection.password)
  return _internal_mutable_password();
}
inline const std::string& ServerConfiguration_MqttConnection::_internal_password() const {
  return password_.Get();
}
inline void ServerConfiguration_MqttConnection::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_MqttConnection::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.MqttConnection.password)
}
inline void ServerConfiguration_MqttConnection::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.MqttConnection.password)
}
inline void ServerConfiguration_MqttConnection::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.MqttConnection.password)
}
inline std::string* ServerConfiguration_MqttConnection::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_MqttConnection::release_password() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.MqttConnection.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_MqttConnection::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.MqttConnection.password)
}

// -------------------------------------------------------------------

// ServerConfiguration_BuilderConnection

// string hostname = 1;
inline void ServerConfiguration_BuilderConnection::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_BuilderConnection::hostname() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.BuilderConnection.hostname)
  return _internal_hostname();
}
inline void ServerConfiguration_BuilderConnection::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.BuilderConnection.hostname)
}
inline std::string* ServerConfiguration_BuilderConnection::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.BuilderConnection.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ServerConfiguration_BuilderConnection::_internal_hostname() const {
  return hostname_.Get();
}
inline void ServerConfiguration_BuilderConnection::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_BuilderConnection::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.BuilderConnection.hostname)
}
inline void ServerConfiguration_BuilderConnection::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.BuilderConnection.hostname)
}
inline void ServerConfiguration_BuilderConnection::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.BuilderConnection.hostname)
}
inline std::string* ServerConfiguration_BuilderConnection::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_BuilderConnection::release_hostname() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.BuilderConnection.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_BuilderConnection::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.BuilderConnection.hostname)
}

// int32 port = 2;
inline void ServerConfiguration_BuilderConnection::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_BuilderConnection::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_BuilderConnection::port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.BuilderConnection.port)
  return _internal_port();
}
inline void ServerConfiguration_BuilderConnection::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerConfiguration_BuilderConnection::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.BuilderConnection.port)
}

// .wise.confic.ServerConfiguration.OutputType format = 3;
inline void ServerConfiguration_BuilderConnection::clear_format() {
  format_ = 0;
}
inline ::wise::confic::ServerConfiguration_OutputType ServerConfiguration_BuilderConnection::_internal_format() const {
  return static_cast< ::wise::confic::ServerConfiguration_OutputType >(format_);
}
inline ::wise::confic::ServerConfiguration_OutputType ServerConfiguration_BuilderConnection::format() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.BuilderConnection.format)
  return _internal_format();
}
inline void ServerConfiguration_BuilderConnection::_internal_set_format(::wise::confic::ServerConfiguration_OutputType value) {
  
  format_ = value;
}
inline void ServerConfiguration_BuilderConnection::set_format(::wise::confic::ServerConfiguration_OutputType value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.BuilderConnection.format)
}

// -------------------------------------------------------------------

// ServerConfiguration_ManagerSettings_BuilderConfiguration

// string builder_location = 1;
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::clear_builder_location() {
  builder_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_ManagerSettings_BuilderConfiguration::builder_location() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
  return _internal_builder_location();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_builder_location(const std::string& value) {
  _internal_set_builder_location(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::mutable_builder_location() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
  return _internal_mutable_builder_location();
}
inline const std::string& ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_builder_location() const {
  return builder_location_.Get();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_set_builder_location(const std::string& value) {
  
  builder_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_builder_location(std::string&& value) {
  
  builder_location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_builder_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  builder_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_builder_location(const char* value,
    size_t size) {
  
  builder_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_mutable_builder_location() {
  
  return builder_location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::release_builder_location() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
  return builder_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_allocated_builder_location(std::string* builder_location) {
  if (builder_location != nullptr) {
    
  } else {
    
  }
  builder_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), builder_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location)
}

// string log_level = 2;
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::clear_log_level() {
  log_level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_ManagerSettings_BuilderConfiguration::log_level() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
  return _internal_log_level();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_log_level(const std::string& value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::mutable_log_level() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
  return _internal_mutable_log_level();
}
inline const std::string& ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_log_level() const {
  return log_level_.Get();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_set_log_level(const std::string& value) {
  
  log_level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_log_level(std::string&& value) {
  
  log_level_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_log_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_log_level(const char* value,
    size_t size) {
  
  log_level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_mutable_log_level() {
  
  return log_level_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_ManagerSettings_BuilderConfiguration::release_log_level() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
  return log_level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_allocated_log_level(std::string* log_level) {
  if (log_level != nullptr) {
    
  } else {
    
  }
  log_level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level)
}

// bool start_with_manager = 3;
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::clear_start_with_manager() {
  start_with_manager_ = false;
}
inline bool ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_start_with_manager() const {
  return start_with_manager_;
}
inline bool ServerConfiguration_ManagerSettings_BuilderConfiguration::start_with_manager() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.start_with_manager)
  return _internal_start_with_manager();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_set_start_with_manager(bool value) {
  
  start_with_manager_ = value;
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_start_with_manager(bool value) {
  _internal_set_start_with_manager(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.start_with_manager)
}

// bool output_single_file = 4;
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::clear_output_single_file() {
  output_single_file_ = false;
}
inline bool ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_output_single_file() const {
  return output_single_file_;
}
inline bool ServerConfiguration_ManagerSettings_BuilderConfiguration::output_single_file() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.output_single_file)
  return _internal_output_single_file();
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::_internal_set_output_single_file(bool value) {
  
  output_single_file_ = value;
}
inline void ServerConfiguration_ManagerSettings_BuilderConfiguration::set_output_single_file(bool value) {
  _internal_set_output_single_file(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.output_single_file)
}

// -------------------------------------------------------------------

// ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost

// string hostname = 1;
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::hostname() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
  return _internal_hostname();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
}
inline std::string* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_hostname() const {
  return hostname_.Get();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
}
inline std::string* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::release_hostname() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname)
}

// .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.AuthType auth_type = 2;
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_auth_type() {
  auth_type_ = 0;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_auth_type() const {
  return static_cast< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType >(auth_type_);
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::auth_type() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_type)
  return _internal_auth_type();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_set_auth_type(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType value) {
  
  auth_type_ = value;
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_auth_type(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType value) {
  _internal_set_auth_type(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_type)
}

// .google.protobuf.StringValue username = 3;
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_has_username() const {
  return this != internal_default_instance() && username_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::has_username() const {
  return _internal_has_username();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_username() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = username_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::username() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.username)
  return _internal_username();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_set_allocated_username(
    PROTOBUF_NAMESPACE_ID::StringValue* username) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  username_ = username;
  if (username) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.username)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::release_username() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.username)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = username_;
  username_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_mutable_username() {
  
  if (username_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    username_ = p;
  }
  return username_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::mutable_username() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.username)
  return _internal_mutable_username();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_allocated_username(PROTOBUF_NAMESPACE_ID::StringValue* username) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(username_);
  }
  if (username) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(username)->GetArena();
    if (message_arena != submessage_arena) {
      username = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, username, submessage_arena);
    }
    
  } else {
    
  }
  username_ = username;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.username)
}

// .google.protobuf.StringValue password = 4;
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::has_password() const {
  return _internal_has_password();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_password() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = password_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::password() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.password)
  return _internal_password();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_set_allocated_password(
    PROTOBUF_NAMESPACE_ID::StringValue* password) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  password_ = password;
  if (password) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.password)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::release_password() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = password_;
  password_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.password)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = password_;
  password_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    password_ = p;
  }
  return password_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::mutable_password() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.password)
  return _internal_mutable_password();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_allocated_password(PROTOBUF_NAMESPACE_ID::StringValue* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password)->GetArena();
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.password)
}

// .google.protobuf.StringValue access_token = 5;
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_has_access_token() const {
  return this != internal_default_instance() && access_token_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::has_access_token() const {
  return _internal_has_access_token();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_access_token() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = access_token_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::access_token() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.access_token)
  return _internal_access_token();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_set_allocated_access_token(
    PROTOBUF_NAMESPACE_ID::StringValue* access_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_token_);
  }
  access_token_ = access_token;
  if (access_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.access_token)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::release_access_token() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = access_token_;
  access_token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_release_access_token() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.access_token)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = access_token_;
  access_token_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_mutable_access_token() {
  
  if (access_token_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    access_token_ = p;
  }
  return access_token_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::mutable_access_token() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.access_token)
  return _internal_mutable_access_token();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_allocated_access_token(PROTOBUF_NAMESPACE_ID::StringValue* access_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_token_);
  }
  if (access_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_token)->GetArena();
    if (message_arena != submessage_arena) {
      access_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_token, submessage_arena);
    }
    
  } else {
    
  }
  access_token_ = access_token;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.access_token)
}

// .google.protobuf.StringValue auth_endpoint = 6;
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_has_auth_endpoint() const {
  return this != internal_default_instance() && auth_endpoint_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::has_auth_endpoint() const {
  return _internal_has_auth_endpoint();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_auth_endpoint() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = auth_endpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::auth_endpoint() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_endpoint)
  return _internal_auth_endpoint();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_set_allocated_auth_endpoint(
    PROTOBUF_NAMESPACE_ID::StringValue* auth_endpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_endpoint_);
  }
  auth_endpoint_ = auth_endpoint;
  if (auth_endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_endpoint)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::release_auth_endpoint() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = auth_endpoint_;
  auth_endpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::unsafe_arena_release_auth_endpoint() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_endpoint)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = auth_endpoint_;
  auth_endpoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_internal_mutable_auth_endpoint() {
  
  if (auth_endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    auth_endpoint_ = p;
  }
  return auth_endpoint_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::mutable_auth_endpoint() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_endpoint)
  return _internal_mutable_auth_endpoint();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::set_allocated_auth_endpoint(PROTOBUF_NAMESPACE_ID::StringValue* auth_endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_endpoint_);
  }
  if (auth_endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_endpoint)->GetArena();
    if (message_arena != submessage_arena) {
      auth_endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_endpoint, submessage_arena);
    }
    
  } else {
    
  }
  auth_endpoint_ = auth_endpoint;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.auth_endpoint)
}

// -------------------------------------------------------------------

// ServerConfiguration_ManagerSettings_MqttSettings

// int32 max_buffer_size = 1;
inline void ServerConfiguration_ManagerSettings_MqttSettings::clear_max_buffer_size() {
  max_buffer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_ManagerSettings_MqttSettings::_internal_max_buffer_size() const {
  return max_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_ManagerSettings_MqttSettings::max_buffer_size() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.max_buffer_size)
  return _internal_max_buffer_size();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::_internal_set_max_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_buffer_size_ = value;
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::set_max_buffer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_buffer_size(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.max_buffer_size)
}

// .google.protobuf.StringValue mqtt_id = 2;
inline bool ServerConfiguration_ManagerSettings_MqttSettings::_internal_has_mqtt_id() const {
  return this != internal_default_instance() && mqtt_id_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings::has_mqtt_id() const {
  return _internal_has_mqtt_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings::_internal_mqtt_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = mqtt_id_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_ManagerSettings_MqttSettings::mqtt_id() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.mqtt_id)
  return _internal_mqtt_id();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_set_allocated_mqtt_id(
    PROTOBUF_NAMESPACE_ID::StringValue* mqtt_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mqtt_id_);
  }
  mqtt_id_ = mqtt_id;
  if (mqtt_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.mqtt_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings::release_mqtt_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = mqtt_id_;
  mqtt_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_release_mqtt_id() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.mqtt_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = mqtt_id_;
  mqtt_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings::_internal_mutable_mqtt_id() {
  
  if (mqtt_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    mqtt_id_ = p;
  }
  return mqtt_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_ManagerSettings_MqttSettings::mutable_mqtt_id() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.mqtt_id)
  return _internal_mutable_mqtt_id();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::set_allocated_mqtt_id(PROTOBUF_NAMESPACE_ID::StringValue* mqtt_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mqtt_id_);
  }
  if (mqtt_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mqtt_id)->GetArena();
    if (message_arena != submessage_arena) {
      mqtt_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mqtt_id, submessage_arena);
    }
    
  } else {
    
  }
  mqtt_id_ = mqtt_id;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.mqtt_id)
}

// .google.protobuf.BoolValue use_internal_broker = 3;
inline bool ServerConfiguration_ManagerSettings_MqttSettings::_internal_has_use_internal_broker() const {
  return this != internal_default_instance() && use_internal_broker_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings::has_use_internal_broker() const {
  return _internal_has_use_internal_broker();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings_MqttSettings::_internal_use_internal_broker() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = use_internal_broker_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings_MqttSettings::use_internal_broker() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_broker)
  return _internal_use_internal_broker();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_set_allocated_use_internal_broker(
    PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_broker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_broker_);
  }
  use_internal_broker_ = use_internal_broker;
  if (use_internal_broker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_broker)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::release_use_internal_broker() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = use_internal_broker_;
  use_internal_broker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_release_use_internal_broker() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_broker)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = use_internal_broker_;
  use_internal_broker_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::_internal_mutable_use_internal_broker() {
  
  if (use_internal_broker_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    use_internal_broker_ = p;
  }
  return use_internal_broker_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::mutable_use_internal_broker() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_broker)
  return _internal_mutable_use_internal_broker();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::set_allocated_use_internal_broker(PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_broker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_broker_);
  }
  if (use_internal_broker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_broker)->GetArena();
    if (message_arena != submessage_arena) {
      use_internal_broker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_internal_broker, submessage_arena);
    }
    
  } else {
    
  }
  use_internal_broker_ = use_internal_broker;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_broker)
}

// .google.protobuf.BoolValue use_internal_authentication = 4;
inline bool ServerConfiguration_ManagerSettings_MqttSettings::_internal_has_use_internal_authentication() const {
  return this != internal_default_instance() && use_internal_authentication_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings_MqttSettings::has_use_internal_authentication() const {
  return _internal_has_use_internal_authentication();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings_MqttSettings::_internal_use_internal_authentication() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = use_internal_authentication_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings_MqttSettings::use_internal_authentication() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_authentication)
  return _internal_use_internal_authentication();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_set_allocated_use_internal_authentication(
    PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_authentication) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_authentication_);
  }
  use_internal_authentication_ = use_internal_authentication;
  if (use_internal_authentication) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_authentication)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::release_use_internal_authentication() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = use_internal_authentication_;
  use_internal_authentication_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::unsafe_arena_release_use_internal_authentication() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_authentication)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = use_internal_authentication_;
  use_internal_authentication_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::_internal_mutable_use_internal_authentication() {
  
  if (use_internal_authentication_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    use_internal_authentication_ = p;
  }
  return use_internal_authentication_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings_MqttSettings::mutable_use_internal_authentication() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_authentication)
  return _internal_mutable_use_internal_authentication();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::set_allocated_use_internal_authentication(PROTOBUF_NAMESPACE_ID::BoolValue* use_internal_authentication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_authentication_);
  }
  if (use_internal_authentication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_internal_authentication)->GetArena();
    if (message_arena != submessage_arena) {
      use_internal_authentication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_internal_authentication, submessage_arena);
    }
    
  } else {
    
  }
  use_internal_authentication_ = use_internal_authentication;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.use_internal_authentication)
}

// repeated .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost web_hosts = 5;
inline int ServerConfiguration_ManagerSettings_MqttSettings::_internal_web_hosts_size() const {
  return web_hosts_.size();
}
inline int ServerConfiguration_ManagerSettings_MqttSettings::web_hosts_size() const {
  return _internal_web_hosts_size();
}
inline void ServerConfiguration_ManagerSettings_MqttSettings::clear_web_hosts() {
  web_hosts_.Clear();
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* ServerConfiguration_ManagerSettings_MqttSettings::mutable_web_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.web_hosts)
  return web_hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >*
ServerConfiguration_ManagerSettings_MqttSettings::mutable_web_hosts() {
  // @@protoc_insertion_point(field_mutable_list:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.web_hosts)
  return &web_hosts_;
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& ServerConfiguration_ManagerSettings_MqttSettings::_internal_web_hosts(int index) const {
  return web_hosts_.Get(index);
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& ServerConfiguration_ManagerSettings_MqttSettings::web_hosts(int index) const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.web_hosts)
  return _internal_web_hosts(index);
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* ServerConfiguration_ManagerSettings_MqttSettings::_internal_add_web_hosts() {
  return web_hosts_.Add();
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* ServerConfiguration_ManagerSettings_MqttSettings::add_web_hosts() {
  // @@protoc_insertion_point(field_add:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.web_hosts)
  return _internal_add_web_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >&
ServerConfiguration_ManagerSettings_MqttSettings::web_hosts() const {
  // @@protoc_insertion_point(field_list:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.web_hosts)
  return web_hosts_;
}

// -------------------------------------------------------------------

// ServerConfiguration_ManagerSettings

// int32 max_concurrent = 1;
inline void ServerConfiguration_ManagerSettings::clear_max_concurrent() {
  max_concurrent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_ManagerSettings::_internal_max_concurrent() const {
  return max_concurrent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_ManagerSettings::max_concurrent() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.max_concurrent)
  return _internal_max_concurrent();
}
inline void ServerConfiguration_ManagerSettings::_internal_set_max_concurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_concurrent_ = value;
}
inline void ServerConfiguration_ManagerSettings::set_max_concurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_concurrent(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.max_concurrent)
}

// bool restart_old = 2;
inline void ServerConfiguration_ManagerSettings::clear_restart_old() {
  restart_old_ = false;
}
inline bool ServerConfiguration_ManagerSettings::_internal_restart_old() const {
  return restart_old_;
}
inline bool ServerConfiguration_ManagerSettings::restart_old() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.restart_old)
  return _internal_restart_old();
}
inline void ServerConfiguration_ManagerSettings::_internal_set_restart_old(bool value) {
  
  restart_old_ = value;
}
inline void ServerConfiguration_ManagerSettings::set_restart_old(bool value) {
  _internal_set_restart_old(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.restart_old)
}

// string wise_location = 3;
inline void ServerConfiguration_ManagerSettings::clear_wise_location() {
  wise_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_ManagerSettings::wise_location() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
  return _internal_wise_location();
}
inline void ServerConfiguration_ManagerSettings::set_wise_location(const std::string& value) {
  _internal_set_wise_location(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
}
inline std::string* ServerConfiguration_ManagerSettings::mutable_wise_location() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
  return _internal_mutable_wise_location();
}
inline const std::string& ServerConfiguration_ManagerSettings::_internal_wise_location() const {
  return wise_location_.Get();
}
inline void ServerConfiguration_ManagerSettings::_internal_set_wise_location(const std::string& value) {
  
  wise_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_ManagerSettings::set_wise_location(std::string&& value) {
  
  wise_location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
}
inline void ServerConfiguration_ManagerSettings::set_wise_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wise_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
}
inline void ServerConfiguration_ManagerSettings::set_wise_location(const char* value,
    size_t size) {
  
  wise_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
}
inline std::string* ServerConfiguration_ManagerSettings::_internal_mutable_wise_location() {
  
  return wise_location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_ManagerSettings::release_wise_location() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
  return wise_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_ManagerSettings::set_allocated_wise_location(std::string* wise_location) {
  if (wise_location != nullptr) {
    
  } else {
    
  }
  wise_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wise_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.wise_location)
}

// bool lock_cpu = 4;
inline void ServerConfiguration_ManagerSettings::clear_lock_cpu() {
  lock_cpu_ = false;
}
inline bool ServerConfiguration_ManagerSettings::_internal_lock_cpu() const {
  return lock_cpu_;
}
inline bool ServerConfiguration_ManagerSettings::lock_cpu() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.lock_cpu)
  return _internal_lock_cpu();
}
inline void ServerConfiguration_ManagerSettings::_internal_set_lock_cpu(bool value) {
  
  lock_cpu_ = value;
}
inline void ServerConfiguration_ManagerSettings::set_lock_cpu(bool value) {
  _internal_set_lock_cpu(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.lock_cpu)
}

// bool start_paused = 5;
inline void ServerConfiguration_ManagerSettings::clear_start_paused() {
  start_paused_ = false;
}
inline bool ServerConfiguration_ManagerSettings::_internal_start_paused() const {
  return start_paused_;
}
inline bool ServerConfiguration_ManagerSettings::start_paused() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.start_paused)
  return _internal_start_paused();
}
inline void ServerConfiguration_ManagerSettings::_internal_set_start_paused(bool value) {
  
  start_paused_ = value;
}
inline void ServerConfiguration_ManagerSettings::set_start_paused(bool value) {
  _internal_set_start_paused(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.ManagerSettings.start_paused)
}

// .wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration internal_builder = 6;
inline bool ServerConfiguration_ManagerSettings::_internal_has_internal_builder() const {
  return this != internal_default_instance() && internal_builder_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_internal_builder() const {
  return _internal_has_internal_builder();
}
inline void ServerConfiguration_ManagerSettings::clear_internal_builder() {
  if (GetArena() == nullptr && internal_builder_ != nullptr) {
    delete internal_builder_;
  }
  internal_builder_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration& ServerConfiguration_ManagerSettings::_internal_internal_builder() const {
  const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* p = internal_builder_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration*>(
      &::wise::confic::_ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration& ServerConfiguration_ManagerSettings::internal_builder() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.internal_builder)
  return _internal_internal_builder();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_internal_builder(
    ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_builder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_builder_);
  }
  internal_builder_ = internal_builder;
  if (internal_builder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.internal_builder)
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* ServerConfiguration_ManagerSettings::release_internal_builder() {
  
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* temp = internal_builder_;
  internal_builder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* ServerConfiguration_ManagerSettings::unsafe_arena_release_internal_builder() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.internal_builder)
  
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* temp = internal_builder_;
  internal_builder_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* ServerConfiguration_ManagerSettings::_internal_mutable_internal_builder() {
  
  if (internal_builder_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration>(GetArena());
    internal_builder_ = p;
  }
  return internal_builder_;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* ServerConfiguration_ManagerSettings::mutable_internal_builder() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.internal_builder)
  return _internal_mutable_internal_builder();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_internal_builder(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* internal_builder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete internal_builder_;
  }
  if (internal_builder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(internal_builder);
    if (message_arena != submessage_arena) {
      internal_builder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_builder, submessage_arena);
    }
    
  } else {
    
  }
  internal_builder_ = internal_builder;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.internal_builder)
}

// .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings mqtt_settings = 7;
inline bool ServerConfiguration_ManagerSettings::_internal_has_mqtt_settings() const {
  return this != internal_default_instance() && mqtt_settings_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_mqtt_settings() const {
  return _internal_has_mqtt_settings();
}
inline void ServerConfiguration_ManagerSettings::clear_mqtt_settings() {
  if (GetArena() == nullptr && mqtt_settings_ != nullptr) {
    delete mqtt_settings_;
  }
  mqtt_settings_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings& ServerConfiguration_ManagerSettings::_internal_mqtt_settings() const {
  const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* p = mqtt_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings*>(
      &::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings& ServerConfiguration_ManagerSettings::mqtt_settings() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.mqtt_settings)
  return _internal_mqtt_settings();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_mqtt_settings(
    ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mqtt_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mqtt_settings_);
  }
  mqtt_settings_ = mqtt_settings;
  if (mqtt_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.mqtt_settings)
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* ServerConfiguration_ManagerSettings::release_mqtt_settings() {
  
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* temp = mqtt_settings_;
  mqtt_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* ServerConfiguration_ManagerSettings::unsafe_arena_release_mqtt_settings() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.mqtt_settings)
  
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* temp = mqtt_settings_;
  mqtt_settings_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* ServerConfiguration_ManagerSettings::_internal_mutable_mqtt_settings() {
  
  if (mqtt_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings>(GetArena());
    mqtt_settings_ = p;
  }
  return mqtt_settings_;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* ServerConfiguration_ManagerSettings::mutable_mqtt_settings() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.mqtt_settings)
  return _internal_mutable_mqtt_settings();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_mqtt_settings(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* mqtt_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mqtt_settings_;
  }
  if (mqtt_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mqtt_settings);
    if (message_arena != submessage_arena) {
      mqtt_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mqtt_settings, submessage_arena);
    }
    
  } else {
    
  }
  mqtt_settings_ = mqtt_settings;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.mqtt_settings)
}

// .google.protobuf.BoolValue numa_lock = 8;
inline bool ServerConfiguration_ManagerSettings::_internal_has_numa_lock() const {
  return this != internal_default_instance() && numa_lock_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_numa_lock() const {
  return _internal_has_numa_lock();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::_internal_numa_lock() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = numa_lock_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::numa_lock() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.numa_lock)
  return _internal_numa_lock();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_numa_lock(
    PROTOBUF_NAMESPACE_ID::BoolValue* numa_lock) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numa_lock_);
  }
  numa_lock_ = numa_lock;
  if (numa_lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.numa_lock)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::release_numa_lock() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = numa_lock_;
  numa_lock_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::unsafe_arena_release_numa_lock() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.numa_lock)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = numa_lock_;
  numa_lock_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::_internal_mutable_numa_lock() {
  
  if (numa_lock_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    numa_lock_ = p;
  }
  return numa_lock_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::mutable_numa_lock() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.numa_lock)
  return _internal_mutable_numa_lock();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_numa_lock(PROTOBUF_NAMESPACE_ID::BoolValue* numa_lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(numa_lock_);
  }
  if (numa_lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numa_lock)->GetArena();
    if (message_arena != submessage_arena) {
      numa_lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numa_lock, submessage_arena);
    }
    
  } else {
    
  }
  numa_lock_ = numa_lock;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.numa_lock)
}

// .google.protobuf.Int32Value skip_cores = 9;
inline bool ServerConfiguration_ManagerSettings::_internal_has_skip_cores() const {
  return this != internal_default_instance() && skip_cores_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_skip_cores() const {
  return _internal_has_skip_cores();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_ManagerSettings::_internal_skip_cores() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = skip_cores_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_ManagerSettings::skip_cores() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.skip_cores)
  return _internal_skip_cores();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_skip_cores(
    PROTOBUF_NAMESPACE_ID::Int32Value* skip_cores) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_cores_);
  }
  skip_cores_ = skip_cores;
  if (skip_cores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.skip_cores)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::release_skip_cores() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = skip_cores_;
  skip_cores_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::unsafe_arena_release_skip_cores() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.skip_cores)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = skip_cores_;
  skip_cores_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::_internal_mutable_skip_cores() {
  
  if (skip_cores_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    skip_cores_ = p;
  }
  return skip_cores_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::mutable_skip_cores() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.skip_cores)
  return _internal_mutable_skip_cores();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_skip_cores(PROTOBUF_NAMESPACE_ID::Int32Value* skip_cores) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_cores_);
  }
  if (skip_cores) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_cores)->GetArena();
    if (message_arena != submessage_arena) {
      skip_cores = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_cores, submessage_arena);
    }
    
  } else {
    
  }
  skip_cores_ = skip_cores;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.skip_cores)
}

// .wise.confic.ServerConfiguration.RpcConfiguration rpc_settings = 10;
inline bool ServerConfiguration_ManagerSettings::_internal_has_rpc_settings() const {
  return this != internal_default_instance() && rpc_settings_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_rpc_settings() const {
  return _internal_has_rpc_settings();
}
inline void ServerConfiguration_ManagerSettings::clear_rpc_settings() {
  if (GetArena() == nullptr && rpc_settings_ != nullptr) {
    delete rpc_settings_;
  }
  rpc_settings_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_RpcConfiguration& ServerConfiguration_ManagerSettings::_internal_rpc_settings() const {
  const ::wise::confic::ServerConfiguration_RpcConfiguration* p = rpc_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_RpcConfiguration*>(
      &::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_RpcConfiguration& ServerConfiguration_ManagerSettings::rpc_settings() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.rpc_settings)
  return _internal_rpc_settings();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_rpc_settings(
    ::wise::confic::ServerConfiguration_RpcConfiguration* rpc_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_settings_);
  }
  rpc_settings_ = rpc_settings;
  if (rpc_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.rpc_settings)
}
inline ::wise::confic::ServerConfiguration_RpcConfiguration* ServerConfiguration_ManagerSettings::release_rpc_settings() {
  
  ::wise::confic::ServerConfiguration_RpcConfiguration* temp = rpc_settings_;
  rpc_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_RpcConfiguration* ServerConfiguration_ManagerSettings::unsafe_arena_release_rpc_settings() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.rpc_settings)
  
  ::wise::confic::ServerConfiguration_RpcConfiguration* temp = rpc_settings_;
  rpc_settings_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_RpcConfiguration* ServerConfiguration_ManagerSettings::_internal_mutable_rpc_settings() {
  
  if (rpc_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_RpcConfiguration>(GetArena());
    rpc_settings_ = p;
  }
  return rpc_settings_;
}
inline ::wise::confic::ServerConfiguration_RpcConfiguration* ServerConfiguration_ManagerSettings::mutable_rpc_settings() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.rpc_settings)
  return _internal_mutable_rpc_settings();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_rpc_settings(::wise::confic::ServerConfiguration_RpcConfiguration* rpc_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rpc_settings_;
  }
  if (rpc_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rpc_settings);
    if (message_arena != submessage_arena) {
      rpc_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_settings, submessage_arena);
    }
    
  } else {
    
  }
  rpc_settings_ = rpc_settings;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.rpc_settings)
}

// .google.protobuf.BoolValue respect_shmem = 11;
inline bool ServerConfiguration_ManagerSettings::_internal_has_respect_shmem() const {
  return this != internal_default_instance() && respect_shmem_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_respect_shmem() const {
  return _internal_has_respect_shmem();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::_internal_respect_shmem() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = respect_shmem_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::respect_shmem() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.respect_shmem)
  return _internal_respect_shmem();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_respect_shmem(
    PROTOBUF_NAMESPACE_ID::BoolValue* respect_shmem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respect_shmem_);
  }
  respect_shmem_ = respect_shmem;
  if (respect_shmem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.respect_shmem)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::release_respect_shmem() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = respect_shmem_;
  respect_shmem_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::unsafe_arena_release_respect_shmem() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.respect_shmem)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = respect_shmem_;
  respect_shmem_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::_internal_mutable_respect_shmem() {
  
  if (respect_shmem_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    respect_shmem_ = p;
  }
  return respect_shmem_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::mutable_respect_shmem() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.respect_shmem)
  return _internal_mutable_respect_shmem();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_respect_shmem(PROTOBUF_NAMESPACE_ID::BoolValue* respect_shmem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respect_shmem_);
  }
  if (respect_shmem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respect_shmem)->GetArena();
    if (message_arena != submessage_arena) {
      respect_shmem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respect_shmem, submessage_arena);
    }
    
  } else {
    
  }
  respect_shmem_ = respect_shmem;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.respect_shmem)
}

// .google.protobuf.BoolValue display_status = 12;
inline bool ServerConfiguration_ManagerSettings::_internal_has_display_status() const {
  return this != internal_default_instance() && display_status_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_display_status() const {
  return _internal_has_display_status();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::_internal_display_status() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = display_status_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::display_status() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.display_status)
  return _internal_display_status();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_display_status(
    PROTOBUF_NAMESPACE_ID::BoolValue* display_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_status_);
  }
  display_status_ = display_status;
  if (display_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.display_status)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::release_display_status() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = display_status_;
  display_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::unsafe_arena_release_display_status() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.display_status)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = display_status_;
  display_status_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::_internal_mutable_display_status() {
  
  if (display_status_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    display_status_ = p;
  }
  return display_status_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::mutable_display_status() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.display_status)
  return _internal_mutable_display_status();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_display_status(PROTOBUF_NAMESPACE_ID::BoolValue* display_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_status_);
  }
  if (display_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_status)->GetArena();
    if (message_arena != submessage_arena) {
      display_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_status, submessage_arena);
    }
    
  } else {
    
  }
  display_status_ = display_status;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.display_status)
}

// .google.protobuf.BoolValue listen_balance = 13;
inline bool ServerConfiguration_ManagerSettings::_internal_has_listen_balance() const {
  return this != internal_default_instance() && listen_balance_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_listen_balance() const {
  return _internal_has_listen_balance();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::_internal_listen_balance() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = listen_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration_ManagerSettings::listen_balance() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.listen_balance)
  return _internal_listen_balance();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_listen_balance(
    PROTOBUF_NAMESPACE_ID::BoolValue* listen_balance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listen_balance_);
  }
  listen_balance_ = listen_balance;
  if (listen_balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.listen_balance)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::release_listen_balance() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = listen_balance_;
  listen_balance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::unsafe_arena_release_listen_balance() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.listen_balance)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = listen_balance_;
  listen_balance_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::_internal_mutable_listen_balance() {
  
  if (listen_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    listen_balance_ = p;
  }
  return listen_balance_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration_ManagerSettings::mutable_listen_balance() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.listen_balance)
  return _internal_mutable_listen_balance();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_listen_balance(PROTOBUF_NAMESPACE_ID::BoolValue* listen_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(listen_balance_);
  }
  if (listen_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(listen_balance)->GetArena();
    if (message_arena != submessage_arena) {
      listen_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, listen_balance, submessage_arena);
    }
    
  } else {
    
  }
  listen_balance_ = listen_balance;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.listen_balance)
}

// .google.protobuf.Int32Value export_thread_fraction = 14;
inline bool ServerConfiguration_ManagerSettings::_internal_has_export_thread_fraction() const {
  return this != internal_default_instance() && export_thread_fraction_ != nullptr;
}
inline bool ServerConfiguration_ManagerSettings::has_export_thread_fraction() const {
  return _internal_has_export_thread_fraction();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_ManagerSettings::_internal_export_thread_fraction() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = export_thread_fraction_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_ManagerSettings::export_thread_fraction() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.ManagerSettings.export_thread_fraction)
  return _internal_export_thread_fraction();
}
inline void ServerConfiguration_ManagerSettings::unsafe_arena_set_allocated_export_thread_fraction(
    PROTOBUF_NAMESPACE_ID::Int32Value* export_thread_fraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_thread_fraction_);
  }
  export_thread_fraction_ = export_thread_fraction;
  if (export_thread_fraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.export_thread_fraction)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::release_export_thread_fraction() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = export_thread_fraction_;
  export_thread_fraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::unsafe_arena_release_export_thread_fraction() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.ManagerSettings.export_thread_fraction)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = export_thread_fraction_;
  export_thread_fraction_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::_internal_mutable_export_thread_fraction() {
  
  if (export_thread_fraction_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    export_thread_fraction_ = p;
  }
  return export_thread_fraction_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_ManagerSettings::mutable_export_thread_fraction() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.ManagerSettings.export_thread_fraction)
  return _internal_mutable_export_thread_fraction();
}
inline void ServerConfiguration_ManagerSettings::set_allocated_export_thread_fraction(PROTOBUF_NAMESPACE_ID::Int32Value* export_thread_fraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_thread_fraction_);
  }
  if (export_thread_fraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(export_thread_fraction)->GetArena();
    if (message_arena != submessage_arena) {
      export_thread_fraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, export_thread_fraction, submessage_arena);
    }
    
  } else {
    
  }
  export_thread_fraction_ = export_thread_fraction;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.ManagerSettings.export_thread_fraction)
}

// -------------------------------------------------------------------

// ServerConfiguration_RpcConfiguration

// bool enabled = 1;
inline void ServerConfiguration_RpcConfiguration::clear_enabled() {
  enabled_ = false;
}
inline bool ServerConfiguration_RpcConfiguration::_internal_enabled() const {
  return enabled_;
}
inline bool ServerConfiguration_RpcConfiguration::enabled() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.enabled)
  return _internal_enabled();
}
inline void ServerConfiguration_RpcConfiguration::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void ServerConfiguration_RpcConfiguration::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.RpcConfiguration.enabled)
}

// string externalAddress = 2;
inline void ServerConfiguration_RpcConfiguration::clear_externaladdress() {
  externaladdress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration_RpcConfiguration::externaladdress() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
  return _internal_externaladdress();
}
inline void ServerConfiguration_RpcConfiguration::set_externaladdress(const std::string& value) {
  _internal_set_externaladdress(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
}
inline std::string* ServerConfiguration_RpcConfiguration::mutable_externaladdress() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
  return _internal_mutable_externaladdress();
}
inline const std::string& ServerConfiguration_RpcConfiguration::_internal_externaladdress() const {
  return externaladdress_.Get();
}
inline void ServerConfiguration_RpcConfiguration::_internal_set_externaladdress(const std::string& value) {
  
  externaladdress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration_RpcConfiguration::set_externaladdress(std::string&& value) {
  
  externaladdress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
}
inline void ServerConfiguration_RpcConfiguration::set_externaladdress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  externaladdress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
}
inline void ServerConfiguration_RpcConfiguration::set_externaladdress(const char* value,
    size_t size) {
  
  externaladdress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
}
inline std::string* ServerConfiguration_RpcConfiguration::_internal_mutable_externaladdress() {
  
  return externaladdress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration_RpcConfiguration::release_externaladdress() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
  return externaladdress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration_RpcConfiguration::set_allocated_externaladdress(std::string* externaladdress) {
  if (externaladdress != nullptr) {
    
  } else {
    
  }
  externaladdress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), externaladdress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.externalAddress)
}

// int32 port = 3;
inline void ServerConfiguration_RpcConfiguration::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_RpcConfiguration::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerConfiguration_RpcConfiguration::port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.port)
  return _internal_port();
}
inline void ServerConfiguration_RpcConfiguration::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServerConfiguration_RpcConfiguration::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.RpcConfiguration.port)
}

// .google.protobuf.StringValue internal_address = 4;
inline bool ServerConfiguration_RpcConfiguration::_internal_has_internal_address() const {
  return this != internal_default_instance() && internal_address_ != nullptr;
}
inline bool ServerConfiguration_RpcConfiguration::has_internal_address() const {
  return _internal_has_internal_address();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_RpcConfiguration::_internal_internal_address() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = internal_address_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue*>(
      &PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ServerConfiguration_RpcConfiguration::internal_address() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.internal_address)
  return _internal_internal_address();
}
inline void ServerConfiguration_RpcConfiguration::unsafe_arena_set_allocated_internal_address(
    PROTOBUF_NAMESPACE_ID::StringValue* internal_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_address_);
  }
  internal_address_ = internal_address;
  if (internal_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.internal_address)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_RpcConfiguration::release_internal_address() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = internal_address_;
  internal_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_RpcConfiguration::unsafe_arena_release_internal_address() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.RpcConfiguration.internal_address)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = internal_address_;
  internal_address_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_RpcConfiguration::_internal_mutable_internal_address() {
  
  if (internal_address_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    internal_address_ = p;
  }
  return internal_address_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ServerConfiguration_RpcConfiguration::mutable_internal_address() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.RpcConfiguration.internal_address)
  return _internal_mutable_internal_address();
}
inline void ServerConfiguration_RpcConfiguration::set_allocated_internal_address(PROTOBUF_NAMESPACE_ID::StringValue* internal_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_address_);
  }
  if (internal_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_address)->GetArena();
    if (message_arena != submessage_arena) {
      internal_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_address, submessage_arena);
    }
    
  } else {
    
  }
  internal_address_ = internal_address;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.internal_address)
}

// .google.protobuf.Int32Value external_port = 5;
inline bool ServerConfiguration_RpcConfiguration::_internal_has_external_port() const {
  return this != internal_default_instance() && external_port_ != nullptr;
}
inline bool ServerConfiguration_RpcConfiguration::has_external_port() const {
  return _internal_has_external_port();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_RpcConfiguration::_internal_external_port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = external_port_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_RpcConfiguration::external_port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.external_port)
  return _internal_external_port();
}
inline void ServerConfiguration_RpcConfiguration::unsafe_arena_set_allocated_external_port(
    PROTOBUF_NAMESPACE_ID::Int32Value* external_port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port_);
  }
  external_port_ = external_port;
  if (external_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.external_port)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::release_external_port() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = external_port_;
  external_port_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::unsafe_arena_release_external_port() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.RpcConfiguration.external_port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = external_port_;
  external_port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::_internal_mutable_external_port() {
  
  if (external_port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    external_port_ = p;
  }
  return external_port_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::mutable_external_port() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.RpcConfiguration.external_port)
  return _internal_mutable_external_port();
}
inline void ServerConfiguration_RpcConfiguration::set_allocated_external_port(PROTOBUF_NAMESPACE_ID::Int32Value* external_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port_);
  }
  if (external_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port)->GetArena();
    if (message_arena != submessage_arena) {
      external_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_port, submessage_arena);
    }
    
  } else {
    
  }
  external_port_ = external_port;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.external_port)
}

// .google.protobuf.Int32Value internal_port = 6;
inline bool ServerConfiguration_RpcConfiguration::_internal_has_internal_port() const {
  return this != internal_default_instance() && internal_port_ != nullptr;
}
inline bool ServerConfiguration_RpcConfiguration::has_internal_port() const {
  return _internal_has_internal_port();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_RpcConfiguration::_internal_internal_port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = internal_port_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& ServerConfiguration_RpcConfiguration::internal_port() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.RpcConfiguration.internal_port)
  return _internal_internal_port();
}
inline void ServerConfiguration_RpcConfiguration::unsafe_arena_set_allocated_internal_port(
    PROTOBUF_NAMESPACE_ID::Int32Value* internal_port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_port_);
  }
  internal_port_ = internal_port;
  if (internal_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.internal_port)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::release_internal_port() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = internal_port_;
  internal_port_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::unsafe_arena_release_internal_port() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.RpcConfiguration.internal_port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = internal_port_;
  internal_port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::_internal_mutable_internal_port() {
  
  if (internal_port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    internal_port_ = p;
  }
  return internal_port_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* ServerConfiguration_RpcConfiguration::mutable_internal_port() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.RpcConfiguration.internal_port)
  return _internal_mutable_internal_port();
}
inline void ServerConfiguration_RpcConfiguration::set_allocated_internal_port(PROTOBUF_NAMESPACE_ID::Int32Value* internal_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_port_);
  }
  if (internal_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(internal_port)->GetArena();
    if (message_arena != submessage_arena) {
      internal_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_port, submessage_arena);
    }
    
  } else {
    
  }
  internal_port_ = internal_port;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.RpcConfiguration.internal_port)
}

// -------------------------------------------------------------------

// ServerConfiguration

// .wise.confic.ServerConfiguration.LogFile log = 1;
inline bool ServerConfiguration::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool ServerConfiguration::has_log() const {
  return _internal_has_log();
}
inline void ServerConfiguration::clear_log() {
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_LogFile& ServerConfiguration::_internal_log() const {
  const ::wise::confic::ServerConfiguration_LogFile* p = log_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_LogFile*>(
      &::wise::confic::_ServerConfiguration_LogFile_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_LogFile& ServerConfiguration::log() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.log)
  return _internal_log();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_log(
    ::wise::confic::ServerConfiguration_LogFile* log) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_);
  }
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.log)
}
inline ::wise::confic::ServerConfiguration_LogFile* ServerConfiguration::release_log() {
  
  ::wise::confic::ServerConfiguration_LogFile* temp = log_;
  log_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_LogFile* ServerConfiguration::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.log)
  
  ::wise::confic::ServerConfiguration_LogFile* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_LogFile* ServerConfiguration::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_LogFile>(GetArena());
    log_ = p;
  }
  return log_;
}
inline ::wise::confic::ServerConfiguration_LogFile* ServerConfiguration::mutable_log() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.log)
  return _internal_mutable_log();
}
inline void ServerConfiguration::set_allocated_log(::wise::confic::ServerConfiguration_LogFile* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.log)
}

// .wise.confic.ServerConfiguration.Signals signals = 2;
inline bool ServerConfiguration::_internal_has_signals() const {
  return this != internal_default_instance() && signals_ != nullptr;
}
inline bool ServerConfiguration::has_signals() const {
  return _internal_has_signals();
}
inline void ServerConfiguration::clear_signals() {
  if (GetArena() == nullptr && signals_ != nullptr) {
    delete signals_;
  }
  signals_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_Signals& ServerConfiguration::_internal_signals() const {
  const ::wise::confic::ServerConfiguration_Signals* p = signals_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_Signals*>(
      &::wise::confic::_ServerConfiguration_Signals_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_Signals& ServerConfiguration::signals() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.signals)
  return _internal_signals();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_signals(
    ::wise::confic::ServerConfiguration_Signals* signals) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signals_);
  }
  signals_ = signals;
  if (signals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.signals)
}
inline ::wise::confic::ServerConfiguration_Signals* ServerConfiguration::release_signals() {
  
  ::wise::confic::ServerConfiguration_Signals* temp = signals_;
  signals_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_Signals* ServerConfiguration::unsafe_arena_release_signals() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.signals)
  
  ::wise::confic::ServerConfiguration_Signals* temp = signals_;
  signals_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_Signals* ServerConfiguration::_internal_mutable_signals() {
  
  if (signals_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_Signals>(GetArena());
    signals_ = p;
  }
  return signals_;
}
inline ::wise::confic::ServerConfiguration_Signals* ServerConfiguration::mutable_signals() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.signals)
  return _internal_mutable_signals();
}
inline void ServerConfiguration::set_allocated_signals(::wise::confic::ServerConfiguration_Signals* signals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signals_;
  }
  if (signals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signals);
    if (message_arena != submessage_arena) {
      signals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signals, submessage_arena);
    }
    
  } else {
    
  }
  signals_ = signals;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.signals)
}

// .wise.confic.ServerConfiguration.Hardware hardware = 3;
inline bool ServerConfiguration::_internal_has_hardware() const {
  return this != internal_default_instance() && hardware_ != nullptr;
}
inline bool ServerConfiguration::has_hardware() const {
  return _internal_has_hardware();
}
inline void ServerConfiguration::clear_hardware() {
  if (GetArena() == nullptr && hardware_ != nullptr) {
    delete hardware_;
  }
  hardware_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_Hardware& ServerConfiguration::_internal_hardware() const {
  const ::wise::confic::ServerConfiguration_Hardware* p = hardware_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_Hardware*>(
      &::wise::confic::_ServerConfiguration_Hardware_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_Hardware& ServerConfiguration::hardware() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.hardware)
  return _internal_hardware();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_hardware(
    ::wise::confic::ServerConfiguration_Hardware* hardware) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hardware_);
  }
  hardware_ = hardware;
  if (hardware) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.hardware)
}
inline ::wise::confic::ServerConfiguration_Hardware* ServerConfiguration::release_hardware() {
  
  ::wise::confic::ServerConfiguration_Hardware* temp = hardware_;
  hardware_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_Hardware* ServerConfiguration::unsafe_arena_release_hardware() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.hardware)
  
  ::wise::confic::ServerConfiguration_Hardware* temp = hardware_;
  hardware_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_Hardware* ServerConfiguration::_internal_mutable_hardware() {
  
  if (hardware_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_Hardware>(GetArena());
    hardware_ = p;
  }
  return hardware_;
}
inline ::wise::confic::ServerConfiguration_Hardware* ServerConfiguration::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.hardware)
  return _internal_mutable_hardware();
}
inline void ServerConfiguration::set_allocated_hardware(::wise::confic::ServerConfiguration_Hardware* hardware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hardware_;
  }
  if (hardware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hardware);
    if (message_arena != submessage_arena) {
      hardware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hardware, submessage_arena);
    }
    
  } else {
    
  }
  hardware_ = hardware;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.hardware)
}

// .wise.confic.ServerConfiguration.SocketConnection socket = 4;
inline bool ServerConfiguration::_internal_has_socket() const {
  return commsType_case() == kSocket;
}
inline bool ServerConfiguration::has_socket() const {
  return _internal_has_socket();
}
inline void ServerConfiguration::set_has_socket() {
  _oneof_case_[0] = kSocket;
}
inline void ServerConfiguration::clear_socket() {
  if (_internal_has_socket()) {
    if (GetArena() == nullptr) {
      delete commsType_.socket_;
    }
    clear_has_commsType();
  }
}
inline ::wise::confic::ServerConfiguration_SocketConnection* ServerConfiguration::release_socket() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.socket)
  if (_internal_has_socket()) {
    clear_has_commsType();
      ::wise::confic::ServerConfiguration_SocketConnection* temp = commsType_.socket_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    commsType_.socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wise::confic::ServerConfiguration_SocketConnection& ServerConfiguration::_internal_socket() const {
  return _internal_has_socket()
      ? *commsType_.socket_
      : *reinterpret_cast< ::wise::confic::ServerConfiguration_SocketConnection*>(&::wise::confic::_ServerConfiguration_SocketConnection_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_SocketConnection& ServerConfiguration::socket() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.socket)
  return _internal_socket();
}
inline ::wise::confic::ServerConfiguration_SocketConnection* ServerConfiguration::unsafe_arena_release_socket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wise.confic.ServerConfiguration.socket)
  if (_internal_has_socket()) {
    clear_has_commsType();
    ::wise::confic::ServerConfiguration_SocketConnection* temp = commsType_.socket_;
    commsType_.socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerConfiguration::unsafe_arena_set_allocated_socket(::wise::confic::ServerConfiguration_SocketConnection* socket) {
  clear_commsType();
  if (socket) {
    set_has_socket();
    commsType_.socket_ = socket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.socket)
}
inline ::wise::confic::ServerConfiguration_SocketConnection* ServerConfiguration::_internal_mutable_socket() {
  if (!_internal_has_socket()) {
    clear_commsType();
    set_has_socket();
    commsType_.socket_ = CreateMaybeMessage< ::wise::confic::ServerConfiguration_SocketConnection >(GetArena());
  }
  return commsType_.socket_;
}
inline ::wise::confic::ServerConfiguration_SocketConnection* ServerConfiguration::mutable_socket() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.socket)
  return _internal_mutable_socket();
}

// .wise.confic.ServerConfiguration.MqttConnection mqtt = 5;
inline bool ServerConfiguration::_internal_has_mqtt() const {
  return commsType_case() == kMqtt;
}
inline bool ServerConfiguration::has_mqtt() const {
  return _internal_has_mqtt();
}
inline void ServerConfiguration::set_has_mqtt() {
  _oneof_case_[0] = kMqtt;
}
inline void ServerConfiguration::clear_mqtt() {
  if (_internal_has_mqtt()) {
    if (GetArena() == nullptr) {
      delete commsType_.mqtt_;
    }
    clear_has_commsType();
  }
}
inline ::wise::confic::ServerConfiguration_MqttConnection* ServerConfiguration::release_mqtt() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.mqtt)
  if (_internal_has_mqtt()) {
    clear_has_commsType();
      ::wise::confic::ServerConfiguration_MqttConnection* temp = commsType_.mqtt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    commsType_.mqtt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wise::confic::ServerConfiguration_MqttConnection& ServerConfiguration::_internal_mqtt() const {
  return _internal_has_mqtt()
      ? *commsType_.mqtt_
      : *reinterpret_cast< ::wise::confic::ServerConfiguration_MqttConnection*>(&::wise::confic::_ServerConfiguration_MqttConnection_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_MqttConnection& ServerConfiguration::mqtt() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.mqtt)
  return _internal_mqtt();
}
inline ::wise::confic::ServerConfiguration_MqttConnection* ServerConfiguration::unsafe_arena_release_mqtt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wise.confic.ServerConfiguration.mqtt)
  if (_internal_has_mqtt()) {
    clear_has_commsType();
    ::wise::confic::ServerConfiguration_MqttConnection* temp = commsType_.mqtt_;
    commsType_.mqtt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerConfiguration::unsafe_arena_set_allocated_mqtt(::wise::confic::ServerConfiguration_MqttConnection* mqtt) {
  clear_commsType();
  if (mqtt) {
    set_has_mqtt();
    commsType_.mqtt_ = mqtt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.mqtt)
}
inline ::wise::confic::ServerConfiguration_MqttConnection* ServerConfiguration::_internal_mutable_mqtt() {
  if (!_internal_has_mqtt()) {
    clear_commsType();
    set_has_mqtt();
    commsType_.mqtt_ = CreateMaybeMessage< ::wise::confic::ServerConfiguration_MqttConnection >(GetArena());
  }
  return commsType_.mqtt_;
}
inline ::wise::confic::ServerConfiguration_MqttConnection* ServerConfiguration::mutable_mqtt() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.mqtt)
  return _internal_mutable_mqtt();
}

// .wise.confic.ServerConfiguration.BuilderConnection builder = 6;
inline bool ServerConfiguration::_internal_has_builder() const {
  return this != internal_default_instance() && builder_ != nullptr;
}
inline bool ServerConfiguration::has_builder() const {
  return _internal_has_builder();
}
inline void ServerConfiguration::clear_builder() {
  if (GetArena() == nullptr && builder_ != nullptr) {
    delete builder_;
  }
  builder_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_BuilderConnection& ServerConfiguration::_internal_builder() const {
  const ::wise::confic::ServerConfiguration_BuilderConnection* p = builder_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_BuilderConnection*>(
      &::wise::confic::_ServerConfiguration_BuilderConnection_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_BuilderConnection& ServerConfiguration::builder() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.builder)
  return _internal_builder();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_builder(
    ::wise::confic::ServerConfiguration_BuilderConnection* builder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(builder_);
  }
  builder_ = builder;
  if (builder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.builder)
}
inline ::wise::confic::ServerConfiguration_BuilderConnection* ServerConfiguration::release_builder() {
  
  ::wise::confic::ServerConfiguration_BuilderConnection* temp = builder_;
  builder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_BuilderConnection* ServerConfiguration::unsafe_arena_release_builder() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.builder)
  
  ::wise::confic::ServerConfiguration_BuilderConnection* temp = builder_;
  builder_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_BuilderConnection* ServerConfiguration::_internal_mutable_builder() {
  
  if (builder_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_BuilderConnection>(GetArena());
    builder_ = p;
  }
  return builder_;
}
inline ::wise::confic::ServerConfiguration_BuilderConnection* ServerConfiguration::mutable_builder() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.builder)
  return _internal_mutable_builder();
}
inline void ServerConfiguration::set_allocated_builder(::wise::confic::ServerConfiguration_BuilderConnection* builder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete builder_;
  }
  if (builder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(builder);
    if (message_arena != submessage_arena) {
      builder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, builder, submessage_arena);
    }
    
  } else {
    
  }
  builder_ = builder;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.builder)
}

// string exampleDirectory = 7;
inline void ServerConfiguration::clear_exampledirectory() {
  exampledirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerConfiguration::exampledirectory() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.exampleDirectory)
  return _internal_exampledirectory();
}
inline void ServerConfiguration::set_exampledirectory(const std::string& value) {
  _internal_set_exampledirectory(value);
  // @@protoc_insertion_point(field_set:wise.confic.ServerConfiguration.exampleDirectory)
}
inline std::string* ServerConfiguration::mutable_exampledirectory() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.exampleDirectory)
  return _internal_mutable_exampledirectory();
}
inline const std::string& ServerConfiguration::_internal_exampledirectory() const {
  return exampledirectory_.Get();
}
inline void ServerConfiguration::_internal_set_exampledirectory(const std::string& value) {
  
  exampledirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerConfiguration::set_exampledirectory(std::string&& value) {
  
  exampledirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:wise.confic.ServerConfiguration.exampleDirectory)
}
inline void ServerConfiguration::set_exampledirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exampledirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:wise.confic.ServerConfiguration.exampleDirectory)
}
inline void ServerConfiguration::set_exampledirectory(const char* value,
    size_t size) {
  
  exampledirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:wise.confic.ServerConfiguration.exampleDirectory)
}
inline std::string* ServerConfiguration::_internal_mutable_exampledirectory() {
  
  return exampledirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerConfiguration::release_exampledirectory() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.exampleDirectory)
  return exampledirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerConfiguration::set_allocated_exampledirectory(std::string* exampledirectory) {
  if (exampledirectory != nullptr) {
    
  } else {
    
  }
  exampledirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exampledirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.exampleDirectory)
}

// .wise.confic.ServerConfiguration.ManagerSettings manager_settings = 8;
inline bool ServerConfiguration::_internal_has_manager_settings() const {
  return this != internal_default_instance() && manager_settings_ != nullptr;
}
inline bool ServerConfiguration::has_manager_settings() const {
  return _internal_has_manager_settings();
}
inline void ServerConfiguration::clear_manager_settings() {
  if (GetArena() == nullptr && manager_settings_ != nullptr) {
    delete manager_settings_;
  }
  manager_settings_ = nullptr;
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings& ServerConfiguration::_internal_manager_settings() const {
  const ::wise::confic::ServerConfiguration_ManagerSettings* p = manager_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::wise::confic::ServerConfiguration_ManagerSettings*>(
      &::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_);
}
inline const ::wise::confic::ServerConfiguration_ManagerSettings& ServerConfiguration::manager_settings() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.manager_settings)
  return _internal_manager_settings();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_manager_settings(
    ::wise::confic::ServerConfiguration_ManagerSettings* manager_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(manager_settings_);
  }
  manager_settings_ = manager_settings;
  if (manager_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.manager_settings)
}
inline ::wise::confic::ServerConfiguration_ManagerSettings* ServerConfiguration::release_manager_settings() {
  
  ::wise::confic::ServerConfiguration_ManagerSettings* temp = manager_settings_;
  manager_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings* ServerConfiguration::unsafe_arena_release_manager_settings() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.manager_settings)
  
  ::wise::confic::ServerConfiguration_ManagerSettings* temp = manager_settings_;
  manager_settings_ = nullptr;
  return temp;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings* ServerConfiguration::_internal_mutable_manager_settings() {
  
  if (manager_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::wise::confic::ServerConfiguration_ManagerSettings>(GetArena());
    manager_settings_ = p;
  }
  return manager_settings_;
}
inline ::wise::confic::ServerConfiguration_ManagerSettings* ServerConfiguration::mutable_manager_settings() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.manager_settings)
  return _internal_mutable_manager_settings();
}
inline void ServerConfiguration::set_allocated_manager_settings(::wise::confic::ServerConfiguration_ManagerSettings* manager_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete manager_settings_;
  }
  if (manager_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(manager_settings);
    if (message_arena != submessage_arena) {
      manager_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manager_settings, submessage_arena);
    }
    
  } else {
    
  }
  manager_settings_ = manager_settings;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.manager_settings)
}

// .google.protobuf.BoolValue already_v2 = 9;
inline bool ServerConfiguration::_internal_has_already_v2() const {
  return this != internal_default_instance() && already_v2_ != nullptr;
}
inline bool ServerConfiguration::has_already_v2() const {
  return _internal_has_already_v2();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration::_internal_already_v2() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = already_v2_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& ServerConfiguration::already_v2() const {
  // @@protoc_insertion_point(field_get:wise.confic.ServerConfiguration.already_v2)
  return _internal_already_v2();
}
inline void ServerConfiguration::unsafe_arena_set_allocated_already_v2(
    PROTOBUF_NAMESPACE_ID::BoolValue* already_v2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(already_v2_);
  }
  already_v2_ = already_v2;
  if (already_v2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wise.confic.ServerConfiguration.already_v2)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration::release_already_v2() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = already_v2_;
  already_v2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration::unsafe_arena_release_already_v2() {
  // @@protoc_insertion_point(field_release:wise.confic.ServerConfiguration.already_v2)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = already_v2_;
  already_v2_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration::_internal_mutable_already_v2() {
  
  if (already_v2_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    already_v2_ = p;
  }
  return already_v2_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* ServerConfiguration::mutable_already_v2() {
  // @@protoc_insertion_point(field_mutable:wise.confic.ServerConfiguration.already_v2)
  return _internal_mutable_already_v2();
}
inline void ServerConfiguration::set_allocated_already_v2(PROTOBUF_NAMESPACE_ID::BoolValue* already_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(already_v2_);
  }
  if (already_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(already_v2)->GetArena();
    if (message_arena != submessage_arena) {
      already_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, already_v2, submessage_arena);
    }
    
  } else {
    
  }
  already_v2_ = already_v2;
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.already_v2)
}

inline bool ServerConfiguration::has_commsType() const {
  return commsType_case() != COMMSTYPE_NOT_SET;
}
inline void ServerConfiguration::clear_has_commsType() {
  _oneof_case_[0] = COMMSTYPE_NOT_SET;
}
inline ServerConfiguration::CommsTypeCase ServerConfiguration::commsType_case() const {
  return ServerConfiguration::CommsTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace confic
}  // namespace wise

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType>() {
  return ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor();
}
template <> struct is_proto_enum< ::wise::confic::ServerConfiguration_Verbosity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wise::confic::ServerConfiguration_Verbosity>() {
  return ::wise::confic::ServerConfiguration_Verbosity_descriptor();
}
template <> struct is_proto_enum< ::wise::confic::ServerConfiguration_OutputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wise::confic::ServerConfiguration_OutputType>() {
  return ::wise::confic::ServerConfiguration_OutputType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wise_5fconfig_2eproto
