// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wise_config.proto

#include "wise_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wise_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto;
namespace wise {
namespace confic {
class ServerConfiguration_LogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_LogFile> _instance;
} _ServerConfiguration_LogFile_default_instance_;
class ServerConfiguration_SignalsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_Signals> _instance;
} _ServerConfiguration_Signals_default_instance_;
class ServerConfiguration_HardwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_Hardware> _instance;
} _ServerConfiguration_Hardware_default_instance_;
class ServerConfiguration_SocketConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_SocketConnection> _instance;
} _ServerConfiguration_SocketConnection_default_instance_;
class ServerConfiguration_MqttConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_MqttConnection> _instance;
} _ServerConfiguration_MqttConnection_default_instance_;
class ServerConfiguration_BuilderConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_BuilderConnection> _instance;
} _ServerConfiguration_BuilderConnection_default_instance_;
class ServerConfiguration_ManagerSettings_BuilderConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_ManagerSettings_BuilderConfiguration> _instance;
} _ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_;
class ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost> _instance;
} _ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_;
class ServerConfiguration_ManagerSettings_MqttSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_ManagerSettings_MqttSettings> _instance;
} _ServerConfiguration_ManagerSettings_MqttSettings_default_instance_;
class ServerConfiguration_ManagerSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_ManagerSettings> _instance;
} _ServerConfiguration_ManagerSettings_default_instance_;
class ServerConfiguration_RpcConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration_RpcConfiguration> _instance;
} _ServerConfiguration_RpcConfiguration_default_instance_;
class ServerConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfiguration> _instance;
  const ::wise::confic::ServerConfiguration_SocketConnection* socket_;
  const ::wise::confic::ServerConfiguration_MqttConnection* mqtt_;
} _ServerConfiguration_default_instance_;
}  // namespace confic
}  // namespace wise
static void InitDefaultsscc_info_ServerConfiguration_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ServerConfiguration_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_ServerConfiguration_wise_5fconfig_2eproto}, {
      &scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_BuilderConnection_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_BuilderConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_BuilderConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_Hardware_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_Hardware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_Hardware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_LogFile_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_LogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_LogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_ManagerSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_ManagerSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto}, {
      &scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto.base,
      &scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_MqttConnection_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_MqttConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_MqttConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_RpcConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_RpcConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_Signals_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_Signals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_Signals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wise::confic::_ServerConfiguration_SocketConnection_default_instance_;
    new (ptr) ::wise::confic::ServerConfiguration_SocketConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wise::confic::ServerConfiguration_SocketConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_wise_5fconfig_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_wise_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_wise_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_wise_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_LogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_LogFile, filename_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_LogFile, verbosity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Signals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Signals, start_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Signals, complete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Hardware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Hardware, processes_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_Hardware, cores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_SocketConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_SocketConnection, address_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_SocketConnection, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, hostname_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, port_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, topic_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, verbosity_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, qos_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, username_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_MqttConnection, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_BuilderConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_BuilderConnection, hostname_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_BuilderConnection, port_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_BuilderConnection, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration, builder_location_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration, log_level_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration, start_with_manager_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration, output_single_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, hostname_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, auth_type_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, username_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, password_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, access_token_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, auth_endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, max_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, mqtt_id_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, use_internal_broker_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, use_internal_authentication_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings, web_hosts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, max_concurrent_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, restart_old_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, wise_location_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, lock_cpu_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, start_paused_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, internal_builder_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, mqtt_settings_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, numa_lock_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, skip_cores_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, rpc_settings_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, respect_shmem_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, display_status_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, listen_balance_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_ManagerSettings, export_thread_fraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, enabled_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, externaladdress_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, port_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, internal_address_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, external_port_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration_RpcConfiguration, internal_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, log_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, signals_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, hardware_),
  offsetof(::wise::confic::ServerConfigurationDefaultTypeInternal, socket_),
  offsetof(::wise::confic::ServerConfigurationDefaultTypeInternal, mqtt_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, builder_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, exampledirectory_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, manager_settings_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, already_v2_),
  PROTOBUF_FIELD_OFFSET(::wise::confic::ServerConfiguration, commsType_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wise::confic::ServerConfiguration_LogFile)},
  { 7, -1, sizeof(::wise::confic::ServerConfiguration_Signals)},
  { 14, -1, sizeof(::wise::confic::ServerConfiguration_Hardware)},
  { 21, -1, sizeof(::wise::confic::ServerConfiguration_SocketConnection)},
  { 28, -1, sizeof(::wise::confic::ServerConfiguration_MqttConnection)},
  { 40, -1, sizeof(::wise::confic::ServerConfiguration_BuilderConnection)},
  { 48, -1, sizeof(::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration)},
  { 57, -1, sizeof(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost)},
  { 68, -1, sizeof(::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings)},
  { 78, -1, sizeof(::wise::confic::ServerConfiguration_ManagerSettings)},
  { 97, -1, sizeof(::wise::confic::ServerConfiguration_RpcConfiguration)},
  { 108, -1, sizeof(::wise::confic::ServerConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_LogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_Signals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_Hardware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_SocketConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_MqttConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_BuilderConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_ManagerSettings_BuilderConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wise::confic::_ServerConfiguration_default_instance_),
};

const char descriptor_table_protodef_wise_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021wise_config.proto\022\013wise.confic\032\036google"
  "/protobuf/wrappers.proto\"\265\027\n\023ServerConfi"
  "guration\0225\n\003log\030\001 \001(\0132(.wise.confic.Serv"
  "erConfiguration.LogFile\0229\n\007signals\030\002 \001(\013"
  "2(.wise.confic.ServerConfiguration.Signa"
  "ls\022;\n\010hardware\030\003 \001(\0132).wise.confic.Serve"
  "rConfiguration.Hardware\022C\n\006socket\030\004 \001(\0132"
  "1.wise.confic.ServerConfiguration.Socket"
  "ConnectionH\000\022\?\n\004mqtt\030\005 \001(\0132/.wise.confic"
  ".ServerConfiguration.MqttConnectionH\000\022C\n"
  "\007builder\030\006 \001(\01322.wise.confic.ServerConfi"
  "guration.BuilderConnection\022\030\n\020exampleDir"
  "ectory\030\007 \001(\t\022J\n\020manager_settings\030\010 \001(\01320"
  ".wise.confic.ServerConfiguration.Manager"
  "Settings\022.\n\nalready_v2\030\t \001(\0132\032.google.pr"
  "otobuf.BoolValue\032Z\n\007LogFile\022\020\n\010filename\030"
  "\001 \001(\t\022=\n\tverbosity\030\002 \001(\0162*.wise.confic.S"
  "erverConfiguration.Verbosity\032*\n\007Signals\022"
  "\r\n\005start\030\001 \001(\t\022\020\n\010complete\030\002 \001(\t\032,\n\010Hard"
  "ware\022\021\n\tprocesses\030\001 \001(\005\022\r\n\005cores\030\002 \001(\005\0321"
  "\n\020SocketConnection\022\017\n\007address\030\001 \001(\t\022\014\n\004p"
  "ort\030\002 \001(\005\032\257\001\n\016MqttConnection\022\020\n\010hostname"
  "\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\r\n\005topic\030\003 \001(\t\022=\n\tv"
  "erbosity\030\004 \001(\0162*.wise.confic.ServerConfi"
  "guration.Verbosity\022\013\n\003qos\030\005 \001(\005\022\020\n\010usern"
  "ame\030\006 \001(\t\022\020\n\010password\030\007 \001(\t\032p\n\021BuilderCo"
  "nnection\022\020\n\010hostname\030\001 \001(\t\022\014\n\004port\030\002 \001(\005"
  "\022;\n\006format\030\003 \001(\0162+.wise.confic.ServerCon"
  "figuration.OutputType\032\326\013\n\017ManagerSetting"
  "s\022\026\n\016max_concurrent\030\001 \001(\005\022\023\n\013restart_old"
  "\030\002 \001(\010\022\025\n\rwise_location\030\003 \001(\t\022\020\n\010lock_cp"
  "u\030\004 \001(\010\022\024\n\014start_paused\030\005 \001(\010\022_\n\020interna"
  "l_builder\030\006 \001(\0132E.wise.confic.ServerConf"
  "iguration.ManagerSettings.BuilderConfigu"
  "ration\022T\n\rmqtt_settings\030\007 \001(\0132=.wise.con"
  "fic.ServerConfiguration.ManagerSettings."
  "MqttSettings\022-\n\tnuma_lock\030\010 \001(\0132\032.google"
  ".protobuf.BoolValue\022/\n\nskip_cores\030\t \001(\0132"
  "\033.google.protobuf.Int32Value\022G\n\014rpc_sett"
  "ings\030\n \001(\01321.wise.confic.ServerConfigura"
  "tion.RpcConfiguration\0221\n\rrespect_shmem\030\013"
  " \001(\0132\032.google.protobuf.BoolValue\0222\n\016disp"
  "lay_status\030\014 \001(\0132\032.google.protobuf.BoolV"
  "alue\0222\n\016listen_balance\030\r \001(\0132\032.google.pr"
  "otobuf.BoolValue\022;\n\026export_thread_fracti"
  "on\030\016 \001(\0132\033.google.protobuf.Int32Value\032{\n"
  "\024BuilderConfiguration\022\030\n\020builder_locatio"
  "n\030\001 \001(\t\022\021\n\tlog_level\030\002 \001(\t\022\032\n\022start_with"
  "_manager\030\003 \001(\010\022\032\n\022output_single_file\030\004 \001"
  "(\010\032\241\005\n\014MqttSettings\022\027\n\017max_buffer_size\030\001"
  " \001(\005\022-\n\007mqtt_id\030\002 \001(\0132\034.google.protobuf."
  "StringValue\0227\n\023use_internal_broker\030\003 \001(\013"
  "2\032.google.protobuf.BoolValue\022\?\n\033use_inte"
  "rnal_authentication\030\004 \001(\0132\032.google.proto"
  "buf.BoolValue\022\\\n\tweb_hosts\030\005 \003(\0132I.wise."
  "confic.ServerConfiguration.ManagerSettin"
  "gs.MqttSettings.MqttWebHost\032\360\002\n\013MqttWebH"
  "ost\022\020\n\010hostname\030\001 \001(\t\022e\n\tauth_type\030\002 \001(\016"
  "2R.wise.confic.ServerConfiguration.Manag"
  "erSettings.MqttSettings.MqttWebHost.Auth"
  "Type\022.\n\010username\030\003 \001(\0132\034.google.protobuf"
  ".StringValue\022.\n\010password\030\004 \001(\0132\034.google."
  "protobuf.StringValue\0222\n\014access_token\030\005 \001"
  "(\0132\034.google.protobuf.StringValue\0223\n\rauth"
  "_endpoint\030\006 \001(\0132\034.google.protobuf.String"
  "Value\"\037\n\010AuthType\022\010\n\004NONE\020\000\022\t\n\005TOKEN\020\001\032\352"
  "\001\n\020RpcConfiguration\022\017\n\007enabled\030\001 \001(\010\022\027\n\017"
  "externalAddress\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\0226\n\020i"
  "nternal_address\030\004 \001(\0132\034.google.protobuf."
  "StringValue\0222\n\rexternal_port\030\005 \001(\0132\033.goo"
  "gle.protobuf.Int32Value\0222\n\rinternal_port"
  "\030\006 \001(\0132\033.google.protobuf.Int32Value\">\n\tV"
  "erbosity\022\010\n\004NONE\020\000\022\n\n\006SEVERE\020\001\022\010\n\004WARN\020\002"
  "\022\010\n\004INFO\020\003\022\007\n\003MAX\020\004\"n\n\nOutputType\022\010\n\004JSO"
  "N\020\000\022\020\n\014JSON_MINIMAL\020\001\022\n\n\006BINARY\020\002\022\007\n\003XML"
  "\020\003\022\013\n\007JSON_V2\020\004\022\023\n\017JSON_MINIMAL_V2\020\005\022\r\n\t"
  "BINARY_V2\020\006B\013\n\tcommsTypeB-\n\024ca.wise.conf"
  "ig.protoP\001\252\002\022WISE_API.NET.Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_wise_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_wise_5fconfig_2eproto_sccs[12] = {
  &scc_info_ServerConfiguration_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto.base,
  &scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_wise_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wise_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_wise_5fconfig_2eproto, "wise_config.proto", 3119,
  &descriptor_table_wise_5fconfig_2eproto_once, descriptor_table_wise_5fconfig_2eproto_sccs, descriptor_table_wise_5fconfig_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_wise_5fconfig_2eproto::offsets,
  file_level_metadata_wise_5fconfig_2eproto, 12, file_level_enum_descriptors_wise_5fconfig_2eproto, file_level_service_descriptors_wise_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_wise_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_wise_5fconfig_2eproto)), true);
namespace wise {
namespace confic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wise_5fconfig_2eproto);
  return file_level_enum_descriptors_wise_5fconfig_2eproto[0];
}
bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::NONE;
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::TOKEN;
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::AuthType_MIN;
constexpr ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::AuthType_MAX;
constexpr int ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::AuthType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_Verbosity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wise_5fconfig_2eproto);
  return file_level_enum_descriptors_wise_5fconfig_2eproto[1];
}
bool ServerConfiguration_Verbosity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerConfiguration_Verbosity ServerConfiguration::NONE;
constexpr ServerConfiguration_Verbosity ServerConfiguration::SEVERE;
constexpr ServerConfiguration_Verbosity ServerConfiguration::WARN;
constexpr ServerConfiguration_Verbosity ServerConfiguration::INFO;
constexpr ServerConfiguration_Verbosity ServerConfiguration::MAX;
constexpr ServerConfiguration_Verbosity ServerConfiguration::Verbosity_MIN;
constexpr ServerConfiguration_Verbosity ServerConfiguration::Verbosity_MAX;
constexpr int ServerConfiguration::Verbosity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerConfiguration_OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wise_5fconfig_2eproto);
  return file_level_enum_descriptors_wise_5fconfig_2eproto[2];
}
bool ServerConfiguration_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerConfiguration_OutputType ServerConfiguration::JSON;
constexpr ServerConfiguration_OutputType ServerConfiguration::JSON_MINIMAL;
constexpr ServerConfiguration_OutputType ServerConfiguration::BINARY;
constexpr ServerConfiguration_OutputType ServerConfiguration::XML;
constexpr ServerConfiguration_OutputType ServerConfiguration::JSON_V2;
constexpr ServerConfiguration_OutputType ServerConfiguration::JSON_MINIMAL_V2;
constexpr ServerConfiguration_OutputType ServerConfiguration::BINARY_V2;
constexpr ServerConfiguration_OutputType ServerConfiguration::OutputType_MIN;
constexpr ServerConfiguration_OutputType ServerConfiguration::OutputType_MAX;
constexpr int ServerConfiguration::OutputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ServerConfiguration_LogFile::InitAsDefaultInstance() {
}
class ServerConfiguration_LogFile::_Internal {
 public:
};

ServerConfiguration_LogFile::ServerConfiguration_LogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.LogFile)
}
ServerConfiguration_LogFile::ServerConfiguration_LogFile(const ServerConfiguration_LogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  verbosity_ = from.verbosity_;
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.LogFile)
}

void ServerConfiguration_LogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbosity_ = 0;
}

ServerConfiguration_LogFile::~ServerConfiguration_LogFile() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.LogFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_LogFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_LogFile::ArenaDtor(void* object) {
  ServerConfiguration_LogFile* _this = reinterpret_cast< ServerConfiguration_LogFile* >(object);
  (void)_this;
}
void ServerConfiguration_LogFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_LogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_LogFile& ServerConfiguration_LogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_LogFile_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_LogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbosity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_LogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.LogFile.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.Verbosity verbosity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verbosity(static_cast<::wise::confic::ServerConfiguration_Verbosity>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_LogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.LogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.LogFile.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 2;
  if (this->verbosity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_verbosity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.LogFile)
  return target;
}

size_t ServerConfiguration_LogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.LogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 2;
  if (this->verbosity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_verbosity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_LogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_LogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_LogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.LogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.LogFile)
    MergeFrom(*source);
  }
}

void ServerConfiguration_LogFile::MergeFrom(const ServerConfiguration_LogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.LogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.verbosity() != 0) {
    _internal_set_verbosity(from._internal_verbosity());
  }
}

void ServerConfiguration_LogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_LogFile::CopyFrom(const ServerConfiguration_LogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.LogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_LogFile::IsInitialized() const {
  return true;
}

void ServerConfiguration_LogFile::InternalSwap(ServerConfiguration_LogFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(verbosity_, other->verbosity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_LogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_Signals::InitAsDefaultInstance() {
}
class ServerConfiguration_Signals::_Internal {
 public:
};

ServerConfiguration_Signals::ServerConfiguration_Signals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.Signals)
}
ServerConfiguration_Signals::ServerConfiguration_Signals(const ServerConfiguration_Signals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start(),
      GetArena());
  }
  complete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_complete().empty()) {
    complete_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_complete(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.Signals)
}

void ServerConfiguration_Signals::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto.base);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  complete_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerConfiguration_Signals::~ServerConfiguration_Signals() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.Signals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_Signals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  complete_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_Signals::ArenaDtor(void* object) {
  ServerConfiguration_Signals* _this = reinterpret_cast< ServerConfiguration_Signals* >(object);
  (void)_this;
}
void ServerConfiguration_Signals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_Signals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_Signals& ServerConfiguration_Signals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_Signals_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_Signals::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.Signals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  complete_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_Signals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.Signals.start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string complete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_complete();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.Signals.complete"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_Signals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.Signals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.Signals.start");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start(), target);
  }

  // string complete = 2;
  if (this->complete().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_complete().data(), static_cast<int>(this->_internal_complete().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.Signals.complete");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.Signals)
  return target;
}

size_t ServerConfiguration_Signals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.Signals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // string complete = 2;
  if (this->complete().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_complete());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_Signals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_Signals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_Signals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.Signals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.Signals)
    MergeFrom(*source);
  }
}

void ServerConfiguration_Signals::MergeFrom(const ServerConfiguration_Signals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start().size() > 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.complete().size() > 0) {
    _internal_set_complete(from._internal_complete());
  }
}

void ServerConfiguration_Signals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_Signals::CopyFrom(const ServerConfiguration_Signals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_Signals::IsInitialized() const {
  return true;
}

void ServerConfiguration_Signals::InternalSwap(ServerConfiguration_Signals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  complete_.Swap(&other->complete_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_Signals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_Hardware::InitAsDefaultInstance() {
}
class ServerConfiguration_Hardware::_Internal {
 public:
};

ServerConfiguration_Hardware::ServerConfiguration_Hardware(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.Hardware)
}
ServerConfiguration_Hardware::ServerConfiguration_Hardware(const ServerConfiguration_Hardware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&processes_, &from.processes_,
    static_cast<size_t>(reinterpret_cast<char*>(&cores_) -
    reinterpret_cast<char*>(&processes_)) + sizeof(cores_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.Hardware)
}

void ServerConfiguration_Hardware::SharedCtor() {
  ::memset(&processes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cores_) -
      reinterpret_cast<char*>(&processes_)) + sizeof(cores_));
}

ServerConfiguration_Hardware::~ServerConfiguration_Hardware() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.Hardware)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_Hardware::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerConfiguration_Hardware::ArenaDtor(void* object) {
  ServerConfiguration_Hardware* _this = reinterpret_cast< ServerConfiguration_Hardware* >(object);
  (void)_this;
}
void ServerConfiguration_Hardware::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_Hardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_Hardware& ServerConfiguration_Hardware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_Hardware_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_Hardware::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&processes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cores_) -
      reinterpret_cast<char*>(&processes_)) + sizeof(cores_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_Hardware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          processes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_Hardware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 processes = 1;
  if (this->processes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_processes(), target);
  }

  // int32 cores = 2;
  if (this->cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cores(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.Hardware)
  return target;
}

size_t ServerConfiguration_Hardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.Hardware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 processes = 1;
  if (this->processes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_processes());
  }

  // int32 cores = 2;
  if (this->cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cores());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_Hardware::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_Hardware* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_Hardware>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.Hardware)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.Hardware)
    MergeFrom(*source);
  }
}

void ServerConfiguration_Hardware::MergeFrom(const ServerConfiguration_Hardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processes() != 0) {
    _internal_set_processes(from._internal_processes());
  }
  if (from.cores() != 0) {
    _internal_set_cores(from._internal_cores());
  }
}

void ServerConfiguration_Hardware::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_Hardware::CopyFrom(const ServerConfiguration_Hardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_Hardware::IsInitialized() const {
  return true;
}

void ServerConfiguration_Hardware::InternalSwap(ServerConfiguration_Hardware* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_Hardware, cores_)
      + sizeof(ServerConfiguration_Hardware::cores_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_Hardware, processes_)>(
          reinterpret_cast<char*>(&processes_),
          reinterpret_cast<char*>(&other->processes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_Hardware::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_SocketConnection::InitAsDefaultInstance() {
}
class ServerConfiguration_SocketConnection::_Internal {
 public:
};

ServerConfiguration_SocketConnection::ServerConfiguration_SocketConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.SocketConnection)
}
ServerConfiguration_SocketConnection::ServerConfiguration_SocketConnection(const ServerConfiguration_SocketConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.SocketConnection)
}

void ServerConfiguration_SocketConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

ServerConfiguration_SocketConnection::~ServerConfiguration_SocketConnection() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.SocketConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_SocketConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_SocketConnection::ArenaDtor(void* object) {
  ServerConfiguration_SocketConnection* _this = reinterpret_cast< ServerConfiguration_SocketConnection* >(object);
  (void)_this;
}
void ServerConfiguration_SocketConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_SocketConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_SocketConnection& ServerConfiguration_SocketConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_SocketConnection_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_SocketConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.SocketConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_SocketConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.SocketConnection.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_SocketConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.SocketConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.SocketConnection.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.SocketConnection)
  return target;
}

size_t ServerConfiguration_SocketConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.SocketConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_SocketConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.SocketConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_SocketConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_SocketConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.SocketConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.SocketConnection)
    MergeFrom(*source);
  }
}

void ServerConfiguration_SocketConnection::MergeFrom(const ServerConfiguration_SocketConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.SocketConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void ServerConfiguration_SocketConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.SocketConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_SocketConnection::CopyFrom(const ServerConfiguration_SocketConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.SocketConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_SocketConnection::IsInitialized() const {
  return true;
}

void ServerConfiguration_SocketConnection::InternalSwap(ServerConfiguration_SocketConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_SocketConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_MqttConnection::InitAsDefaultInstance() {
}
class ServerConfiguration_MqttConnection::_Internal {
 public:
};

ServerConfiguration_MqttConnection::ServerConfiguration_MqttConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.MqttConnection)
}
ServerConfiguration_MqttConnection::ServerConfiguration_MqttConnection(const ServerConfiguration_MqttConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&qos_) -
    reinterpret_cast<char*>(&port_)) + sizeof(qos_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.MqttConnection)
}

void ServerConfiguration_MqttConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qos_) -
      reinterpret_cast<char*>(&port_)) + sizeof(qos_));
}

ServerConfiguration_MqttConnection::~ServerConfiguration_MqttConnection() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.MqttConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_MqttConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_MqttConnection::ArenaDtor(void* object) {
  ServerConfiguration_MqttConnection* _this = reinterpret_cast< ServerConfiguration_MqttConnection* >(object);
  (void)_this;
}
void ServerConfiguration_MqttConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_MqttConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_MqttConnection& ServerConfiguration_MqttConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_MqttConnection_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_MqttConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.MqttConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qos_) -
      reinterpret_cast<char*>(&port_)) + sizeof(qos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_MqttConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.MqttConnection.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.MqttConnection.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.Verbosity verbosity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verbosity(static_cast<::wise::confic::ServerConfiguration_Verbosity>(val));
        } else goto handle_unusual;
        continue;
      // int32 qos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          qos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.MqttConnection.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.MqttConnection.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_MqttConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.MqttConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.MqttConnection.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // string topic = 3;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.MqttConnection.topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_topic(), target);
  }

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 4;
  if (this->verbosity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_verbosity(), target);
  }

  // int32 qos = 5;
  if (this->qos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_qos(), target);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.MqttConnection.username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.MqttConnection.password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.MqttConnection)
  return target;
}

size_t ServerConfiguration_MqttConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.MqttConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string topic = 3;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string username = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // .wise.confic.ServerConfiguration.Verbosity verbosity = 4;
  if (this->verbosity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_verbosity());
  }

  // int32 qos = 5;
  if (this->qos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_qos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_MqttConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.MqttConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_MqttConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_MqttConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.MqttConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.MqttConnection)
    MergeFrom(*source);
  }
}

void ServerConfiguration_MqttConnection::MergeFrom(const ServerConfiguration_MqttConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.MqttConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.verbosity() != 0) {
    _internal_set_verbosity(from._internal_verbosity());
  }
  if (from.qos() != 0) {
    _internal_set_qos(from._internal_qos());
  }
}

void ServerConfiguration_MqttConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.MqttConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_MqttConnection::CopyFrom(const ServerConfiguration_MqttConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.MqttConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_MqttConnection::IsInitialized() const {
  return true;
}

void ServerConfiguration_MqttConnection::InternalSwap(ServerConfiguration_MqttConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_MqttConnection, qos_)
      + sizeof(ServerConfiguration_MqttConnection::qos_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_MqttConnection, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_MqttConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_BuilderConnection::InitAsDefaultInstance() {
}
class ServerConfiguration_BuilderConnection::_Internal {
 public:
};

ServerConfiguration_BuilderConnection::ServerConfiguration_BuilderConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.BuilderConnection)
}
ServerConfiguration_BuilderConnection::ServerConfiguration_BuilderConnection(const ServerConfiguration_BuilderConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&port_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.BuilderConnection)
}

void ServerConfiguration_BuilderConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&port_)) + sizeof(format_));
}

ServerConfiguration_BuilderConnection::~ServerConfiguration_BuilderConnection() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.BuilderConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_BuilderConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_BuilderConnection::ArenaDtor(void* object) {
  ServerConfiguration_BuilderConnection* _this = reinterpret_cast< ServerConfiguration_BuilderConnection* >(object);
  (void)_this;
}
void ServerConfiguration_BuilderConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_BuilderConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_BuilderConnection& ServerConfiguration_BuilderConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_BuilderConnection_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_BuilderConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.BuilderConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&port_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_BuilderConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.BuilderConnection.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.OutputType format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::wise::confic::ServerConfiguration_OutputType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_BuilderConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.BuilderConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.BuilderConnection.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // .wise.confic.ServerConfiguration.OutputType format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.BuilderConnection)
  return target;
}

size_t ServerConfiguration_BuilderConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.BuilderConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // .wise.confic.ServerConfiguration.OutputType format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_BuilderConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.BuilderConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_BuilderConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_BuilderConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.BuilderConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.BuilderConnection)
    MergeFrom(*source);
  }
}

void ServerConfiguration_BuilderConnection::MergeFrom(const ServerConfiguration_BuilderConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.BuilderConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void ServerConfiguration_BuilderConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.BuilderConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_BuilderConnection::CopyFrom(const ServerConfiguration_BuilderConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.BuilderConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_BuilderConnection::IsInitialized() const {
  return true;
}

void ServerConfiguration_BuilderConnection::InternalSwap(ServerConfiguration_BuilderConnection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_BuilderConnection, format_)
      + sizeof(ServerConfiguration_BuilderConnection::format_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_BuilderConnection, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_BuilderConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_ManagerSettings_BuilderConfiguration::InitAsDefaultInstance() {
}
class ServerConfiguration_ManagerSettings_BuilderConfiguration::_Internal {
 public:
};

ServerConfiguration_ManagerSettings_BuilderConfiguration::ServerConfiguration_ManagerSettings_BuilderConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
}
ServerConfiguration_ManagerSettings_BuilderConfiguration::ServerConfiguration_ManagerSettings_BuilderConfiguration(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  builder_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_builder_location().empty()) {
    builder_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_builder_location(),
      GetArena());
  }
  log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_level().empty()) {
    log_level_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_level(),
      GetArena());
  }
  ::memcpy(&start_with_manager_, &from.start_with_manager_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_single_file_) -
    reinterpret_cast<char*>(&start_with_manager_)) + sizeof(output_single_file_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto.base);
  builder_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_with_manager_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_single_file_) -
      reinterpret_cast<char*>(&start_with_manager_)) + sizeof(output_single_file_));
}

ServerConfiguration_ManagerSettings_BuilderConfiguration::~ServerConfiguration_ManagerSettings_BuilderConfiguration() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  builder_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::ArenaDtor(void* object) {
  ServerConfiguration_ManagerSettings_BuilderConfiguration* _this = reinterpret_cast< ServerConfiguration_ManagerSettings_BuilderConfiguration* >(object);
  (void)_this;
}
void ServerConfiguration_ManagerSettings_BuilderConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_ManagerSettings_BuilderConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_ManagerSettings_BuilderConfiguration& ServerConfiguration_ManagerSettings_BuilderConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_ManagerSettings_BuilderConfiguration_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_ManagerSettings_BuilderConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  builder_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_level_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&start_with_manager_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_single_file_) -
      reinterpret_cast<char*>(&start_with_manager_)) + sizeof(output_single_file_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_ManagerSettings_BuilderConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string builder_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_builder_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool start_with_manager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_with_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_single_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          output_single_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_ManagerSettings_BuilderConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string builder_location = 1;
  if (this->builder_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_builder_location().data(), static_cast<int>(this->_internal_builder_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.builder_location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_builder_location(), target);
  }

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_level().data(), static_cast<int>(this->_internal_log_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration.log_level");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_level(), target);
  }

  // bool start_with_manager = 3;
  if (this->start_with_manager() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_start_with_manager(), target);
  }

  // bool output_single_file = 4;
  if (this->output_single_file() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_single_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  return target;
}

size_t ServerConfiguration_ManagerSettings_BuilderConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string builder_location = 1;
  if (this->builder_location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_builder_location());
  }

  // string log_level = 2;
  if (this->log_level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_level());
  }

  // bool start_with_manager = 3;
  if (this->start_with_manager() != 0) {
    total_size += 1 + 1;
  }

  // bool output_single_file = 4;
  if (this->output_single_file() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_ManagerSettings_BuilderConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_ManagerSettings_BuilderConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
    MergeFrom(*source);
  }
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::MergeFrom(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.builder_location().size() > 0) {
    _internal_set_builder_location(from._internal_builder_location());
  }
  if (from.log_level().size() > 0) {
    _internal_set_log_level(from._internal_log_level());
  }
  if (from.start_with_manager() != 0) {
    _internal_set_start_with_manager(from._internal_start_with_manager());
  }
  if (from.output_single_file() != 0) {
    _internal_set_output_single_file(from._internal_output_single_file());
  }
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::CopyFrom(const ServerConfiguration_ManagerSettings_BuilderConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_ManagerSettings_BuilderConfiguration::IsInitialized() const {
  return true;
}

void ServerConfiguration_ManagerSettings_BuilderConfiguration::InternalSwap(ServerConfiguration_ManagerSettings_BuilderConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  builder_location_.Swap(&other->builder_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_level_.Swap(&other->log_level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_BuilderConfiguration, output_single_file_)
      + sizeof(ServerConfiguration_ManagerSettings_BuilderConfiguration::output_single_file_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_BuilderConfiguration, start_with_manager_)>(
          reinterpret_cast<char*>(&start_with_manager_),
          reinterpret_cast<char*>(&other->start_with_manager_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_ManagerSettings_BuilderConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::InitAsDefaultInstance() {
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_._instance.get_mutable()->username_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_._instance.get_mutable()->password_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_._instance.get_mutable()->access_token_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_default_instance_._instance.get_mutable()->auth_endpoint_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
}
class ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& username(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& password(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& access_token(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& auth_endpoint(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_Internal::username(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg) {
  return *msg->username_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_Internal::password(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg) {
  return *msg->password_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_Internal::access_token(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg) {
  return *msg->access_token_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_Internal::auth_endpoint(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* msg) {
  return *msg->auth_endpoint_;
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_username() {
  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_password() {
  if (GetArena() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_access_token() {
  if (GetArena() == nullptr && access_token_ != nullptr) {
    delete access_token_;
  }
  access_token_ = nullptr;
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::clear_auth_endpoint() {
  if (GetArena() == nullptr && auth_endpoint_ != nullptr) {
    delete auth_endpoint_;
  }
  auth_endpoint_ = nullptr;
}
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
}
ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  if (from._internal_has_username()) {
    username_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.username_);
  } else {
    username_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.password_);
  } else {
    password_ = nullptr;
  }
  if (from._internal_has_access_token()) {
    access_token_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.access_token_);
  } else {
    access_token_ = nullptr;
  }
  if (from._internal_has_auth_endpoint()) {
    auth_endpoint_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.auth_endpoint_);
  } else {
    auth_endpoint_ = nullptr;
  }
  auth_type_ = from.auth_type_;
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_type_) -
      reinterpret_cast<char*>(&username_)) + sizeof(auth_type_));
}

ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::~ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete username_;
  if (this != internal_default_instance()) delete password_;
  if (this != internal_default_instance()) delete access_token_;
  if (this != internal_default_instance()) delete auth_endpoint_;
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::ArenaDtor(void* object) {
  ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* _this = reinterpret_cast< ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* >(object);
  (void)_this;
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && username_ != nullptr) {
    delete username_;
  }
  username_ = nullptr;
  if (GetArena() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  if (GetArena() == nullptr && access_token_ != nullptr) {
    delete access_token_;
  }
  access_token_ = nullptr;
  if (GetArena() == nullptr && auth_endpoint_ != nullptr) {
    delete auth_endpoint_;
  }
  auth_endpoint_ = nullptr;
  auth_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.AuthType auth_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auth_type(static_cast<::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost_AuthType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_username(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue access_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_access_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue auth_endpoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_endpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.AuthType auth_type = 2;
  if (this->auth_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auth_type(), target);
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::username(this), target, stream);
  }

  // .google.protobuf.StringValue password = 4;
  if (this->has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::password(this), target, stream);
  }

  // .google.protobuf.StringValue access_token = 5;
  if (this->has_access_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::access_token(this), target, stream);
  }

  // .google.protobuf.StringValue auth_endpoint = 6;
  if (this->has_auth_endpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::auth_endpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  return target;
}

size_t ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .google.protobuf.StringValue username = 3;
  if (this->has_username()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *username_);
  }

  // .google.protobuf.StringValue password = 4;
  if (this->has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  // .google.protobuf.StringValue access_token = 5;
  if (this->has_access_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_token_);
  }

  // .google.protobuf.StringValue auth_endpoint = 6;
  if (this->has_auth_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_endpoint_);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost.AuthType auth_type = 2;
  if (this->auth_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auth_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
    MergeFrom(*source);
  }
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::MergeFrom(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.has_username()) {
    _internal_mutable_username()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_username());
  }
  if (from.has_password()) {
    _internal_mutable_password()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_password());
  }
  if (from.has_access_token()) {
    _internal_mutable_access_token()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_access_token());
  }
  if (from.has_auth_endpoint()) {
    _internal_mutable_auth_endpoint()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_auth_endpoint());
  }
  if (from.auth_type() != 0) {
    _internal_set_auth_type(from._internal_auth_type());
  }
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::CopyFrom(const ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::IsInitialized() const {
  return true;
}

void ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::InternalSwap(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, auth_type_)
      + sizeof(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::auth_type_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost, username_)>(
          reinterpret_cast<char*>(&username_),
          reinterpret_cast<char*>(&other->username_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_ManagerSettings_MqttSettings::InitAsDefaultInstance() {
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_._instance.get_mutable()->mqtt_id_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_._instance.get_mutable()->use_internal_broker_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_MqttSettings_default_instance_._instance.get_mutable()->use_internal_authentication_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class ServerConfiguration_ManagerSettings_MqttSettings::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& mqtt_id(const ServerConfiguration_ManagerSettings_MqttSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& use_internal_broker(const ServerConfiguration_ManagerSettings_MqttSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& use_internal_authentication(const ServerConfiguration_ManagerSettings_MqttSettings* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_ManagerSettings_MqttSettings::_Internal::mqtt_id(const ServerConfiguration_ManagerSettings_MqttSettings* msg) {
  return *msg->mqtt_id_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings_MqttSettings::_Internal::use_internal_broker(const ServerConfiguration_ManagerSettings_MqttSettings* msg) {
  return *msg->use_internal_broker_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings_MqttSettings::_Internal::use_internal_authentication(const ServerConfiguration_ManagerSettings_MqttSettings* msg) {
  return *msg->use_internal_authentication_;
}
void ServerConfiguration_ManagerSettings_MqttSettings::clear_mqtt_id() {
  if (GetArena() == nullptr && mqtt_id_ != nullptr) {
    delete mqtt_id_;
  }
  mqtt_id_ = nullptr;
}
void ServerConfiguration_ManagerSettings_MqttSettings::clear_use_internal_broker() {
  if (GetArena() == nullptr && use_internal_broker_ != nullptr) {
    delete use_internal_broker_;
  }
  use_internal_broker_ = nullptr;
}
void ServerConfiguration_ManagerSettings_MqttSettings::clear_use_internal_authentication() {
  if (GetArena() == nullptr && use_internal_authentication_ != nullptr) {
    delete use_internal_authentication_;
  }
  use_internal_authentication_ = nullptr;
}
ServerConfiguration_ManagerSettings_MqttSettings::ServerConfiguration_ManagerSettings_MqttSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  web_hosts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
}
ServerConfiguration_ManagerSettings_MqttSettings::ServerConfiguration_ManagerSettings_MqttSettings(const ServerConfiguration_ManagerSettings_MqttSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      web_hosts_(from.web_hosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mqtt_id()) {
    mqtt_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.mqtt_id_);
  } else {
    mqtt_id_ = nullptr;
  }
  if (from._internal_has_use_internal_broker()) {
    use_internal_broker_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.use_internal_broker_);
  } else {
    use_internal_broker_ = nullptr;
  }
  if (from._internal_has_use_internal_authentication()) {
    use_internal_authentication_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.use_internal_authentication_);
  } else {
    use_internal_authentication_ = nullptr;
  }
  max_buffer_size_ = from.max_buffer_size_;
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
}

void ServerConfiguration_ManagerSettings_MqttSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto.base);
  ::memset(&mqtt_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_buffer_size_) -
      reinterpret_cast<char*>(&mqtt_id_)) + sizeof(max_buffer_size_));
}

ServerConfiguration_ManagerSettings_MqttSettings::~ServerConfiguration_ManagerSettings_MqttSettings() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_ManagerSettings_MqttSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mqtt_id_;
  if (this != internal_default_instance()) delete use_internal_broker_;
  if (this != internal_default_instance()) delete use_internal_authentication_;
}

void ServerConfiguration_ManagerSettings_MqttSettings::ArenaDtor(void* object) {
  ServerConfiguration_ManagerSettings_MqttSettings* _this = reinterpret_cast< ServerConfiguration_ManagerSettings_MqttSettings* >(object);
  (void)_this;
}
void ServerConfiguration_ManagerSettings_MqttSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_ManagerSettings_MqttSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_ManagerSettings_MqttSettings& ServerConfiguration_ManagerSettings_MqttSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_ManagerSettings_MqttSettings_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_ManagerSettings_MqttSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  web_hosts_.Clear();
  if (GetArena() == nullptr && mqtt_id_ != nullptr) {
    delete mqtt_id_;
  }
  mqtt_id_ = nullptr;
  if (GetArena() == nullptr && use_internal_broker_ != nullptr) {
    delete use_internal_broker_;
  }
  use_internal_broker_ = nullptr;
  if (GetArena() == nullptr && use_internal_authentication_ != nullptr) {
    delete use_internal_authentication_;
  }
  use_internal_authentication_ = nullptr;
  max_buffer_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_ManagerSettings_MqttSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_buffer_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue mqtt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mqtt_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue use_internal_broker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_internal_broker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue use_internal_authentication = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_internal_authentication(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost web_hosts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_web_hosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_ManagerSettings_MqttSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_buffer_size = 1;
  if (this->max_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_buffer_size(), target);
  }

  // .google.protobuf.StringValue mqtt_id = 2;
  if (this->has_mqtt_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mqtt_id(this), target, stream);
  }

  // .google.protobuf.BoolValue use_internal_broker = 3;
  if (this->has_use_internal_broker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::use_internal_broker(this), target, stream);
  }

  // .google.protobuf.BoolValue use_internal_authentication = 4;
  if (this->has_use_internal_authentication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::use_internal_authentication(this), target, stream);
  }

  // repeated .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost web_hosts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_web_hosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_web_hosts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  return target;
}

size_t ServerConfiguration_ManagerSettings_MqttSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings.MqttWebHost web_hosts = 5;
  total_size += 1UL * this->_internal_web_hosts_size();
  for (const auto& msg : this->web_hosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.StringValue mqtt_id = 2;
  if (this->has_mqtt_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mqtt_id_);
  }

  // .google.protobuf.BoolValue use_internal_broker = 3;
  if (this->has_use_internal_broker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_internal_broker_);
  }

  // .google.protobuf.BoolValue use_internal_authentication = 4;
  if (this->has_use_internal_authentication()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_internal_authentication_);
  }

  // int32 max_buffer_size = 1;
  if (this->max_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_buffer_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_ManagerSettings_MqttSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_ManagerSettings_MqttSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_ManagerSettings_MqttSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
    MergeFrom(*source);
  }
}

void ServerConfiguration_ManagerSettings_MqttSettings::MergeFrom(const ServerConfiguration_ManagerSettings_MqttSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  web_hosts_.MergeFrom(from.web_hosts_);
  if (from.has_mqtt_id()) {
    _internal_mutable_mqtt_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_mqtt_id());
  }
  if (from.has_use_internal_broker()) {
    _internal_mutable_use_internal_broker()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_use_internal_broker());
  }
  if (from.has_use_internal_authentication()) {
    _internal_mutable_use_internal_authentication()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_use_internal_authentication());
  }
  if (from.max_buffer_size() != 0) {
    _internal_set_max_buffer_size(from._internal_max_buffer_size());
  }
}

void ServerConfiguration_ManagerSettings_MqttSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_ManagerSettings_MqttSettings::CopyFrom(const ServerConfiguration_ManagerSettings_MqttSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings.MqttSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_ManagerSettings_MqttSettings::IsInitialized() const {
  return true;
}

void ServerConfiguration_ManagerSettings_MqttSettings::InternalSwap(ServerConfiguration_ManagerSettings_MqttSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  web_hosts_.InternalSwap(&other->web_hosts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_MqttSettings, max_buffer_size_)
      + sizeof(ServerConfiguration_ManagerSettings_MqttSettings::max_buffer_size_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings_MqttSettings, mqtt_id_)>(
          reinterpret_cast<char*>(&mqtt_id_),
          reinterpret_cast<char*>(&other->mqtt_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_ManagerSettings_MqttSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_ManagerSettings::InitAsDefaultInstance() {
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->internal_builder_ = const_cast< ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration*>(
      ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->mqtt_settings_ = const_cast< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings*>(
      ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->numa_lock_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->skip_cores_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->rpc_settings_ = const_cast< ::wise::confic::ServerConfiguration_RpcConfiguration*>(
      ::wise::confic::ServerConfiguration_RpcConfiguration::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->respect_shmem_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->display_status_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->listen_balance_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_ManagerSettings_default_instance_._instance.get_mutable()->export_thread_fraction_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
}
class ServerConfiguration_ManagerSettings::_Internal {
 public:
  static const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration& internal_builder(const ServerConfiguration_ManagerSettings* msg);
  static const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings& mqtt_settings(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& numa_lock(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& skip_cores(const ServerConfiguration_ManagerSettings* msg);
  static const ::wise::confic::ServerConfiguration_RpcConfiguration& rpc_settings(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& respect_shmem(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& display_status(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& listen_balance(const ServerConfiguration_ManagerSettings* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& export_thread_fraction(const ServerConfiguration_ManagerSettings* msg);
};

const ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration&
ServerConfiguration_ManagerSettings::_Internal::internal_builder(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->internal_builder_;
}
const ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings&
ServerConfiguration_ManagerSettings::_Internal::mqtt_settings(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->mqtt_settings_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings::_Internal::numa_lock(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->numa_lock_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ServerConfiguration_ManagerSettings::_Internal::skip_cores(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->skip_cores_;
}
const ::wise::confic::ServerConfiguration_RpcConfiguration&
ServerConfiguration_ManagerSettings::_Internal::rpc_settings(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->rpc_settings_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings::_Internal::respect_shmem(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->respect_shmem_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings::_Internal::display_status(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->display_status_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration_ManagerSettings::_Internal::listen_balance(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->listen_balance_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ServerConfiguration_ManagerSettings::_Internal::export_thread_fraction(const ServerConfiguration_ManagerSettings* msg) {
  return *msg->export_thread_fraction_;
}
void ServerConfiguration_ManagerSettings::clear_numa_lock() {
  if (GetArena() == nullptr && numa_lock_ != nullptr) {
    delete numa_lock_;
  }
  numa_lock_ = nullptr;
}
void ServerConfiguration_ManagerSettings::clear_skip_cores() {
  if (GetArena() == nullptr && skip_cores_ != nullptr) {
    delete skip_cores_;
  }
  skip_cores_ = nullptr;
}
void ServerConfiguration_ManagerSettings::clear_respect_shmem() {
  if (GetArena() == nullptr && respect_shmem_ != nullptr) {
    delete respect_shmem_;
  }
  respect_shmem_ = nullptr;
}
void ServerConfiguration_ManagerSettings::clear_display_status() {
  if (GetArena() == nullptr && display_status_ != nullptr) {
    delete display_status_;
  }
  display_status_ = nullptr;
}
void ServerConfiguration_ManagerSettings::clear_listen_balance() {
  if (GetArena() == nullptr && listen_balance_ != nullptr) {
    delete listen_balance_;
  }
  listen_balance_ = nullptr;
}
void ServerConfiguration_ManagerSettings::clear_export_thread_fraction() {
  if (GetArena() == nullptr && export_thread_fraction_ != nullptr) {
    delete export_thread_fraction_;
  }
  export_thread_fraction_ = nullptr;
}
ServerConfiguration_ManagerSettings::ServerConfiguration_ManagerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.ManagerSettings)
}
ServerConfiguration_ManagerSettings::ServerConfiguration_ManagerSettings(const ServerConfiguration_ManagerSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wise_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wise_location().empty()) {
    wise_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wise_location(),
      GetArena());
  }
  if (from._internal_has_internal_builder()) {
    internal_builder_ = new ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration(*from.internal_builder_);
  } else {
    internal_builder_ = nullptr;
  }
  if (from._internal_has_mqtt_settings()) {
    mqtt_settings_ = new ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings(*from.mqtt_settings_);
  } else {
    mqtt_settings_ = nullptr;
  }
  if (from._internal_has_numa_lock()) {
    numa_lock_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.numa_lock_);
  } else {
    numa_lock_ = nullptr;
  }
  if (from._internal_has_skip_cores()) {
    skip_cores_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.skip_cores_);
  } else {
    skip_cores_ = nullptr;
  }
  if (from._internal_has_rpc_settings()) {
    rpc_settings_ = new ::wise::confic::ServerConfiguration_RpcConfiguration(*from.rpc_settings_);
  } else {
    rpc_settings_ = nullptr;
  }
  if (from._internal_has_respect_shmem()) {
    respect_shmem_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.respect_shmem_);
  } else {
    respect_shmem_ = nullptr;
  }
  if (from._internal_has_display_status()) {
    display_status_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.display_status_);
  } else {
    display_status_ = nullptr;
  }
  if (from._internal_has_listen_balance()) {
    listen_balance_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.listen_balance_);
  } else {
    listen_balance_ = nullptr;
  }
  if (from._internal_has_export_thread_fraction()) {
    export_thread_fraction_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.export_thread_fraction_);
  } else {
    export_thread_fraction_ = nullptr;
  }
  ::memcpy(&max_concurrent_, &from.max_concurrent_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_paused_) -
    reinterpret_cast<char*>(&max_concurrent_)) + sizeof(start_paused_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.ManagerSettings)
}

void ServerConfiguration_ManagerSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto.base);
  wise_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&internal_builder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_paused_) -
      reinterpret_cast<char*>(&internal_builder_)) + sizeof(start_paused_));
}

ServerConfiguration_ManagerSettings::~ServerConfiguration_ManagerSettings() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.ManagerSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_ManagerSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wise_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete internal_builder_;
  if (this != internal_default_instance()) delete mqtt_settings_;
  if (this != internal_default_instance()) delete numa_lock_;
  if (this != internal_default_instance()) delete skip_cores_;
  if (this != internal_default_instance()) delete rpc_settings_;
  if (this != internal_default_instance()) delete respect_shmem_;
  if (this != internal_default_instance()) delete display_status_;
  if (this != internal_default_instance()) delete listen_balance_;
  if (this != internal_default_instance()) delete export_thread_fraction_;
}

void ServerConfiguration_ManagerSettings::ArenaDtor(void* object) {
  ServerConfiguration_ManagerSettings* _this = reinterpret_cast< ServerConfiguration_ManagerSettings* >(object);
  (void)_this;
}
void ServerConfiguration_ManagerSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_ManagerSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_ManagerSettings& ServerConfiguration_ManagerSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_ManagerSettings_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_ManagerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.ManagerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wise_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && internal_builder_ != nullptr) {
    delete internal_builder_;
  }
  internal_builder_ = nullptr;
  if (GetArena() == nullptr && mqtt_settings_ != nullptr) {
    delete mqtt_settings_;
  }
  mqtt_settings_ = nullptr;
  if (GetArena() == nullptr && numa_lock_ != nullptr) {
    delete numa_lock_;
  }
  numa_lock_ = nullptr;
  if (GetArena() == nullptr && skip_cores_ != nullptr) {
    delete skip_cores_;
  }
  skip_cores_ = nullptr;
  if (GetArena() == nullptr && rpc_settings_ != nullptr) {
    delete rpc_settings_;
  }
  rpc_settings_ = nullptr;
  if (GetArena() == nullptr && respect_shmem_ != nullptr) {
    delete respect_shmem_;
  }
  respect_shmem_ = nullptr;
  if (GetArena() == nullptr && display_status_ != nullptr) {
    delete display_status_;
  }
  display_status_ = nullptr;
  if (GetArena() == nullptr && listen_balance_ != nullptr) {
    delete listen_balance_;
  }
  listen_balance_ = nullptr;
  if (GetArena() == nullptr && export_thread_fraction_ != nullptr) {
    delete export_thread_fraction_;
  }
  export_thread_fraction_ = nullptr;
  ::memset(&max_concurrent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_paused_) -
      reinterpret_cast<char*>(&max_concurrent_)) + sizeof(start_paused_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_ManagerSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_concurrent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_concurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool restart_old = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wise_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wise_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.ManagerSettings.wise_location"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lock_cpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool start_paused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          start_paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration internal_builder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_builder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings mqtt_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mqtt_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue numa_lock = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_numa_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value skip_cores = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_skip_cores(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.RpcConfiguration rpc_settings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue respect_shmem = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_respect_shmem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue display_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue listen_balance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_listen_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value export_thread_fraction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_thread_fraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_ManagerSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.ManagerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_concurrent = 1;
  if (this->max_concurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_concurrent(), target);
  }

  // bool restart_old = 2;
  if (this->restart_old() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_restart_old(), target);
  }

  // string wise_location = 3;
  if (this->wise_location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wise_location().data(), static_cast<int>(this->_internal_wise_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.ManagerSettings.wise_location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_wise_location(), target);
  }

  // bool lock_cpu = 4;
  if (this->lock_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lock_cpu(), target);
  }

  // bool start_paused = 5;
  if (this->start_paused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_start_paused(), target);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration internal_builder = 6;
  if (this->has_internal_builder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::internal_builder(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings mqtt_settings = 7;
  if (this->has_mqtt_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mqtt_settings(this), target, stream);
  }

  // .google.protobuf.BoolValue numa_lock = 8;
  if (this->has_numa_lock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::numa_lock(this), target, stream);
  }

  // .google.protobuf.Int32Value skip_cores = 9;
  if (this->has_skip_cores()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::skip_cores(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.RpcConfiguration rpc_settings = 10;
  if (this->has_rpc_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rpc_settings(this), target, stream);
  }

  // .google.protobuf.BoolValue respect_shmem = 11;
  if (this->has_respect_shmem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::respect_shmem(this), target, stream);
  }

  // .google.protobuf.BoolValue display_status = 12;
  if (this->has_display_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::display_status(this), target, stream);
  }

  // .google.protobuf.BoolValue listen_balance = 13;
  if (this->has_listen_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::listen_balance(this), target, stream);
  }

  // .google.protobuf.Int32Value export_thread_fraction = 14;
  if (this->has_export_thread_fraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::export_thread_fraction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.ManagerSettings)
  return target;
}

size_t ServerConfiguration_ManagerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.ManagerSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wise_location = 3;
  if (this->wise_location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wise_location());
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.BuilderConfiguration internal_builder = 6;
  if (this->has_internal_builder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *internal_builder_);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings.MqttSettings mqtt_settings = 7;
  if (this->has_mqtt_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mqtt_settings_);
  }

  // .google.protobuf.BoolValue numa_lock = 8;
  if (this->has_numa_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *numa_lock_);
  }

  // .google.protobuf.Int32Value skip_cores = 9;
  if (this->has_skip_cores()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skip_cores_);
  }

  // .wise.confic.ServerConfiguration.RpcConfiguration rpc_settings = 10;
  if (this->has_rpc_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpc_settings_);
  }

  // .google.protobuf.BoolValue respect_shmem = 11;
  if (this->has_respect_shmem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respect_shmem_);
  }

  // .google.protobuf.BoolValue display_status = 12;
  if (this->has_display_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *display_status_);
  }

  // .google.protobuf.BoolValue listen_balance = 13;
  if (this->has_listen_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *listen_balance_);
  }

  // .google.protobuf.Int32Value export_thread_fraction = 14;
  if (this->has_export_thread_fraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_thread_fraction_);
  }

  // int32 max_concurrent = 1;
  if (this->max_concurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrent());
  }

  // bool restart_old = 2;
  if (this->restart_old() != 0) {
    total_size += 1 + 1;
  }

  // bool lock_cpu = 4;
  if (this->lock_cpu() != 0) {
    total_size += 1 + 1;
  }

  // bool start_paused = 5;
  if (this->start_paused() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_ManagerSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_ManagerSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_ManagerSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.ManagerSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.ManagerSettings)
    MergeFrom(*source);
  }
}

void ServerConfiguration_ManagerSettings::MergeFrom(const ServerConfiguration_ManagerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.ManagerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wise_location().size() > 0) {
    _internal_set_wise_location(from._internal_wise_location());
  }
  if (from.has_internal_builder()) {
    _internal_mutable_internal_builder()->::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration::MergeFrom(from._internal_internal_builder());
  }
  if (from.has_mqtt_settings()) {
    _internal_mutable_mqtt_settings()->::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings::MergeFrom(from._internal_mqtt_settings());
  }
  if (from.has_numa_lock()) {
    _internal_mutable_numa_lock()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_numa_lock());
  }
  if (from.has_skip_cores()) {
    _internal_mutable_skip_cores()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_skip_cores());
  }
  if (from.has_rpc_settings()) {
    _internal_mutable_rpc_settings()->::wise::confic::ServerConfiguration_RpcConfiguration::MergeFrom(from._internal_rpc_settings());
  }
  if (from.has_respect_shmem()) {
    _internal_mutable_respect_shmem()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_respect_shmem());
  }
  if (from.has_display_status()) {
    _internal_mutable_display_status()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_display_status());
  }
  if (from.has_listen_balance()) {
    _internal_mutable_listen_balance()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_listen_balance());
  }
  if (from.has_export_thread_fraction()) {
    _internal_mutable_export_thread_fraction()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_export_thread_fraction());
  }
  if (from.max_concurrent() != 0) {
    _internal_set_max_concurrent(from._internal_max_concurrent());
  }
  if (from.restart_old() != 0) {
    _internal_set_restart_old(from._internal_restart_old());
  }
  if (from.lock_cpu() != 0) {
    _internal_set_lock_cpu(from._internal_lock_cpu());
  }
  if (from.start_paused() != 0) {
    _internal_set_start_paused(from._internal_start_paused());
  }
}

void ServerConfiguration_ManagerSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_ManagerSettings::CopyFrom(const ServerConfiguration_ManagerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.ManagerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_ManagerSettings::IsInitialized() const {
  return true;
}

void ServerConfiguration_ManagerSettings::InternalSwap(ServerConfiguration_ManagerSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wise_location_.Swap(&other->wise_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings, start_paused_)
      + sizeof(ServerConfiguration_ManagerSettings::start_paused_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_ManagerSettings, internal_builder_)>(
          reinterpret_cast<char*>(&internal_builder_),
          reinterpret_cast<char*>(&other->internal_builder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_ManagerSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration_RpcConfiguration::InitAsDefaultInstance() {
  ::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_._instance.get_mutable()->internal_address_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_._instance.get_mutable()->external_port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::wise::confic::_ServerConfiguration_RpcConfiguration_default_instance_._instance.get_mutable()->internal_port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
}
class ServerConfiguration_RpcConfiguration::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& internal_address(const ServerConfiguration_RpcConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& external_port(const ServerConfiguration_RpcConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& internal_port(const ServerConfiguration_RpcConfiguration* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ServerConfiguration_RpcConfiguration::_Internal::internal_address(const ServerConfiguration_RpcConfiguration* msg) {
  return *msg->internal_address_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ServerConfiguration_RpcConfiguration::_Internal::external_port(const ServerConfiguration_RpcConfiguration* msg) {
  return *msg->external_port_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
ServerConfiguration_RpcConfiguration::_Internal::internal_port(const ServerConfiguration_RpcConfiguration* msg) {
  return *msg->internal_port_;
}
void ServerConfiguration_RpcConfiguration::clear_internal_address() {
  if (GetArena() == nullptr && internal_address_ != nullptr) {
    delete internal_address_;
  }
  internal_address_ = nullptr;
}
void ServerConfiguration_RpcConfiguration::clear_external_port() {
  if (GetArena() == nullptr && external_port_ != nullptr) {
    delete external_port_;
  }
  external_port_ = nullptr;
}
void ServerConfiguration_RpcConfiguration::clear_internal_port() {
  if (GetArena() == nullptr && internal_port_ != nullptr) {
    delete internal_port_;
  }
  internal_port_ = nullptr;
}
ServerConfiguration_RpcConfiguration::ServerConfiguration_RpcConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration.RpcConfiguration)
}
ServerConfiguration_RpcConfiguration::ServerConfiguration_RpcConfiguration(const ServerConfiguration_RpcConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  externaladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_externaladdress().empty()) {
    externaladdress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_externaladdress(),
      GetArena());
  }
  if (from._internal_has_internal_address()) {
    internal_address_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.internal_address_);
  } else {
    internal_address_ = nullptr;
  }
  if (from._internal_has_external_port()) {
    external_port_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.external_port_);
  } else {
    external_port_ = nullptr;
  }
  if (from._internal_has_internal_port()) {
    internal_port_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.internal_port_);
  } else {
    internal_port_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration.RpcConfiguration)
}

void ServerConfiguration_RpcConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto.base);
  externaladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&internal_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&internal_address_)) + sizeof(port_));
}

ServerConfiguration_RpcConfiguration::~ServerConfiguration_RpcConfiguration() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration.RpcConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration_RpcConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  externaladdress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete internal_address_;
  if (this != internal_default_instance()) delete external_port_;
  if (this != internal_default_instance()) delete internal_port_;
}

void ServerConfiguration_RpcConfiguration::ArenaDtor(void* object) {
  ServerConfiguration_RpcConfiguration* _this = reinterpret_cast< ServerConfiguration_RpcConfiguration* >(object);
  (void)_this;
}
void ServerConfiguration_RpcConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration_RpcConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration_RpcConfiguration& ServerConfiguration_RpcConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_RpcConfiguration_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration_RpcConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration.RpcConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  externaladdress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && internal_address_ != nullptr) {
    delete internal_address_;
  }
  internal_address_ = nullptr;
  if (GetArena() == nullptr && external_port_ != nullptr) {
    delete external_port_;
  }
  external_port_ = nullptr;
  if (GetArena() == nullptr && internal_port_ != nullptr) {
    delete internal_port_;
  }
  internal_port_ = nullptr;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration_RpcConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string externalAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_externaladdress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.RpcConfiguration.externalAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue internal_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value external_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value internal_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration_RpcConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration.RpcConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // string externalAddress = 2;
  if (this->externaladdress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_externaladdress().data(), static_cast<int>(this->_internal_externaladdress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.RpcConfiguration.externalAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_externaladdress(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // .google.protobuf.StringValue internal_address = 4;
  if (this->has_internal_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::internal_address(this), target, stream);
  }

  // .google.protobuf.Int32Value external_port = 5;
  if (this->has_external_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::external_port(this), target, stream);
  }

  // .google.protobuf.Int32Value internal_port = 6;
  if (this->has_internal_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::internal_port(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration.RpcConfiguration)
  return target;
}

size_t ServerConfiguration_RpcConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration.RpcConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string externalAddress = 2;
  if (this->externaladdress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_externaladdress());
  }

  // .google.protobuf.StringValue internal_address = 4;
  if (this->has_internal_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *internal_address_);
  }

  // .google.protobuf.Int32Value external_port = 5;
  if (this->has_external_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_port_);
  }

  // .google.protobuf.Int32Value internal_port = 6;
  if (this->has_internal_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *internal_port_);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration_RpcConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration.RpcConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration_RpcConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration_RpcConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration.RpcConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration.RpcConfiguration)
    MergeFrom(*source);
  }
}

void ServerConfiguration_RpcConfiguration::MergeFrom(const ServerConfiguration_RpcConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration.RpcConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.externaladdress().size() > 0) {
    _internal_set_externaladdress(from._internal_externaladdress());
  }
  if (from.has_internal_address()) {
    _internal_mutable_internal_address()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_internal_address());
  }
  if (from.has_external_port()) {
    _internal_mutable_external_port()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_external_port());
  }
  if (from.has_internal_port()) {
    _internal_mutable_internal_port()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_internal_port());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void ServerConfiguration_RpcConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration.RpcConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration_RpcConfiguration::CopyFrom(const ServerConfiguration_RpcConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration.RpcConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration_RpcConfiguration::IsInitialized() const {
  return true;
}

void ServerConfiguration_RpcConfiguration::InternalSwap(ServerConfiguration_RpcConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  externaladdress_.Swap(&other->externaladdress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration_RpcConfiguration, port_)
      + sizeof(ServerConfiguration_RpcConfiguration::port_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration_RpcConfiguration, internal_address_)>(
          reinterpret_cast<char*>(&internal_address_),
          reinterpret_cast<char*>(&other->internal_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration_RpcConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerConfiguration::InitAsDefaultInstance() {
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->log_ = const_cast< ::wise::confic::ServerConfiguration_LogFile*>(
      ::wise::confic::ServerConfiguration_LogFile::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->signals_ = const_cast< ::wise::confic::ServerConfiguration_Signals*>(
      ::wise::confic::ServerConfiguration_Signals::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->hardware_ = const_cast< ::wise::confic::ServerConfiguration_Hardware*>(
      ::wise::confic::ServerConfiguration_Hardware::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_.socket_ = const_cast< ::wise::confic::ServerConfiguration_SocketConnection*>(
      ::wise::confic::ServerConfiguration_SocketConnection::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_.mqtt_ = const_cast< ::wise::confic::ServerConfiguration_MqttConnection*>(
      ::wise::confic::ServerConfiguration_MqttConnection::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->builder_ = const_cast< ::wise::confic::ServerConfiguration_BuilderConnection*>(
      ::wise::confic::ServerConfiguration_BuilderConnection::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->manager_settings_ = const_cast< ::wise::confic::ServerConfiguration_ManagerSettings*>(
      ::wise::confic::ServerConfiguration_ManagerSettings::internal_default_instance());
  ::wise::confic::_ServerConfiguration_default_instance_._instance.get_mutable()->already_v2_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class ServerConfiguration::_Internal {
 public:
  static const ::wise::confic::ServerConfiguration_LogFile& log(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_Signals& signals(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_Hardware& hardware(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_SocketConnection& socket(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_MqttConnection& mqtt(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_BuilderConnection& builder(const ServerConfiguration* msg);
  static const ::wise::confic::ServerConfiguration_ManagerSettings& manager_settings(const ServerConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& already_v2(const ServerConfiguration* msg);
};

const ::wise::confic::ServerConfiguration_LogFile&
ServerConfiguration::_Internal::log(const ServerConfiguration* msg) {
  return *msg->log_;
}
const ::wise::confic::ServerConfiguration_Signals&
ServerConfiguration::_Internal::signals(const ServerConfiguration* msg) {
  return *msg->signals_;
}
const ::wise::confic::ServerConfiguration_Hardware&
ServerConfiguration::_Internal::hardware(const ServerConfiguration* msg) {
  return *msg->hardware_;
}
const ::wise::confic::ServerConfiguration_SocketConnection&
ServerConfiguration::_Internal::socket(const ServerConfiguration* msg) {
  return *msg->commsType_.socket_;
}
const ::wise::confic::ServerConfiguration_MqttConnection&
ServerConfiguration::_Internal::mqtt(const ServerConfiguration* msg) {
  return *msg->commsType_.mqtt_;
}
const ::wise::confic::ServerConfiguration_BuilderConnection&
ServerConfiguration::_Internal::builder(const ServerConfiguration* msg) {
  return *msg->builder_;
}
const ::wise::confic::ServerConfiguration_ManagerSettings&
ServerConfiguration::_Internal::manager_settings(const ServerConfiguration* msg) {
  return *msg->manager_settings_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
ServerConfiguration::_Internal::already_v2(const ServerConfiguration* msg) {
  return *msg->already_v2_;
}
void ServerConfiguration::set_allocated_socket(::wise::confic::ServerConfiguration_SocketConnection* socket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_commsType();
  if (socket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(socket);
    if (message_arena != submessage_arena) {
      socket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socket, submessage_arena);
    }
    set_has_socket();
    commsType_.socket_ = socket;
  }
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.socket)
}
void ServerConfiguration::set_allocated_mqtt(::wise::confic::ServerConfiguration_MqttConnection* mqtt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_commsType();
  if (mqtt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mqtt);
    if (message_arena != submessage_arena) {
      mqtt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mqtt, submessage_arena);
    }
    set_has_mqtt();
    commsType_.mqtt_ = mqtt;
  }
  // @@protoc_insertion_point(field_set_allocated:wise.confic.ServerConfiguration.mqtt)
}
void ServerConfiguration::clear_already_v2() {
  if (GetArena() == nullptr && already_v2_ != nullptr) {
    delete already_v2_;
  }
  already_v2_ = nullptr;
}
ServerConfiguration::ServerConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:wise.confic.ServerConfiguration)
}
ServerConfiguration::ServerConfiguration(const ServerConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exampledirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exampledirectory().empty()) {
    exampledirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exampledirectory(),
      GetArena());
  }
  if (from._internal_has_log()) {
    log_ = new ::wise::confic::ServerConfiguration_LogFile(*from.log_);
  } else {
    log_ = nullptr;
  }
  if (from._internal_has_signals()) {
    signals_ = new ::wise::confic::ServerConfiguration_Signals(*from.signals_);
  } else {
    signals_ = nullptr;
  }
  if (from._internal_has_hardware()) {
    hardware_ = new ::wise::confic::ServerConfiguration_Hardware(*from.hardware_);
  } else {
    hardware_ = nullptr;
  }
  if (from._internal_has_builder()) {
    builder_ = new ::wise::confic::ServerConfiguration_BuilderConnection(*from.builder_);
  } else {
    builder_ = nullptr;
  }
  if (from._internal_has_manager_settings()) {
    manager_settings_ = new ::wise::confic::ServerConfiguration_ManagerSettings(*from.manager_settings_);
  } else {
    manager_settings_ = nullptr;
  }
  if (from._internal_has_already_v2()) {
    already_v2_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.already_v2_);
  } else {
    already_v2_ = nullptr;
  }
  clear_has_commsType();
  switch (from.commsType_case()) {
    case kSocket: {
      _internal_mutable_socket()->::wise::confic::ServerConfiguration_SocketConnection::MergeFrom(from._internal_socket());
      break;
    }
    case kMqtt: {
      _internal_mutable_mqtt()->::wise::confic::ServerConfiguration_MqttConnection::MergeFrom(from._internal_mqtt());
      break;
    }
    case COMMSTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:wise.confic.ServerConfiguration)
}

void ServerConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfiguration_wise_5fconfig_2eproto.base);
  exampledirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&already_v2_) -
      reinterpret_cast<char*>(&log_)) + sizeof(already_v2_));
  clear_has_commsType();
}

ServerConfiguration::~ServerConfiguration() {
  // @@protoc_insertion_point(destructor:wise.confic.ServerConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exampledirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete signals_;
  if (this != internal_default_instance()) delete hardware_;
  if (this != internal_default_instance()) delete builder_;
  if (this != internal_default_instance()) delete manager_settings_;
  if (this != internal_default_instance()) delete already_v2_;
  if (has_commsType()) {
    clear_commsType();
  }
}

void ServerConfiguration::ArenaDtor(void* object) {
  ServerConfiguration* _this = reinterpret_cast< ServerConfiguration* >(object);
  (void)_this;
}
void ServerConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfiguration& ServerConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfiguration_wise_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ServerConfiguration::clear_commsType() {
// @@protoc_insertion_point(one_of_clear_start:wise.confic.ServerConfiguration)
  switch (commsType_case()) {
    case kSocket: {
      if (GetArena() == nullptr) {
        delete commsType_.socket_;
      }
      break;
    }
    case kMqtt: {
      if (GetArena() == nullptr) {
        delete commsType_.mqtt_;
      }
      break;
    }
    case COMMSTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMSTYPE_NOT_SET;
}


void ServerConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:wise.confic.ServerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exampledirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  if (GetArena() == nullptr && signals_ != nullptr) {
    delete signals_;
  }
  signals_ = nullptr;
  if (GetArena() == nullptr && hardware_ != nullptr) {
    delete hardware_;
  }
  hardware_ = nullptr;
  if (GetArena() == nullptr && builder_ != nullptr) {
    delete builder_;
  }
  builder_ = nullptr;
  if (GetArena() == nullptr && manager_settings_ != nullptr) {
    delete manager_settings_;
  }
  manager_settings_ = nullptr;
  if (GetArena() == nullptr && already_v2_ != nullptr) {
    delete already_v2_;
  }
  already_v2_ = nullptr;
  clear_commsType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .wise.confic.ServerConfiguration.LogFile log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.Signals signals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.Hardware hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.SocketConnection socket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.MqttConnection mqtt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mqtt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.BuilderConnection builder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_builder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exampleDirectory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_exampledirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wise.confic.ServerConfiguration.exampleDirectory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .wise.confic.ServerConfiguration.ManagerSettings manager_settings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_manager_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue already_v2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_already_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wise.confic.ServerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .wise.confic.ServerConfiguration.LogFile log = 1;
  if (this->has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::log(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.Signals signals = 2;
  if (this->has_signals()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signals(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.Hardware hardware = 3;
  if (this->has_hardware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hardware(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.SocketConnection socket = 4;
  if (_internal_has_socket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::socket(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.MqttConnection mqtt = 5;
  if (_internal_has_mqtt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mqtt(this), target, stream);
  }

  // .wise.confic.ServerConfiguration.BuilderConnection builder = 6;
  if (this->has_builder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::builder(this), target, stream);
  }

  // string exampleDirectory = 7;
  if (this->exampledirectory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exampledirectory().data(), static_cast<int>(this->_internal_exampledirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wise.confic.ServerConfiguration.exampleDirectory");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_exampledirectory(), target);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings manager_settings = 8;
  if (this->has_manager_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::manager_settings(this), target, stream);
  }

  // .google.protobuf.BoolValue already_v2 = 9;
  if (this->has_already_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::already_v2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wise.confic.ServerConfiguration)
  return target;
}

size_t ServerConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wise.confic.ServerConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exampleDirectory = 7;
  if (this->exampledirectory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exampledirectory());
  }

  // .wise.confic.ServerConfiguration.LogFile log = 1;
  if (this->has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_);
  }

  // .wise.confic.ServerConfiguration.Signals signals = 2;
  if (this->has_signals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signals_);
  }

  // .wise.confic.ServerConfiguration.Hardware hardware = 3;
  if (this->has_hardware()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hardware_);
  }

  // .wise.confic.ServerConfiguration.BuilderConnection builder = 6;
  if (this->has_builder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *builder_);
  }

  // .wise.confic.ServerConfiguration.ManagerSettings manager_settings = 8;
  if (this->has_manager_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manager_settings_);
  }

  // .google.protobuf.BoolValue already_v2 = 9;
  if (this->has_already_v2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *already_v2_);
  }

  switch (commsType_case()) {
    // .wise.confic.ServerConfiguration.SocketConnection socket = 4;
    case kSocket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commsType_.socket_);
      break;
    }
    // .wise.confic.ServerConfiguration.MqttConnection mqtt = 5;
    case kMqtt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commsType_.mqtt_);
      break;
    }
    case COMMSTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wise.confic.ServerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wise.confic.ServerConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wise.confic.ServerConfiguration)
    MergeFrom(*source);
  }
}

void ServerConfiguration::MergeFrom(const ServerConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wise.confic.ServerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exampledirectory().size() > 0) {
    _internal_set_exampledirectory(from._internal_exampledirectory());
  }
  if (from.has_log()) {
    _internal_mutable_log()->::wise::confic::ServerConfiguration_LogFile::MergeFrom(from._internal_log());
  }
  if (from.has_signals()) {
    _internal_mutable_signals()->::wise::confic::ServerConfiguration_Signals::MergeFrom(from._internal_signals());
  }
  if (from.has_hardware()) {
    _internal_mutable_hardware()->::wise::confic::ServerConfiguration_Hardware::MergeFrom(from._internal_hardware());
  }
  if (from.has_builder()) {
    _internal_mutable_builder()->::wise::confic::ServerConfiguration_BuilderConnection::MergeFrom(from._internal_builder());
  }
  if (from.has_manager_settings()) {
    _internal_mutable_manager_settings()->::wise::confic::ServerConfiguration_ManagerSettings::MergeFrom(from._internal_manager_settings());
  }
  if (from.has_already_v2()) {
    _internal_mutable_already_v2()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_already_v2());
  }
  switch (from.commsType_case()) {
    case kSocket: {
      _internal_mutable_socket()->::wise::confic::ServerConfiguration_SocketConnection::MergeFrom(from._internal_socket());
      break;
    }
    case kMqtt: {
      _internal_mutable_mqtt()->::wise::confic::ServerConfiguration_MqttConnection::MergeFrom(from._internal_mqtt());
      break;
    }
    case COMMSTYPE_NOT_SET: {
      break;
    }
  }
}

void ServerConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wise.confic.ServerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfiguration::CopyFrom(const ServerConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wise.confic.ServerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfiguration::IsInitialized() const {
  return true;
}

void ServerConfiguration::InternalSwap(ServerConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exampledirectory_.Swap(&other->exampledirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfiguration, already_v2_)
      + sizeof(ServerConfiguration::already_v2_)
      - PROTOBUF_FIELD_OFFSET(ServerConfiguration, log_)>(
          reinterpret_cast<char*>(&log_),
          reinterpret_cast<char*>(&other->log_));
  swap(commsType_, other->commsType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace confic
}  // namespace wise
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_LogFile* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_LogFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_LogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_Signals* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_Signals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_Signals >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_Hardware* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_Hardware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_Hardware >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_SocketConnection* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_SocketConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_SocketConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_MqttConnection* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_MqttConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_MqttConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_BuilderConnection* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_BuilderConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_BuilderConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_ManagerSettings_BuilderConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings_MqttWebHost >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_ManagerSettings_MqttSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_ManagerSettings* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_ManagerSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_ManagerSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration_RpcConfiguration* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration_RpcConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration_RpcConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::wise::confic::ServerConfiguration* Arena::CreateMaybeMessage< ::wise::confic::ServerConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wise::confic::ServerConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
